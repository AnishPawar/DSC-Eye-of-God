define(['dart_sdk', 'packages/plugin_platform_interface/plugin_platform_interface.dart', 'packages/flutter/src/services/system_channels.dart'], (function load__packages__location_platform_interface__location_platform_interface_dart(dart_sdk, packages__plugin_platform_interface__plugin_platform_interface$46dart, packages__flutter__src__services__system_channels$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const plugin_platform_interface = packages__plugin_platform_interface__plugin_platform_interface$46dart.plugin_platform_interface;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const message_codecs = packages__flutter__src__services__system_channels$46dart.src__services__message_codecs;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  var location_platform_interface = Object.create(dart.library);
  var $_get = dartx._get;
  var $hashCode = dartx.hashCode;
  var $toString = dartx.toString;
  var $_equals = dartx._equals;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    IdentityMapOfStringL$dynamic: () => (T.IdentityMapOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(T.StringL(), dart.dynamic)))(),
    boolL: () => (T.boolL = dart.constFn(dart.legacy(core.bool)))(),
    doubleL: () => (T.doubleL = dart.constFn(dart.legacy(core.double)))(),
    LocationDataL: () => (T.LocationDataL = dart.constFn(dart.legacy(location_platform_interface.LocationData)))(),
    PermissionStatusL: () => (T.PermissionStatusL = dart.constFn(dart.legacy(location_platform_interface.PermissionStatus)))(),
    LinkedHashMapOfStringL$doubleL: () => (T.LinkedHashMapOfStringL$doubleL = dart.constFn(collection.LinkedHashMap$(T.StringL(), T.doubleL())))(),
    dynamicToLocationDataL: () => (T.dynamicToLocationDataL = dart.constFn(dart.fnType(T.LocationDataL(), [dart.dynamic])))(),
    LocationAccuracyL: () => (T.LocationAccuracyL = dart.constFn(dart.legacy(location_platform_interface.LocationAccuracy)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C2() {
      return C[2] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[2] || CT.C2
      });
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[1] || CT.C1,
        [MethodChannel_name]: "lyokone/location"
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: platform_channel.EventChannel.prototype,
        [EventChannel__binaryMessenger]: null,
        [EventChannel_codec]: C[1] || CT.C1,
        [EventChannel_name]: "lyokone/locationstream"
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: location_platform_interface.LocationAccuracy.prototype,
        [_name$]: "LocationAccuracy.high",
        index: 3
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: location_platform_interface.LocationAccuracy.prototype,
        [_name$]: "LocationAccuracy.powerSave",
        index: 0
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: location_platform_interface.LocationAccuracy.prototype,
        [_name$]: "LocationAccuracy.low",
        index: 1
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: location_platform_interface.LocationAccuracy.prototype,
        [_name$]: "LocationAccuracy.balanced",
        index: 2
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: location_platform_interface.LocationAccuracy.prototype,
        [_name$]: "LocationAccuracy.navigation",
        index: 4
      });
    },
    get C9() {
      return C[9] = dart.constList([C[5] || CT.C5, C[6] || CT.C6, C[7] || CT.C7, C[4] || CT.C4, C[8] || CT.C8], T.LocationAccuracyL());
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: location_platform_interface.PermissionStatus.prototype,
        [_name$]: "PermissionStatus.granted",
        index: 0
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: location_platform_interface.PermissionStatus.prototype,
        [_name$]: "PermissionStatus.grantedLimited",
        index: 1
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: location_platform_interface.PermissionStatus.prototype,
        [_name$]: "PermissionStatus.denied",
        index: 2
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: location_platform_interface.PermissionStatus.prototype,
        [_name$]: "PermissionStatus.deniedForever",
        index: 3
      });
    },
    get C14() {
      return C[14] = dart.constList([C[10] || CT.C10, C[11] || CT.C11, C[12] || CT.C12, C[13] || CT.C13], T.PermissionStatusL());
    }
  }, false);
  var C = Array(15).fill(void 0);
  var I = ["package:location_platform_interface/location_platform_interface.dart"];
  location_platform_interface.LocationPlatform = class LocationPlatform extends plugin_platform_interface.PlatformInterface {
    static get instance() {
      return location_platform_interface.LocationPlatform._instance;
    }
    static set instance(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, location_platform_interface.LocationPlatform._token);
      location_platform_interface.LocationPlatform._instance = instance;
    }
    changeSettings(opts) {
      let accuracy = opts && 'accuracy' in opts ? opts.accuracy : null;
      let interval = opts && 'interval' in opts ? opts.interval : null;
      let distanceFilter = opts && 'distanceFilter' in opts ? opts.distanceFilter : null;
      dart.throw(new core.UnimplementedError.new());
    }
    isBackgroundModeEnabled() {
      dart.throw(new core.UnimplementedError.new());
    }
    enableBackgroundMode(opts) {
      let enable = opts && 'enable' in opts ? opts.enable : null;
      dart.throw(new core.UnimplementedError.new());
    }
    getLocation() {
      dart.throw(new core.UnimplementedError.new());
    }
    hasPermission() {
      dart.throw(new core.UnimplementedError.new());
    }
    requestPermission() {
      dart.throw(new core.UnimplementedError.new());
    }
    serviceEnabled() {
      dart.throw(new core.UnimplementedError.new());
    }
    requestService() {
      dart.throw(new core.UnimplementedError.new());
    }
    get onLocationChanged() {
      dart.throw(new core.UnimplementedError.new());
    }
  };
  (location_platform_interface.LocationPlatform.new = function() {
    location_platform_interface.LocationPlatform.__proto__.new.call(this, {token: location_platform_interface.LocationPlatform._token});
    ;
  }).prototype = location_platform_interface.LocationPlatform.prototype;
  dart.addTypeTests(location_platform_interface.LocationPlatform);
  dart.addTypeCaches(location_platform_interface.LocationPlatform);
  dart.setMethodSignature(location_platform_interface.LocationPlatform, () => ({
    __proto__: dart.getMethods(location_platform_interface.LocationPlatform.__proto__),
    changeSettings: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [], {accuracy: dart.legacy(location_platform_interface.LocationAccuracy), distanceFilter: dart.legacy(core.double), interval: dart.legacy(core.int)}, {}),
    isBackgroundModeEnabled: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    enableBackgroundMode: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [], {enable: dart.legacy(core.bool)}, {}),
    getLocation: dart.fnType(dart.legacy(async.Future$(dart.legacy(location_platform_interface.LocationData))), []),
    hasPermission: dart.fnType(dart.legacy(async.Future$(dart.legacy(location_platform_interface.PermissionStatus))), []),
    requestPermission: dart.fnType(dart.legacy(async.Future$(dart.legacy(location_platform_interface.PermissionStatus))), []),
    serviceEnabled: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    requestService: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [])
  }));
  dart.setGetterSignature(location_platform_interface.LocationPlatform, () => ({
    __proto__: dart.getGetters(location_platform_interface.LocationPlatform.__proto__),
    onLocationChanged: dart.legacy(async.Stream$(dart.legacy(location_platform_interface.LocationData)))
  }));
  dart.setLibraryUri(location_platform_interface.LocationPlatform, I[0]);
  dart.defineLazy(location_platform_interface.LocationPlatform, {
    /*location_platform_interface.LocationPlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*location_platform_interface.LocationPlatform._instance*/get _instance() {
      return location_platform_interface.MethodChannelLocation.new();
    },
    set _instance(_) {}
  }, true);
  var _onLocationChanged = dart.privateName(location_platform_interface, "_onLocationChanged");
  var _methodChannel$ = dart.privateName(location_platform_interface, "_methodChannel");
  var _eventChannel$ = dart.privateName(location_platform_interface, "_eventChannel");
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  var EventChannel__binaryMessenger = dart.privateName(platform_channel, "EventChannel._binaryMessenger");
  var EventChannel_codec = dart.privateName(platform_channel, "EventChannel.codec");
  var EventChannel_name = dart.privateName(platform_channel, "EventChannel.name");
  var _name$ = dart.privateName(location_platform_interface, "_name");
  var _parsePermissionStatus = dart.privateName(location_platform_interface, "_parsePermissionStatus");
  location_platform_interface.MethodChannelLocation = class MethodChannelLocation extends location_platform_interface.LocationPlatform {
    static new() {
      if (location_platform_interface.MethodChannelLocation._instance == null) {
        let methodChannel = C[0] || CT.C0;
        let eventChannel = C[3] || CT.C3;
        location_platform_interface.MethodChannelLocation._instance = new location_platform_interface.MethodChannelLocation.private(methodChannel, eventChannel);
      }
      return location_platform_interface.MethodChannelLocation._instance;
    }
    changeSettings(opts) {
      let accuracy = opts && 'accuracy' in opts ? opts.accuracy : C[4] || CT.C4;
      let interval = opts && 'interval' in opts ? opts.interval : 1000;
      let distanceFilter = opts && 'distanceFilter' in opts ? opts.distanceFilter : 0;
      return async.async(T.boolL(), (function* changeSettings() {
        let result = (yield this[_methodChannel$].invokeMethod(T.intL(), "changeSettings", new (T.IdentityMapOfStringL$dynamic()).from(["accuracy", accuracy.index, "interval", interval, "distanceFilter", distanceFilter])));
        return result === 1;
      }).bind(this));
    }
    isBackgroundModeEnabled() {
      return async.async(T.boolL(), (function* isBackgroundModeEnabled() {
        let result = (yield this[_methodChannel$].invokeMethod(T.intL(), "isBackgroundModeEnabled"));
        return result === 1;
      }).bind(this));
    }
    enableBackgroundMode(opts) {
      let enable = opts && 'enable' in opts ? opts.enable : null;
      return async.async(T.boolL(), (function* enableBackgroundMode() {
        let result = (yield this[_methodChannel$].invokeMethod(T.intL(), "enableBackgroundMode", new (T.IdentityMapOfStringL$dynamic()).from(["enable", enable])));
        return result === 1;
      }).bind(this));
    }
    getLocation() {
      return async.async(T.LocationDataL(), (function* getLocation() {
        let resultMap = (yield this[_methodChannel$].invokeMapMethod(T.StringL(), T.doubleL(), "getLocation"));
        return location_platform_interface.LocationData.fromMap(resultMap);
      }).bind(this));
    }
    hasPermission() {
      return async.async(T.PermissionStatusL(), (function* hasPermission() {
        let result = (yield this[_methodChannel$].invokeMethod(T.intL(), "hasPermission"));
        return this[_parsePermissionStatus](result);
      }).bind(this));
    }
    requestPermission() {
      return async.async(T.PermissionStatusL(), (function* requestPermission() {
        let result = (yield this[_methodChannel$].invokeMethod(T.intL(), "requestPermission"));
        return this[_parsePermissionStatus](result);
      }).bind(this));
    }
    [_parsePermissionStatus](result) {
      switch (result) {
        case 0:
        {
          return location_platform_interface.PermissionStatus.denied;
        }
        case 1:
        {
          return location_platform_interface.PermissionStatus.granted;
        }
        case 2:
        {
          return location_platform_interface.PermissionStatus.deniedForever;
        }
        case 3:
        {
          return location_platform_interface.PermissionStatus.grantedLimited;
        }
        default:
        {
          dart.throw(new message_codec.PlatformException.new({code: "UNKNOWN_NATIVE_MESSAGE", message: "Could not decode parsePermissionStatus with " + dart.str(result)}));
        }
      }
    }
    serviceEnabled() {
      return async.async(T.boolL(), (function* serviceEnabled() {
        let result = (yield this[_methodChannel$].invokeMethod(T.intL(), "serviceEnabled"));
        return result === 1;
      }).bind(this));
    }
    requestService() {
      return async.async(T.boolL(), (function* requestService() {
        let result = (yield this[_methodChannel$].invokeMethod(T.intL(), "requestService"));
        return result === 1;
      }).bind(this));
    }
    get onLocationChanged() {
      let t0;
      t0 = this[_onLocationChanged];
      return t0 == null ? this[_onLocationChanged] = this[_eventChannel$].receiveBroadcastStream().map(T.LocationDataL(), dart.fn(element => location_platform_interface.LocationData.fromMap(T.LinkedHashMapOfStringL$doubleL().from(core.Map.as(element))), T.dynamicToLocationDataL())) : t0;
    }
  };
  (location_platform_interface.MethodChannelLocation.private = function(_methodChannel, _eventChannel) {
    this[_onLocationChanged] = null;
    this[_methodChannel$] = _methodChannel;
    this[_eventChannel$] = _eventChannel;
    location_platform_interface.MethodChannelLocation.__proto__.new.call(this);
    ;
  }).prototype = location_platform_interface.MethodChannelLocation.prototype;
  dart.addTypeTests(location_platform_interface.MethodChannelLocation);
  dart.addTypeCaches(location_platform_interface.MethodChannelLocation);
  dart.setMethodSignature(location_platform_interface.MethodChannelLocation, () => ({
    __proto__: dart.getMethods(location_platform_interface.MethodChannelLocation.__proto__),
    [_parsePermissionStatus]: dart.fnType(dart.legacy(location_platform_interface.PermissionStatus), [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(location_platform_interface.MethodChannelLocation, I[0]);
  dart.setFieldSignature(location_platform_interface.MethodChannelLocation, () => ({
    __proto__: dart.getFields(location_platform_interface.MethodChannelLocation.__proto__),
    [_methodChannel$]: dart.finalFieldType(dart.legacy(platform_channel.MethodChannel)),
    [_eventChannel$]: dart.finalFieldType(dart.legacy(platform_channel.EventChannel)),
    [_onLocationChanged]: dart.fieldType(dart.legacy(async.Stream$(dart.legacy(location_platform_interface.LocationData))))
  }));
  dart.defineLazy(location_platform_interface.MethodChannelLocation, {
    /*location_platform_interface.MethodChannelLocation._instance*/get _instance() {
      return null;
    },
    set _instance(_) {}
  }, true);
  var latitude$ = dart.privateName(location_platform_interface, "LocationData.latitude");
  var longitude$ = dart.privateName(location_platform_interface, "LocationData.longitude");
  var accuracy$ = dart.privateName(location_platform_interface, "LocationData.accuracy");
  var altitude$ = dart.privateName(location_platform_interface, "LocationData.altitude");
  var speed$ = dart.privateName(location_platform_interface, "LocationData.speed");
  var speedAccuracy$ = dart.privateName(location_platform_interface, "LocationData.speedAccuracy");
  var heading$ = dart.privateName(location_platform_interface, "LocationData.heading");
  var time$ = dart.privateName(location_platform_interface, "LocationData.time");
  location_platform_interface.LocationData = class LocationData extends core.Object {
    get latitude() {
      return this[latitude$];
    }
    set latitude(value) {
      super.latitude = value;
    }
    get longitude() {
      return this[longitude$];
    }
    set longitude(value) {
      super.longitude = value;
    }
    get accuracy() {
      return this[accuracy$];
    }
    set accuracy(value) {
      super.accuracy = value;
    }
    get altitude() {
      return this[altitude$];
    }
    set altitude(value) {
      super.altitude = value;
    }
    get speed() {
      return this[speed$];
    }
    set speed(value) {
      super.speed = value;
    }
    get speedAccuracy() {
      return this[speedAccuracy$];
    }
    set speedAccuracy(value) {
      super.speedAccuracy = value;
    }
    get heading() {
      return this[heading$];
    }
    set heading(value) {
      super.heading = value;
    }
    get time() {
      return this[time$];
    }
    set time(value) {
      super.time = value;
    }
    static fromMap(dataMap) {
      return new location_platform_interface.LocationData.__(dataMap[$_get]("latitude"), dataMap[$_get]("longitude"), dataMap[$_get]("accuracy"), dataMap[$_get]("altitude"), dataMap[$_get]("speed"), dataMap[$_get]("speed_accuracy"), dataMap[$_get]("heading"), dataMap[$_get]("time"));
    }
    toString() {
      return "LocationData<lat: " + dart.str(this.latitude) + ", long: " + dart.str(this.longitude) + ">";
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || T.LocationDataL().is(other) && dart.equals(this.runtimeType, dart.runtimeType(other)) && this.latitude == other.latitude && this.longitude == other.longitude && this.accuracy == other.accuracy && this.altitude == other.altitude && this.speed == other.speed && this.speedAccuracy == other.speedAccuracy && this.heading == other.heading && this.time == other.time;
    }
    get hashCode() {
      return (dart.hashCode(this.latitude) ^ dart.hashCode(this.longitude) ^ dart.hashCode(this.accuracy) ^ dart.hashCode(this.altitude) ^ dart.hashCode(this.speed) ^ dart.hashCode(this.speedAccuracy) ^ dart.hashCode(this.heading) ^ dart.hashCode(this.time)) >>> 0;
    }
  };
  (location_platform_interface.LocationData.__ = function(latitude, longitude, accuracy, altitude, speed, speedAccuracy, heading, time) {
    this[latitude$] = latitude;
    this[longitude$] = longitude;
    this[accuracy$] = accuracy;
    this[altitude$] = altitude;
    this[speed$] = speed;
    this[speedAccuracy$] = speedAccuracy;
    this[heading$] = heading;
    this[time$] = time;
    ;
  }).prototype = location_platform_interface.LocationData.prototype;
  dart.addTypeTests(location_platform_interface.LocationData);
  dart.addTypeCaches(location_platform_interface.LocationData);
  dart.setMethodSignature(location_platform_interface.LocationData, () => ({
    __proto__: dart.getMethods(location_platform_interface.LocationData.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(location_platform_interface.LocationData, () => ({
    __proto__: dart.getGetters(location_platform_interface.LocationData.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(location_platform_interface.LocationData, I[0]);
  dart.setFieldSignature(location_platform_interface.LocationData, () => ({
    __proto__: dart.getFields(location_platform_interface.LocationData.__proto__),
    latitude: dart.finalFieldType(dart.legacy(core.double)),
    longitude: dart.finalFieldType(dart.legacy(core.double)),
    accuracy: dart.finalFieldType(dart.legacy(core.double)),
    altitude: dart.finalFieldType(dart.legacy(core.double)),
    speed: dart.finalFieldType(dart.legacy(core.double)),
    speedAccuracy: dart.finalFieldType(dart.legacy(core.double)),
    heading: dart.finalFieldType(dart.legacy(core.double)),
    time: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(location_platform_interface.LocationData, ['toString', '_equals']);
  dart.defineExtensionAccessors(location_platform_interface.LocationData, ['hashCode']);
  location_platform_interface.LocationAccuracy = class LocationAccuracy extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (location_platform_interface.LocationAccuracy.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = location_platform_interface.LocationAccuracy.prototype;
  dart.addTypeTests(location_platform_interface.LocationAccuracy);
  dart.addTypeCaches(location_platform_interface.LocationAccuracy);
  dart.setMethodSignature(location_platform_interface.LocationAccuracy, () => ({
    __proto__: dart.getMethods(location_platform_interface.LocationAccuracy.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(location_platform_interface.LocationAccuracy, I[0]);
  dart.setFieldSignature(location_platform_interface.LocationAccuracy, () => ({
    __proto__: dart.getFields(location_platform_interface.LocationAccuracy.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(location_platform_interface.LocationAccuracy, ['toString']);
  location_platform_interface.LocationAccuracy.powerSave = C[5] || CT.C5;
  location_platform_interface.LocationAccuracy.low = C[6] || CT.C6;
  location_platform_interface.LocationAccuracy.balanced = C[7] || CT.C7;
  location_platform_interface.LocationAccuracy.high = C[4] || CT.C4;
  location_platform_interface.LocationAccuracy.navigation = C[8] || CT.C8;
  location_platform_interface.LocationAccuracy.values = C[9] || CT.C9;
  location_platform_interface.PermissionStatus = class PermissionStatus extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (location_platform_interface.PermissionStatus.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = location_platform_interface.PermissionStatus.prototype;
  dart.addTypeTests(location_platform_interface.PermissionStatus);
  dart.addTypeCaches(location_platform_interface.PermissionStatus);
  dart.setMethodSignature(location_platform_interface.PermissionStatus, () => ({
    __proto__: dart.getMethods(location_platform_interface.PermissionStatus.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(location_platform_interface.PermissionStatus, I[0]);
  dart.setFieldSignature(location_platform_interface.PermissionStatus, () => ({
    __proto__: dart.getFields(location_platform_interface.PermissionStatus.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(location_platform_interface.PermissionStatus, ['toString']);
  location_platform_interface.PermissionStatus.granted = C[10] || CT.C10;
  location_platform_interface.PermissionStatus.grantedLimited = C[11] || CT.C11;
  location_platform_interface.PermissionStatus.denied = C[12] || CT.C12;
  location_platform_interface.PermissionStatus.deniedForever = C[13] || CT.C13;
  location_platform_interface.PermissionStatus.values = C[14] || CT.C14;
  dart.trackLibraries("packages/location_platform_interface/location_platform_interface.dart", {
    "package:location_platform_interface/location_platform_interface.dart": location_platform_interface
  }, {
    "package:location_platform_interface/location_platform_interface.dart": ["src/method_channel_location.dart", "src/types.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["location_platform_interface.dart","src/method_channel_location.dart","src/types.dart"],"names":[],"mappings":"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","file":"../../../../../../../../D:/packages/location_platform_interface/location_platform_interface.dart.lib.js"}');
  // Exports:
  return {
    location_platform_interface: location_platform_interface
  };
}));

//# sourceMappingURL=location_platform_interface.dart.lib.js.map
