define(['dart_sdk', 'packages/flutter/src/widgets/texture.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/services/system_channels.dart', 'packages/flutter/src/foundation/change_notifier.dart', 'packages/flutter/src/foundation/_platform_web.dart'], (function load__packages__camera__camera_dart(dart_sdk, packages__flutter__src__widgets__texture$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__services__system_channels$46dart, packages__flutter__src__foundation__change_notifier$46dart, packages__flutter__src__foundation___platform_web$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const async = dart_sdk.async;
  const _js_helper = dart_sdk._js_helper;
  const typed_data = dart_sdk.typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const texture = packages__flutter__src__widgets__texture$46dart.src__widgets__texture;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const container = packages__flutter__src__widgets__widget_span$46dart.src__widgets__container;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const message_codecs = packages__flutter__src__services__system_channels$46dart.src__services__message_codecs;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const platform = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  var camera$ = Object.create(dart.library);
  var $toString = dartx.toString;
  var $_equals = dartx._equals;
  var $hashCode = dartx.hashCode;
  var $_get = dartx._get;
  var $map = dartx.map;
  var $toList = dartx.toList;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    CameraLensDirectionL: () => (T.CameraLensDirectionL = dart.constFn(dart.legacy(camera$.CameraLensDirection)))(),
    ResolutionPresetL: () => (T.ResolutionPresetL = dart.constFn(dart.legacy(camera$.ResolutionPreset)))(),
    CameraDescriptionL: () => (T.CameraDescriptionL = dart.constFn(dart.legacy(camera$.CameraDescription)))(),
    _LocationL: () => (T._LocationL = dart.constFn(dart.legacy(widget_inspector._Location)))(),
    FutureOfvoid: () => (T.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    CompleterOfvoid: () => (T.CompleterOfvoid = dart.constFn(async.Completer$(dart.void)))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    IdentityMapOfStringL$dynamic: () => (T.IdentityMapOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(T.StringL(), dart.dynamic)))(),
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    PlatformExceptionL: () => (T.PlatformExceptionL = dart.constFn(dart.legacy(message_codec.PlatformException)))(),
    MapL: () => (T.MapL = dart.constFn(dart.legacy(core.Map)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    Uint8ListL: () => (T.Uint8ListL = dart.constFn(dart.legacy(typed_data.Uint8List)))(),
    ImageFormatGroupL: () => (T.ImageFormatGroupL = dart.constFn(dart.legacy(camera$.ImageFormatGroup)))(),
    PlaneL: () => (T.PlaneL = dart.constFn(dart.legacy(camera$.Plane)))(),
    ListOfPlaneL: () => (T.ListOfPlaneL = dart.constFn(core.List$(T.PlaneL())))(),
    dynamicToPlaneL: () => (T.dynamicToPlaneL = dart.constFn(dart.fnType(T.PlaneL(), [dart.dynamic])))(),
    MapLToCameraDescriptionL: () => (T.MapLToCameraDescriptionL = dart.constFn(dart.fnType(T.CameraDescriptionL(), [T.MapL()])))(),
    ListOfCameraDescriptionL: () => (T.ListOfCameraDescriptionL = dart.constFn(core.List$(T.CameraDescriptionL())))(),
    ListLOfCameraDescriptionL: () => (T.ListLOfCameraDescriptionL = dart.constFn(dart.legacy(T.ListOfCameraDescriptionL())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: camera$.CameraLensDirection.prototype,
        [_name$]: "CameraLensDirection.front",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: camera$.CameraLensDirection.prototype,
        [_name$]: "CameraLensDirection.back",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: camera$.CameraLensDirection.prototype,
        [_name$]: "CameraLensDirection.external",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2], T.CameraLensDirectionL());
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: camera$.ResolutionPreset.prototype,
        [_name$]: "ResolutionPreset.low",
        index: 0
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: camera$.ResolutionPreset.prototype,
        [_name$]: "ResolutionPreset.medium",
        index: 1
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: camera$.ResolutionPreset.prototype,
        [_name$]: "ResolutionPreset.high",
        index: 2
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: camera$.ResolutionPreset.prototype,
        [_name$]: "ResolutionPreset.veryHigh",
        index: 3
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: camera$.ResolutionPreset.prototype,
        [_name$]: "ResolutionPreset.ultraHigh",
        index: 4
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: camera$.ResolutionPreset.prototype,
        [_name$]: "ResolutionPreset.max",
        index: 5
      });
    },
    get C10() {
      return C[10] = dart.constList([C[4] || CT.C4, C[5] || CT.C5, C[6] || CT.C6, C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9], T.ResolutionPresetL());
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textureId",
        [_Location_column]: 19,
        [_Location_line]: 173,
        [_Location_file]: null
      });
    },
    get C12() {
      return C[12] = dart.constList([C[13] || CT.C13], T._LocationL());
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[12] || CT.C12,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 173,
        [_Location_file]: "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/camera-0.5.8+17/lib/camera.dart"
      });
    },
    get C15() {
      return C[15] = dart.constList([], T._LocationL());
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[15] || CT.C15,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 174,
        [_Location_file]: "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/camera-0.5.8+17/lib/camera.dart"
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: camera$.CameraValue.prototype,
        [previewSize$]: null,
        [errorDescription$]: null,
        [_isRecordingPaused]: false,
        [isStreamingImages$]: false,
        [isRecordingVideo$]: false,
        [isTakingPicture$]: false,
        [isInitialized$]: false
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[19] || CT.C19
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: platform_channel.EventChannel.prototype,
        [EventChannel__binaryMessenger]: null,
        [EventChannel_codec]: C[18] || CT.C18,
        [EventChannel_name]: "plugins.flutter.io/camera/imageStream"
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: camera$.ImageFormatGroup.prototype,
        [_name$]: "ImageFormatGroup.unknown",
        index: 0
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: camera$.ImageFormatGroup.prototype,
        [_name$]: "ImageFormatGroup.yuv420",
        index: 1
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: camera$.ImageFormatGroup.prototype,
        [_name$]: "ImageFormatGroup.bgra8888",
        index: 2
      });
    },
    get C23() {
      return C[23] = dart.constList([C[20] || CT.C20, C[21] || CT.C21, C[22] || CT.C22], T.ImageFormatGroupL());
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[18] || CT.C18,
        [MethodChannel_name]: "plugins.flutter.io/camera"
      });
    }
  }, false);
  var C = Array(25).fill(void 0);
  var I = [
    "package:camera/camera.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/camera-0.5.8+17/lib/camera.dart"
  ];
  var _name$ = dart.privateName(camera$, "_name");
  camera$.CameraLensDirection = class CameraLensDirection extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (camera$.CameraLensDirection.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = camera$.CameraLensDirection.prototype;
  dart.addTypeTests(camera$.CameraLensDirection);
  dart.addTypeCaches(camera$.CameraLensDirection);
  dart.setMethodSignature(camera$.CameraLensDirection, () => ({
    __proto__: dart.getMethods(camera$.CameraLensDirection.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(camera$.CameraLensDirection, I[0]);
  dart.setFieldSignature(camera$.CameraLensDirection, () => ({
    __proto__: dart.getFields(camera$.CameraLensDirection.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(camera$.CameraLensDirection, ['toString']);
  camera$.CameraLensDirection.front = C[0] || CT.C0;
  camera$.CameraLensDirection.back = C[1] || CT.C1;
  camera$.CameraLensDirection.external = C[2] || CT.C2;
  camera$.CameraLensDirection.values = C[3] || CT.C3;
  camera$.ResolutionPreset = class ResolutionPreset extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (camera$.ResolutionPreset.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = camera$.ResolutionPreset.prototype;
  dart.addTypeTests(camera$.ResolutionPreset);
  dart.addTypeCaches(camera$.ResolutionPreset);
  dart.setMethodSignature(camera$.ResolutionPreset, () => ({
    __proto__: dart.getMethods(camera$.ResolutionPreset.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(camera$.ResolutionPreset, I[0]);
  dart.setFieldSignature(camera$.ResolutionPreset, () => ({
    __proto__: dart.getFields(camera$.ResolutionPreset.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(camera$.ResolutionPreset, ['toString']);
  camera$.ResolutionPreset.low = C[4] || CT.C4;
  camera$.ResolutionPreset.medium = C[5] || CT.C5;
  camera$.ResolutionPreset.high = C[6] || CT.C6;
  camera$.ResolutionPreset.veryHigh = C[7] || CT.C7;
  camera$.ResolutionPreset.ultraHigh = C[8] || CT.C8;
  camera$.ResolutionPreset.max = C[9] || CT.C9;
  camera$.ResolutionPreset.values = C[10] || CT.C10;
  var name$ = dart.privateName(camera$, "CameraDescription.name");
  var lensDirection$ = dart.privateName(camera$, "CameraDescription.lensDirection");
  var sensorOrientation$ = dart.privateName(camera$, "CameraDescription.sensorOrientation");
  camera$.CameraDescription = class CameraDescription extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get lensDirection() {
      return this[lensDirection$];
    }
    set lensDirection(value) {
      super.lensDirection = value;
    }
    get sensorOrientation() {
      return this[sensorOrientation$];
    }
    set sensorOrientation(value) {
      super.sensorOrientation = value;
    }
    _equals(o) {
      if (o == null) return false;
      return T.CameraDescriptionL().is(o) && o.name == this.name && o.lensDirection == this.lensDirection;
    }
    get hashCode() {
      return ui.hashValues(this.name, this.lensDirection);
    }
    toString() {
      return dart.str(this.runtimeType) + "(" + dart.str(this.name) + ", " + dart.str(this.lensDirection) + ", " + dart.str(this.sensorOrientation) + ")";
    }
  };
  (camera$.CameraDescription.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let lensDirection = opts && 'lensDirection' in opts ? opts.lensDirection : null;
    let sensorOrientation = opts && 'sensorOrientation' in opts ? opts.sensorOrientation : null;
    this[name$] = name;
    this[lensDirection$] = lensDirection;
    this[sensorOrientation$] = sensorOrientation;
    ;
  }).prototype = camera$.CameraDescription.prototype;
  dart.addTypeTests(camera$.CameraDescription);
  dart.addTypeCaches(camera$.CameraDescription);
  dart.setMethodSignature(camera$.CameraDescription, () => ({
    __proto__: dart.getMethods(camera$.CameraDescription.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(camera$.CameraDescription, () => ({
    __proto__: dart.getGetters(camera$.CameraDescription.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(camera$.CameraDescription, I[0]);
  dart.setFieldSignature(camera$.CameraDescription, () => ({
    __proto__: dart.getFields(camera$.CameraDescription.__proto__),
    name: dart.finalFieldType(dart.legacy(core.String)),
    lensDirection: dart.finalFieldType(dart.legacy(camera$.CameraLensDirection)),
    sensorOrientation: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(camera$.CameraDescription, ['_equals', 'toString']);
  dart.defineExtensionAccessors(camera$.CameraDescription, ['hashCode']);
  var code$ = dart.privateName(camera$, "CameraException.code");
  var description$ = dart.privateName(camera$, "CameraException.description");
  camera$.CameraException = class CameraException extends core.Object {
    get code() {
      return this[code$];
    }
    set code(value) {
      this[code$] = value;
    }
    get description() {
      return this[description$];
    }
    set description(value) {
      this[description$] = value;
    }
    toString() {
      return dart.str(this.runtimeType) + "(" + dart.str(this.code) + ", " + dart.str(this.description) + ")";
    }
  };
  (camera$.CameraException.new = function(code, description) {
    this[code$] = code;
    this[description$] = description;
    ;
  }).prototype = camera$.CameraException.prototype;
  dart.addTypeTests(camera$.CameraException);
  dart.addTypeCaches(camera$.CameraException);
  camera$.CameraException[dart.implements] = () => [core.Exception];
  dart.setMethodSignature(camera$.CameraException, () => ({
    __proto__: dart.getMethods(camera$.CameraException.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(camera$.CameraException, I[0]);
  dart.setFieldSignature(camera$.CameraException, () => ({
    __proto__: dart.getFields(camera$.CameraException.__proto__),
    code: dart.fieldType(dart.legacy(core.String)),
    description: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(camera$.CameraException, ['toString']);
  var controller$ = dart.privateName(camera$, "CameraPreview.controller");
  var _textureId = dart.privateName(camera$, "_textureId");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  camera$.CameraPreview = class CameraPreview extends framework.StatelessWidget {
    get controller() {
      return this[controller$];
    }
    set controller(value) {
      super.controller = value;
    }
    build(context) {
      return dart.test(this.controller.value.isInitialized) ? new texture.Texture.new({textureId: this.controller[_textureId], $creationLocationd_0dea112b090073317d4: C[11] || CT.C11}) : new container.Container.new({$creationLocationd_0dea112b090073317d4: C[14] || CT.C14});
    }
  };
  (camera$.CameraPreview.new = function(controller, opts) {
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[controller$] = controller;
    camera$.CameraPreview.__proto__.new.call(this, {$creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = camera$.CameraPreview.prototype;
  dart.addTypeTests(camera$.CameraPreview);
  dart.addTypeCaches(camera$.CameraPreview);
  dart.setMethodSignature(camera$.CameraPreview, () => ({
    __proto__: dart.getMethods(camera$.CameraPreview.__proto__),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)])
  }));
  dart.setLibraryUri(camera$.CameraPreview, I[0]);
  dart.setFieldSignature(camera$.CameraPreview, () => ({
    __proto__: dart.getFields(camera$.CameraPreview.__proto__),
    controller: dart.finalFieldType(dart.legacy(camera$.CameraController))
  }));
  var isInitialized$ = dart.privateName(camera$, "CameraValue.isInitialized");
  var isTakingPicture$ = dart.privateName(camera$, "CameraValue.isTakingPicture");
  var isRecordingVideo$ = dart.privateName(camera$, "CameraValue.isRecordingVideo");
  var isStreamingImages$ = dart.privateName(camera$, "CameraValue.isStreamingImages");
  var _isRecordingPaused = dart.privateName(camera$, "CameraValue._isRecordingPaused");
  var errorDescription$ = dart.privateName(camera$, "CameraValue.errorDescription");
  var previewSize$ = dart.privateName(camera$, "CameraValue.previewSize");
  var _isRecordingPaused$ = dart.privateName(camera$, "_isRecordingPaused");
  camera$.CameraValue = class CameraValue extends core.Object {
    get isInitialized() {
      return this[isInitialized$];
    }
    set isInitialized(value) {
      super.isInitialized = value;
    }
    get isTakingPicture() {
      return this[isTakingPicture$];
    }
    set isTakingPicture(value) {
      super.isTakingPicture = value;
    }
    get isRecordingVideo() {
      return this[isRecordingVideo$];
    }
    set isRecordingVideo(value) {
      super.isRecordingVideo = value;
    }
    get isStreamingImages() {
      return this[isStreamingImages$];
    }
    set isStreamingImages(value) {
      super.isStreamingImages = value;
    }
    get [_isRecordingPaused$]() {
      return this[_isRecordingPaused];
    }
    set [_isRecordingPaused$](value) {
      super[_isRecordingPaused$] = value;
    }
    get errorDescription() {
      return this[errorDescription$];
    }
    set errorDescription(value) {
      super.errorDescription = value;
    }
    get previewSize() {
      return this[previewSize$];
    }
    set previewSize(value) {
      super.previewSize = value;
    }
    get isRecordingPaused() {
      return dart.test(this.isRecordingVideo) && dart.test(this[_isRecordingPaused$]);
    }
    get aspectRatio() {
      return dart.notNull(this.previewSize.height) / dart.notNull(this.previewSize.width);
    }
    get hasError() {
      return this.errorDescription != null;
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3;
      let isInitialized = opts && 'isInitialized' in opts ? opts.isInitialized : null;
      let isRecordingVideo = opts && 'isRecordingVideo' in opts ? opts.isRecordingVideo : null;
      let isTakingPicture = opts && 'isTakingPicture' in opts ? opts.isTakingPicture : null;
      let isStreamingImages = opts && 'isStreamingImages' in opts ? opts.isStreamingImages : null;
      let errorDescription = opts && 'errorDescription' in opts ? opts.errorDescription : null;
      let previewSize = opts && 'previewSize' in opts ? opts.previewSize : null;
      let isRecordingPaused = opts && 'isRecordingPaused' in opts ? opts.isRecordingPaused : null;
      return new camera$.CameraValue.new({isInitialized: (t0 = isInitialized, t0 == null ? this.isInitialized : t0), errorDescription: errorDescription, previewSize: (t0$ = previewSize, t0$ == null ? this.previewSize : t0$), isRecordingVideo: (t0$0 = isRecordingVideo, t0$0 == null ? this.isRecordingVideo : t0$0), isTakingPicture: (t0$1 = isTakingPicture, t0$1 == null ? this.isTakingPicture : t0$1), isStreamingImages: (t0$2 = isStreamingImages, t0$2 == null ? this.isStreamingImages : t0$2), isRecordingPaused: (t0$3 = isRecordingPaused, t0$3 == null ? this[_isRecordingPaused$] : t0$3)});
    }
    toString() {
      return dart.str(this.runtimeType) + "(" + "isRecordingVideo: " + dart.str(this.isRecordingVideo) + ", " + "isRecordingVideo: " + dart.str(this.isRecordingVideo) + ", " + "isInitialized: " + dart.str(this.isInitialized) + ", " + "errorDescription: " + dart.str(this.errorDescription) + ", " + "previewSize: " + dart.str(this.previewSize) + ", " + "isStreamingImages: " + dart.str(this.isStreamingImages) + ")";
    }
  };
  (camera$.CameraValue.new = function(opts) {
    let isInitialized = opts && 'isInitialized' in opts ? opts.isInitialized : null;
    let errorDescription = opts && 'errorDescription' in opts ? opts.errorDescription : null;
    let previewSize = opts && 'previewSize' in opts ? opts.previewSize : null;
    let isRecordingVideo = opts && 'isRecordingVideo' in opts ? opts.isRecordingVideo : null;
    let isTakingPicture = opts && 'isTakingPicture' in opts ? opts.isTakingPicture : null;
    let isStreamingImages = opts && 'isStreamingImages' in opts ? opts.isStreamingImages : null;
    let isRecordingPaused = opts && 'isRecordingPaused' in opts ? opts.isRecordingPaused : null;
    this[isInitialized$] = isInitialized;
    this[errorDescription$] = errorDescription;
    this[previewSize$] = previewSize;
    this[isRecordingVideo$] = isRecordingVideo;
    this[isTakingPicture$] = isTakingPicture;
    this[isStreamingImages$] = isStreamingImages;
    this[_isRecordingPaused] = isRecordingPaused;
    ;
  }).prototype = camera$.CameraValue.prototype;
  (camera$.CameraValue.uninitialized = function() {
    camera$.CameraValue.new.call(this, {isInitialized: false, isRecordingVideo: false, isTakingPicture: false, isStreamingImages: false, isRecordingPaused: false});
  }).prototype = camera$.CameraValue.prototype;
  dart.addTypeTests(camera$.CameraValue);
  dart.addTypeCaches(camera$.CameraValue);
  dart.setMethodSignature(camera$.CameraValue, () => ({
    __proto__: dart.getMethods(camera$.CameraValue.__proto__),
    copyWith: dart.fnType(dart.legacy(camera$.CameraValue), [], {errorDescription: dart.legacy(core.String), isInitialized: dart.legacy(core.bool), isRecordingPaused: dart.legacy(core.bool), isRecordingVideo: dart.legacy(core.bool), isStreamingImages: dart.legacy(core.bool), isTakingPicture: dart.legacy(core.bool), previewSize: dart.legacy(ui.Size)}, {}),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(camera$.CameraValue, () => ({
    __proto__: dart.getGetters(camera$.CameraValue.__proto__),
    isRecordingPaused: dart.legacy(core.bool),
    aspectRatio: dart.legacy(core.double),
    hasError: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(camera$.CameraValue, I[0]);
  dart.setFieldSignature(camera$.CameraValue, () => ({
    __proto__: dart.getFields(camera$.CameraValue.__proto__),
    isInitialized: dart.finalFieldType(dart.legacy(core.bool)),
    isTakingPicture: dart.finalFieldType(dart.legacy(core.bool)),
    isRecordingVideo: dart.finalFieldType(dart.legacy(core.bool)),
    isStreamingImages: dart.finalFieldType(dart.legacy(core.bool)),
    [_isRecordingPaused$]: dart.finalFieldType(dart.legacy(core.bool)),
    errorDescription: dart.finalFieldType(dart.legacy(core.String)),
    previewSize: dart.finalFieldType(dart.legacy(ui.Size))
  }));
  dart.defineExtensionMethods(camera$.CameraValue, ['toString']);
  var description$0 = dart.privateName(camera$, "CameraController.description");
  var resolutionPreset$ = dart.privateName(camera$, "CameraController.resolutionPreset");
  var enableAudio$ = dart.privateName(camera$, "CameraController.enableAudio");
  var _isDisposed = dart.privateName(camera$, "_isDisposed");
  var _eventSubscription = dart.privateName(camera$, "_eventSubscription");
  var _imageStreamSubscription = dart.privateName(camera$, "_imageStreamSubscription");
  var _creatingCompleter = dart.privateName(camera$, "_creatingCompleter");
  var _listener = dart.privateName(camera$, "_listener");
  var EventChannel__binaryMessenger = dart.privateName(platform_channel, "EventChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var EventChannel_codec = dart.privateName(platform_channel, "EventChannel.codec");
  var EventChannel_name = dart.privateName(platform_channel, "EventChannel.name");
  const dispose = Symbol("dispose");
  camera$.CameraController = class CameraController extends change_notifier.ValueNotifier$(dart.legacy(camera$.CameraValue)) {
    get description() {
      return this[description$0];
    }
    set description(value) {
      super.description = value;
    }
    get resolutionPreset() {
      return this[resolutionPreset$];
    }
    set resolutionPreset(value) {
      super.resolutionPreset = value;
    }
    get enableAudio() {
      return this[enableAudio$];
    }
    set enableAudio(value) {
      super.enableAudio = value;
    }
    debugCheckIsDisposed() {
      if (!dart.test(this[_isDisposed])) dart.assertFailed(null, I[1], 314, 12, "_isDisposed");
    }
    initialize() {
      return async.async(dart.void, (function* initialize() {
        if (dart.test(this[_isDisposed])) {
          return T.FutureOfvoid().value();
        }
        try {
          this[_creatingCompleter] = T.CompleterOfvoid().new();
          let reply = (yield camera$._channel.invokeMapMethod(T.StringL(), dart.dynamic, "initialize", new (T.IdentityMapOfStringL$dynamic()).from(["cameraName", this.description.name, "resolutionPreset", camera$.serializeResolutionPreset(this.resolutionPreset), "enableAudio", this.enableAudio])));
          this[_textureId] = T.intL().as(reply[$_get]("textureId"));
          this.value = this.value.copyWith({isInitialized: true, previewSize: new ui.Size.new(core.double.as(dart.dsend(reply[$_get]("previewWidth"), 'toDouble', [])), core.double.as(dart.dsend(reply[$_get]("previewHeight"), 'toDouble', [])))});
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (T.PlatformExceptionL().is(e)) {
            dart.throw(new camera$.CameraException.new(e.code, e.message));
          } else
            throw e$;
        }
        this[_eventSubscription] = new platform_channel.EventChannel.new("flutter.io/cameraPlugin/cameraEvents" + dart.str(this[_textureId])).receiveBroadcastStream().listen(dart.bind(this, _listener));
        this[_creatingCompleter].complete();
        return this[_creatingCompleter].future;
      }).bind(this));
    }
    prepareForVideoRecording() {
      return async.async(dart.void, function* prepareForVideoRecording() {
        yield camera$._channel.invokeMethod(dart.void, "prepareForVideoRecording");
      });
    }
    [_listener](event) {
      let map = T.MapL().as(event);
      if (dart.test(this[_isDisposed])) {
        return;
      }
      switch (map[$_get]("eventType")) {
        case "error":
        {
          this.value = this.value.copyWith({errorDescription: T.StringL().as(dart.dsend(event, '_get', ["errorDescription"]))});
          break;
        }
        case "cameraClosing":
        {
          this.value = this.value.copyWith({isRecordingVideo: false});
          break;
        }
      }
    }
    takePicture(path) {
      return async.async(dart.void, (function* takePicture() {
        if (!dart.test(this.value.isInitialized) || dart.test(this[_isDisposed])) {
          dart.throw(new camera$.CameraException.new("Uninitialized CameraController.", "takePicture was called on uninitialized CameraController"));
        }
        if (dart.test(this.value.isTakingPicture)) {
          dart.throw(new camera$.CameraException.new("Previous capture has not returned yet.", "takePicture was called before the previous capture returned."));
        }
        try {
          this.value = this.value.copyWith({isTakingPicture: true});
          yield camera$._channel.invokeMethod(dart.void, "takePicture", new (T.IdentityMapOfStringL$dynamic()).from(["textureId", this[_textureId], "path", path]));
          this.value = this.value.copyWith({isTakingPicture: false});
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (T.PlatformExceptionL().is(e)) {
            this.value = this.value.copyWith({isTakingPicture: false});
            dart.throw(new camera$.CameraException.new(e.code, e.message));
          } else
            throw e$;
        }
      }).bind(this));
    }
    startImageStream(onAvailable) {
      return async.async(dart.void, (function* startImageStream() {
        if (!dart.test(this.value.isInitialized) || dart.test(this[_isDisposed])) {
          dart.throw(new camera$.CameraException.new("Uninitialized CameraController", "startImageStream was called on uninitialized CameraController."));
        }
        if (dart.test(this.value.isRecordingVideo)) {
          dart.throw(new camera$.CameraException.new("A video recording is already started.", "startImageStream was called while a video is being recorded."));
        }
        if (dart.test(this.value.isStreamingImages)) {
          dart.throw(new camera$.CameraException.new("A camera has started streaming images.", "startImageStream was called while a camera was streaming images."));
        }
        try {
          yield camera$._channel.invokeMethod(dart.void, "startImageStream");
          this.value = this.value.copyWith({isStreamingImages: true});
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (T.PlatformExceptionL().is(e)) {
            dart.throw(new camera$.CameraException.new(e.code, e.message));
          } else
            throw e$;
        }
        let cameraEventChannel = C[17] || CT.C17;
        this[_imageStreamSubscription] = cameraEventChannel.receiveBroadcastStream().listen(dart.fn(imageData => {
          onAvailable(new camera$.CameraImage._fromPlatformData(T.MapL().as(imageData)));
        }, T.dynamicToNull()));
      }).bind(this));
    }
    stopImageStream() {
      return async.async(dart.void, (function* stopImageStream() {
        if (!dart.test(this.value.isInitialized) || dart.test(this[_isDisposed])) {
          dart.throw(new camera$.CameraException.new("Uninitialized CameraController", "stopImageStream was called on uninitialized CameraController."));
        }
        if (dart.test(this.value.isRecordingVideo)) {
          dart.throw(new camera$.CameraException.new("A video recording is already started.", "stopImageStream was called while a video is being recorded."));
        }
        if (!dart.test(this.value.isStreamingImages)) {
          dart.throw(new camera$.CameraException.new("No camera is streaming images", "stopImageStream was called when no camera is streaming images."));
        }
        try {
          this.value = this.value.copyWith({isStreamingImages: false});
          yield camera$._channel.invokeMethod(dart.void, "stopImageStream");
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (T.PlatformExceptionL().is(e)) {
            dart.throw(new camera$.CameraException.new(e.code, e.message));
          } else
            throw e$;
        }
        yield this[_imageStreamSubscription].cancel();
        this[_imageStreamSubscription] = null;
      }).bind(this));
    }
    startVideoRecording(filePath) {
      return async.async(dart.void, (function* startVideoRecording() {
        if (!dart.test(this.value.isInitialized) || dart.test(this[_isDisposed])) {
          dart.throw(new camera$.CameraException.new("Uninitialized CameraController", "startVideoRecording was called on uninitialized CameraController"));
        }
        if (dart.test(this.value.isRecordingVideo)) {
          dart.throw(new camera$.CameraException.new("A video recording is already started.", "startVideoRecording was called when a recording is already started."));
        }
        if (dart.test(this.value.isStreamingImages)) {
          dart.throw(new camera$.CameraException.new("A camera has started streaming images.", "startVideoRecording was called while a camera was streaming images."));
        }
        try {
          yield camera$._channel.invokeMethod(dart.void, "startVideoRecording", new (T.IdentityMapOfStringL$dynamic()).from(["textureId", this[_textureId], "filePath", filePath]));
          this.value = this.value.copyWith({isRecordingVideo: true, isRecordingPaused: false});
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (T.PlatformExceptionL().is(e)) {
            dart.throw(new camera$.CameraException.new(e.code, e.message));
          } else
            throw e$;
        }
      }).bind(this));
    }
    stopVideoRecording() {
      return async.async(dart.void, (function* stopVideoRecording() {
        if (!dart.test(this.value.isInitialized) || dart.test(this[_isDisposed])) {
          dart.throw(new camera$.CameraException.new("Uninitialized CameraController", "stopVideoRecording was called on uninitialized CameraController"));
        }
        if (!dart.test(this.value.isRecordingVideo)) {
          dart.throw(new camera$.CameraException.new("No video is recording", "stopVideoRecording was called when no video is recording."));
        }
        try {
          this.value = this.value.copyWith({isRecordingVideo: false});
          yield camera$._channel.invokeMethod(dart.void, "stopVideoRecording", new (T.IdentityMapOfStringL$dynamic()).from(["textureId", this[_textureId]]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (T.PlatformExceptionL().is(e)) {
            dart.throw(new camera$.CameraException.new(e.code, e.message));
          } else
            throw e$;
        }
      }).bind(this));
    }
    pauseVideoRecording() {
      return async.async(dart.void, (function* pauseVideoRecording() {
        if (!dart.test(this.value.isInitialized) || dart.test(this[_isDisposed])) {
          dart.throw(new camera$.CameraException.new("Uninitialized CameraController", "pauseVideoRecording was called on uninitialized CameraController"));
        }
        if (!dart.test(this.value.isRecordingVideo)) {
          dart.throw(new camera$.CameraException.new("No video is recording", "pauseVideoRecording was called when no video is recording."));
        }
        try {
          this.value = this.value.copyWith({isRecordingPaused: true});
          yield camera$._channel.invokeMethod(dart.void, "pauseVideoRecording", new (T.IdentityMapOfStringL$dynamic()).from(["textureId", this[_textureId]]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (T.PlatformExceptionL().is(e)) {
            dart.throw(new camera$.CameraException.new(e.code, e.message));
          } else
            throw e$;
        }
      }).bind(this));
    }
    resumeVideoRecording() {
      return async.async(dart.void, (function* resumeVideoRecording() {
        if (!dart.test(this.value.isInitialized) || dart.test(this[_isDisposed])) {
          dart.throw(new camera$.CameraException.new("Uninitialized CameraController", "resumeVideoRecording was called on uninitialized CameraController"));
        }
        if (!dart.test(this.value.isRecordingVideo)) {
          dart.throw(new camera$.CameraException.new("No video is recording", "resumeVideoRecording was called when no video is recording."));
        }
        try {
          this.value = this.value.copyWith({isRecordingPaused: false});
          yield camera$._channel.invokeMethod(dart.void, "resumeVideoRecording", new (T.IdentityMapOfStringL$dynamic()).from(["textureId", this[_textureId]]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (T.PlatformExceptionL().is(e)) {
            dart.throw(new camera$.CameraException.new(e.code, e.message));
          } else
            throw e$;
        }
      }).bind(this));
    }
    dispose() {
      return async.async(dart.void, (function* dispose$() {
        let t8;
        if (dart.test(this[_isDisposed])) {
          return;
        }
        this[_isDisposed] = true;
        this[dispose]();
        if (this[_creatingCompleter] != null) {
          yield this[_creatingCompleter].future;
          yield camera$._channel.invokeMethod(dart.void, "dispose", new (T.IdentityMapOfStringL$dynamic()).from(["textureId", this[_textureId]]));
          yield (t8 = this[_eventSubscription], t8 == null ? null : t8.cancel());
        }
      }).bind(this));
    }
    [dispose]() {
      return super.dispose();
    }
  };
  (camera$.CameraController.new = function(description, resolutionPreset, opts) {
    let enableAudio = opts && 'enableAudio' in opts ? opts.enableAudio : true;
    this[_textureId] = null;
    this[_isDisposed] = false;
    this[_eventSubscription] = null;
    this[_imageStreamSubscription] = null;
    this[_creatingCompleter] = null;
    this[description$0] = description;
    this[resolutionPreset$] = resolutionPreset;
    this[enableAudio$] = enableAudio;
    camera$.CameraController.__proto__.new.call(this, C[16] || CT.C16);
    ;
  }).prototype = camera$.CameraController.prototype;
  dart.addTypeTests(camera$.CameraController);
  dart.addTypeCaches(camera$.CameraController);
  dart.setMethodSignature(camera$.CameraController, () => ({
    __proto__: dart.getMethods(camera$.CameraController.__proto__),
    debugCheckIsDisposed: dart.fnType(dart.void, []),
    initialize: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    prepareForVideoRecording: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    [_listener]: dart.fnType(dart.void, [dart.dynamic]),
    takePicture: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.String)]),
    startImageStream: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(camera$.CameraImage)]))]),
    stopImageStream: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    startVideoRecording: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.String)]),
    stopVideoRecording: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    pauseVideoRecording: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    resumeVideoRecording: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    dispose: dart.fnType(dart.legacy(async.Future$(dart.void)), [])
  }));
  dart.setLibraryUri(camera$.CameraController, I[0]);
  dart.setFieldSignature(camera$.CameraController, () => ({
    __proto__: dart.getFields(camera$.CameraController.__proto__),
    description: dart.finalFieldType(dart.legacy(camera$.CameraDescription)),
    resolutionPreset: dart.finalFieldType(dart.legacy(camera$.ResolutionPreset)),
    enableAudio: dart.finalFieldType(dart.legacy(core.bool)),
    [_textureId]: dart.fieldType(dart.legacy(core.int)),
    [_isDisposed]: dart.fieldType(dart.legacy(core.bool)),
    [_eventSubscription]: dart.fieldType(dart.legacy(async.StreamSubscription)),
    [_imageStreamSubscription]: dart.fieldType(dart.legacy(async.StreamSubscription)),
    [_creatingCompleter]: dart.fieldType(dart.legacy(async.Completer$(dart.void)))
  }));
  var bytes = dart.privateName(camera$, "Plane.bytes");
  var bytesPerPixel = dart.privateName(camera$, "Plane.bytesPerPixel");
  var bytesPerRow = dart.privateName(camera$, "Plane.bytesPerRow");
  var height = dart.privateName(camera$, "Plane.height");
  var width = dart.privateName(camera$, "Plane.width");
  camera$.Plane = class Plane extends core.Object {
    get bytes() {
      return this[bytes];
    }
    set bytes(value) {
      super.bytes = value;
    }
    get bytesPerPixel() {
      return this[bytesPerPixel];
    }
    set bytesPerPixel(value) {
      super.bytesPerPixel = value;
    }
    get bytesPerRow() {
      return this[bytesPerRow];
    }
    set bytesPerRow(value) {
      super.bytesPerRow = value;
    }
    get height() {
      return this[height];
    }
    set height(value) {
      super.height = value;
    }
    get width() {
      return this[width];
    }
    set width(value) {
      super.width = value;
    }
  };
  (camera$.Plane._fromPlatformData = function(data) {
    this[bytes] = T.Uint8ListL().as(data[$_get]("bytes"));
    this[bytesPerPixel] = T.intL().as(data[$_get]("bytesPerPixel"));
    this[bytesPerRow] = T.intL().as(data[$_get]("bytesPerRow"));
    this[height] = T.intL().as(data[$_get]("height"));
    this[width] = T.intL().as(data[$_get]("width"));
    ;
  }).prototype = camera$.Plane.prototype;
  dart.addTypeTests(camera$.Plane);
  dart.addTypeCaches(camera$.Plane);
  dart.setLibraryUri(camera$.Plane, I[0]);
  dart.setFieldSignature(camera$.Plane, () => ({
    __proto__: dart.getFields(camera$.Plane.__proto__),
    bytes: dart.finalFieldType(dart.legacy(typed_data.Uint8List)),
    bytesPerPixel: dart.finalFieldType(dart.legacy(core.int)),
    bytesPerRow: dart.finalFieldType(dart.legacy(core.int)),
    height: dart.finalFieldType(dart.legacy(core.int)),
    width: dart.finalFieldType(dart.legacy(core.int))
  }));
  camera$.ImageFormatGroup = class ImageFormatGroup extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (camera$.ImageFormatGroup.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = camera$.ImageFormatGroup.prototype;
  dart.addTypeTests(camera$.ImageFormatGroup);
  dart.addTypeCaches(camera$.ImageFormatGroup);
  dart.setMethodSignature(camera$.ImageFormatGroup, () => ({
    __proto__: dart.getMethods(camera$.ImageFormatGroup.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(camera$.ImageFormatGroup, I[0]);
  dart.setFieldSignature(camera$.ImageFormatGroup, () => ({
    __proto__: dart.getFields(camera$.ImageFormatGroup.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(camera$.ImageFormatGroup, ['toString']);
  camera$.ImageFormatGroup.unknown = C[20] || CT.C20;
  camera$.ImageFormatGroup.yuv420 = C[21] || CT.C21;
  camera$.ImageFormatGroup.bgra8888 = C[22] || CT.C22;
  camera$.ImageFormatGroup.values = C[23] || CT.C23;
  var group = dart.privateName(camera$, "ImageFormat.group");
  var raw$ = dart.privateName(camera$, "ImageFormat.raw");
  camera$.ImageFormat = class ImageFormat extends core.Object {
    get group() {
      return this[group];
    }
    set group(value) {
      super.group = value;
    }
    get raw() {
      return this[raw$];
    }
    set raw(value) {
      super.raw = value;
    }
  };
  (camera$.ImageFormat._fromPlatformData = function(raw) {
    this[raw$] = raw;
    this[group] = camera$._asImageFormatGroup(raw);
    ;
  }).prototype = camera$.ImageFormat.prototype;
  dart.addTypeTests(camera$.ImageFormat);
  dart.addTypeCaches(camera$.ImageFormat);
  dart.setLibraryUri(camera$.ImageFormat, I[0]);
  dart.setFieldSignature(camera$.ImageFormat, () => ({
    __proto__: dart.getFields(camera$.ImageFormat.__proto__),
    group: dart.finalFieldType(dart.legacy(camera$.ImageFormatGroup)),
    raw: dart.finalFieldType(dart.dynamic)
  }));
  var format = dart.privateName(camera$, "CameraImage.format");
  var height$ = dart.privateName(camera$, "CameraImage.height");
  var width$ = dart.privateName(camera$, "CameraImage.width");
  var planes = dart.privateName(camera$, "CameraImage.planes");
  camera$.CameraImage = class CameraImage extends core.Object {
    get format() {
      return this[format];
    }
    set format(value) {
      super.format = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    get planes() {
      return this[planes];
    }
    set planes(value) {
      super.planes = value;
    }
  };
  (camera$.CameraImage._fromPlatformData = function(data) {
    this[format] = new camera$.ImageFormat._fromPlatformData(data[$_get]("format"));
    this[height$] = T.intL().as(data[$_get]("height"));
    this[width$] = T.intL().as(data[$_get]("width"));
    this[planes] = T.ListOfPlaneL().unmodifiable(core.Iterable.as(dart.dsend(data[$_get]("planes"), 'map', [dart.fn(planeData => new camera$.Plane._fromPlatformData(T.MapL().as(planeData)), T.dynamicToPlaneL())])));
    ;
  }).prototype = camera$.CameraImage.prototype;
  dart.addTypeTests(camera$.CameraImage);
  dart.addTypeCaches(camera$.CameraImage);
  dart.setLibraryUri(camera$.CameraImage, I[0]);
  dart.setFieldSignature(camera$.CameraImage, () => ({
    __proto__: dart.getFields(camera$.CameraImage.__proto__),
    format: dart.finalFieldType(dart.legacy(camera$.ImageFormat)),
    height: dart.finalFieldType(dart.legacy(core.int)),
    width: dart.finalFieldType(dart.legacy(core.int)),
    planes: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(camera$.Plane))))
  }));
  camera$.serializeResolutionPreset = function serializeResolutionPreset(resolutionPreset) {
    switch (resolutionPreset) {
      case C[9] || CT.C9:
      {
        return "max";
      }
      case C[8] || CT.C8:
      {
        return "ultraHigh";
      }
      case C[7] || CT.C7:
      {
        return "veryHigh";
      }
      case C[6] || CT.C6:
      {
        return "high";
      }
      case C[5] || CT.C5:
      {
        return "medium";
      }
      case C[4] || CT.C4:
      {
        return "low";
      }
    }
    dart.throw(new core.ArgumentError.new("Unknown ResolutionPreset value"));
  };
  camera$._parseCameraLensDirection = function _parseCameraLensDirection(string) {
    switch (string) {
      case "front":
      {
        return camera$.CameraLensDirection.front;
      }
      case "back":
      {
        return camera$.CameraLensDirection.back;
      }
      case "external":
      {
        return camera$.CameraLensDirection.external;
      }
    }
    dart.throw(new core.ArgumentError.new("Unknown CameraLensDirection value"));
  };
  camera$.availableCameras = function availableCameras() {
    return async.async(T.ListLOfCameraDescriptionL(), function* availableCameras() {
      try {
        let cameras = (yield camera$._channel.invokeListMethod(T.MapL(), "availableCameras"));
        return cameras[$map](T.CameraDescriptionL(), dart.fn(camera => new camera$.CameraDescription.new({name: T.StringL().as(camera[$_get]("name")), lensDirection: camera$._parseCameraLensDirection(T.StringL().as(camera[$_get]("lensFacing"))), sensorOrientation: T.intL().as(camera[$_get]("sensorOrientation"))}), T.MapLToCameraDescriptionL()))[$toList]();
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (T.PlatformExceptionL().is(e)) {
          dart.throw(new camera$.CameraException.new(e.code, e.message));
        } else
          throw e$;
      }
    });
  };
  camera$._asImageFormatGroup = function _asImageFormatGroup(rawFormat) {
    if (platform.defaultTargetPlatform == platform.TargetPlatform.android) {
      if (dart.equals(rawFormat, 35)) {
        return camera$.ImageFormatGroup.yuv420;
      }
    }
    if (platform.defaultTargetPlatform == platform.TargetPlatform.iOS) {
      switch (rawFormat) {
        case 875704438:
        {
          return camera$.ImageFormatGroup.yuv420;
        }
        case 1111970369:
        {
          return camera$.ImageFormatGroup.bgra8888;
        }
      }
    }
    return camera$.ImageFormatGroup.unknown;
  };
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  dart.defineLazy(camera$, {
    /*camera$._channel*/get _channel() {
      return C[24] || CT.C24;
    }
  }, true);
  dart.trackLibraries("packages/camera/camera.dart", {
    "package:camera/camera.dart": camera$
  }, {
    "package:camera/camera.dart": ["camera_image.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["camera.dart","camera_image.dart"],"names":[],"mappings":"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","file":"../../../../../../../../D:/packages/camera/camera.dart.lib.js"}');
  // Exports:
  return {
    camera: camera$
  };
}));

//# sourceMappingURL=camera.dart.lib.js.map
