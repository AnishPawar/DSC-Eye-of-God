define(['dart_sdk', 'packages/validate/expect.dart', 'packages/intl/src/intl/number_parser.dart', 'packages/logging/src/logger.dart', 'packages/latlong/spline.dart'], (function load__packages__latlong__latlong_dart(dart_sdk, packages__validate__expect$46dart, packages__intl__src__intl__number_parser$46dart, packages__logging__src__logger$46dart, packages__latlong__spline$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const math = dart_sdk.math;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const validate = packages__validate__expect$46dart.validate;
  const number_format = packages__intl__src__intl__number_parser$46dart.src__intl__number_format;
  const logger = packages__logging__src__logger$46dart.src__logger;
  const spline = packages__latlong__spline$46dart.spline;
  var latlong = Object.create(dart.library);
  var $toDouble = dartx.toDouble;
  var $isNaN = dartx.isNaN;
  var $abs = dartx.abs;
  var $round = dartx.round;
  var $hashCode = dartx.hashCode;
  var $toString = dartx.toString;
  var $_equals = dartx._equals;
  var $clear = dartx.clear;
  var $add = dartx.add;
  var $addAll = dartx.addAll;
  var $first = dartx.first;
  var $last = dartx.last;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $toInt = dartx.toInt;
  var $modulo = dartx['%'];
  var $insert = dartx.insert;
  var $forEach = dartx.forEach;
  var $elementAt = dartx.elementAt;
  var $split = dartx.split;
  var $floor = dartx.floor;
  var $toStringAsFixed = dartx.toStringAsFixed;
  dart._checkModuleNullSafetyMode(false);
  var T$ = {
    LatLngL: () => (T$.LatLngL = dart.constFn(dart.legacy(latlong.LatLng)))(),
    doubleL: () => (T$.doubleL = dart.constFn(dart.legacy(core.double)))(),
    doubleLAnddoubleLToLatLngL: () => (T$.doubleLAnddoubleLToLatLngL = dart.constFn(dart.fnType(T$.LatLngL(), [T$.doubleL(), T$.doubleL()])))(),
    PathOfLatLngL: () => (T$.PathOfLatLngL = dart.constFn(latlong.Path$(T$.LatLngL())))(),
    JSArrayOfLatLngL: () => (T$.JSArrayOfLatLngL = dart.constFn(_interceptors.JSArray$(T$.LatLngL())))(),
    CatmullRomSpline2DOfdoubleL: () => (T$.CatmullRomSpline2DOfdoubleL = dart.constFn(spline.CatmullRomSpline2D$(T$.doubleL())))(),
    Point2DOfdoubleL: () => (T$.Point2DOfdoubleL = dart.constFn(spline.Point2D$(T$.doubleL())))(),
    intL: () => (T$.intL = dart.constFn(dart.legacy(core.int)))(),
    JSArrayOfintL: () => (T$.JSArrayOfintL = dart.constFn(_interceptors.JSArray$(T$.intL())))(),
    ListOfintL: () => (T$.ListOfintL = dart.constFn(core.List$(T$.intL())))(),
    ListLOfintL: () => (T$.ListLOfintL = dart.constFn(dart.legacy(T$.ListOfintL())))(),
    doubleLToListLOfintL: () => (T$.doubleLToListLOfintL = dart.constFn(dart.fnType(T$.ListLOfintL(), [T$.doubleL()])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: latlong.Vincenty.prototype
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: latlong.Haversine.prototype
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: latlong.LengthUnit.prototype,
        [scaleFactor$]: 1000
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: latlong.LengthUnit.prototype,
        [scaleFactor$]: 100
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: latlong.LengthUnit.prototype,
        [scaleFactor$]: 1
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: latlong.LengthUnit.prototype,
        [scaleFactor$]: 0.001
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: latlong.LengthUnit.prototype,
        [scaleFactor$]: 0.0006213712
      });
    },
    get C7() {
      return C[7] = dart.fn(latlong._defaultLatLngFactory, T$.doubleLAnddoubleLToLatLngL());
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: latlong.Distance.prototype,
        [_calculator]: C[0] || CT.C0,
        [_roundResult]: true,
        [_radius]: 6378137
      });
    }
  }, false);
  var C = Array(9).fill(void 0);
  var I = ["package:latlong/latlong.dart"];
  latlong.DistanceCalculator = class DistanceCalculator extends core.Object {};
  (latlong.DistanceCalculator.new = function() {
    ;
  }).prototype = latlong.DistanceCalculator.prototype;
  dart.addTypeTests(latlong.DistanceCalculator);
  dart.addTypeCaches(latlong.DistanceCalculator);
  dart.setLibraryUri(latlong.DistanceCalculator, I[0]);
  latlong.Haversine = class Haversine extends core.Object {
    distance(p1, p2) {
      let sinDLat = math.sin((dart.notNull(p2.latitudeInRad) - dart.notNull(p1.latitudeInRad)) / 2);
      let sinDLng = math.sin((dart.notNull(p2.longitudeInRad) - dart.notNull(p1.longitudeInRad)) / 2);
      let a = sinDLat * sinDLat + sinDLng * sinDLng * math.cos(p1.latitudeInRad) * math.cos(p2.latitudeInRad);
      let c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a));
      return 6378137 * c;
    }
    offset(from, distanceInMeter, bearing) {
      validate.Validate.inclusiveBetween(-180.0, 180.0, bearing, "Angle must be between -180 and 180 degrees but was " + dart.str(bearing));
      let h = latlong.degToRadian(bearing[$toDouble]());
      let a = dart.notNull(distanceInMeter) / 6378137;
      let lat2 = math.asin(math.sin(from.latitudeInRad) * math.cos(a) + math.cos(from.latitudeInRad) * math.sin(a) * math.cos(h));
      let lng2 = dart.notNull(from.longitudeInRad) + math.atan2(math.sin(h) * math.sin(a) * math.cos(from.latitudeInRad), math.cos(a) - math.sin(from.latitudeInRad) * math.sin(lat2));
      return new latlong.LatLng.new(latlong.radianToDeg(lat2), latlong.radianToDeg(lng2));
    }
  };
  (latlong.Haversine.new = function() {
    ;
  }).prototype = latlong.Haversine.prototype;
  dart.addTypeTests(latlong.Haversine);
  dart.addTypeCaches(latlong.Haversine);
  latlong.Haversine[dart.implements] = () => [latlong.DistanceCalculator];
  dart.setMethodSignature(latlong.Haversine, () => ({
    __proto__: dart.getMethods(latlong.Haversine.__proto__),
    distance: dart.fnType(dart.legacy(core.double), [dart.legacy(latlong.LatLng), dart.legacy(latlong.LatLng)]),
    offset: dart.fnType(dart.legacy(latlong.LatLng), [dart.legacy(latlong.LatLng), dart.legacy(core.double), dart.legacy(core.double)])
  }));
  dart.setLibraryUri(latlong.Haversine, I[0]);
  latlong.Vincenty = class Vincenty extends core.Object {
    distance(p1, p2) {
      let a = 6378137;
      let b = 6356752.314245;
      let f = 0.0033528106647474805;
      let L = dart.notNull(p2.longitudeInRad) - dart.notNull(p1.longitudeInRad);
      let U1 = math.atan((1 - f) * math.tan(p1.latitudeInRad));
      let U2 = math.atan((1 - f) * math.tan(p2.latitudeInRad));
      let sinU1 = math.sin(U1);
      let cosU1 = math.cos(U1);
      let sinU2 = math.sin(U2);
      let cosU2 = math.cos(U2);
      let sinLambda = null;
      let cosLambda = null;
      let sinSigma = null;
      let cosSigma = null;
      let sigma = null;
      let sinAlpha = null;
      let cosSqAlpha = null;
      let cos2SigmaM = null;
      let lambda = L;
      let lambdaP = null;
      let maxIterations = 200;
      do {
        sinLambda = math.sin(lambda);
        cosLambda = math.cos(lambda);
        sinSigma = math.sqrt(cosU2 * dart.notNull(sinLambda) * (cosU2 * dart.notNull(sinLambda)) + (cosU1 * sinU2 - sinU1 * cosU2 * dart.notNull(cosLambda)) * (cosU1 * sinU2 - sinU1 * cosU2 * dart.notNull(cosLambda)));
        if (sinSigma === 0) {
          return 0.0;
        }
        cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * dart.notNull(cosLambda);
        sigma = math.atan2(sinSigma, cosSigma);
        sinAlpha = cosU1 * cosU2 * dart.notNull(sinLambda) / dart.notNull(sinSigma);
        cosSqAlpha = 1 - dart.notNull(sinAlpha) * dart.notNull(sinAlpha);
        cos2SigmaM = dart.notNull(cosSigma) - 2 * sinU1 * sinU2 / dart.notNull(cosSqAlpha);
        if (cos2SigmaM[$isNaN]) {
          cos2SigmaM = 0.0;
        }
        let C = f / 16 * dart.notNull(cosSqAlpha) * (4 + f * (4 - 3 * dart.notNull(cosSqAlpha)));
        lambdaP = lambda;
        lambda = L + (1 - C) * f * dart.notNull(sinAlpha) * (dart.notNull(sigma) + C * dart.notNull(sinSigma) * (dart.notNull(cos2SigmaM) + C * dart.notNull(cosSigma) * (-1 + 2 * dart.notNull(cos2SigmaM) * dart.notNull(cos2SigmaM))));
      } while ((lambda - dart.notNull(lambdaP))[$abs]() > 1e-12 && (maxIterations = maxIterations - 1) > 0);
      if (maxIterations === 0) {
        dart.throw(new core.StateError.new("Distance calculation faild to converge!"));
      }
      let uSq = dart.notNull(cosSqAlpha) * (a * a - b * b) / (b * b);
      let A = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));
      let B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));
      let deltaSigma = B * dart.notNull(sinSigma) * (dart.notNull(cos2SigmaM) + B / 4 * (dart.notNull(cosSigma) * (-1 + 2 * dart.notNull(cos2SigmaM) * dart.notNull(cos2SigmaM)) - B / 6 * dart.notNull(cos2SigmaM) * (-3 + 4 * dart.notNull(sinSigma) * dart.notNull(sinSigma)) * (-3 + 4 * dart.notNull(cos2SigmaM) * dart.notNull(cos2SigmaM))));
      let dist = b * A * (dart.notNull(sigma) - deltaSigma);
      return dist;
    }
    offset(from, distanceInMeter, bearing) {
      let equatorialRadius = 6378137;
      let polarRadius = 6356752.314245;
      let flattening = 0.0033528106647474805;
      let latitude = from.latitudeInRad;
      let longitude = from.longitudeInRad;
      let alpha1 = latlong.degToRadian(bearing);
      let sinAlpha1 = math.sin(alpha1);
      let cosAlpha1 = math.cos(alpha1);
      let tanU1 = (1 - flattening) * math.tan(latitude);
      let cosU1 = 1 / math.sqrt(1 + tanU1 * tanU1);
      let sinU1 = tanU1 * cosU1;
      let sigma1 = math.atan2(tanU1, cosAlpha1);
      let sinAlpha = cosU1 * sinAlpha1;
      let cosSqAlpha = 1 - sinAlpha * sinAlpha;
      let dfUSq = cosSqAlpha * (equatorialRadius * equatorialRadius - polarRadius * polarRadius) / (polarRadius * polarRadius);
      let a = 1 + dfUSq / 16384 * (4096 + dfUSq * (-768 + dfUSq * (320 - 175 * dfUSq)));
      let b = dfUSq / 1024 * (256 + dfUSq * (-128 + dfUSq * (74 - 47 * dfUSq)));
      let sigma = dart.notNull(distanceInMeter) / (polarRadius * a);
      let sigmaP = 2 * 3.141592653589793;
      let sinSigma = 0.0;
      let cosSigma = 0.0;
      let cos2SigmaM = 0.0;
      let deltaSigma = null;
      let maxIterations = 200;
      do {
        cos2SigmaM = math.cos(2 * sigma1 + sigma);
        sinSigma = math.sin(sigma);
        cosSigma = math.cos(sigma);
        deltaSigma = b * sinSigma * (cos2SigmaM + b / 4 * (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - b / 6 * cos2SigmaM * (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
        sigmaP = sigma;
        sigma = dart.notNull(distanceInMeter) / (polarRadius * a) + dart.notNull(deltaSigma);
      } while ((sigma - sigmaP)[$abs]() > 1e-12 && (maxIterations = maxIterations - 1) > 0);
      if (maxIterations === 0) {
        dart.throw(new core.StateError.new("offset calculation faild to converge!"));
      }
      let tmp = sinU1 * sinSigma - cosU1 * cosSigma * cosAlpha1;
      let lat2 = math.atan2(sinU1 * cosSigma + cosU1 * sinSigma * cosAlpha1, (1 - flattening) * math.sqrt(sinAlpha * sinAlpha + tmp * tmp));
      let lambda = math.atan2(sinSigma * sinAlpha1, cosU1 * cosSigma - sinU1 * sinSigma * cosAlpha1);
      let c = flattening / 16 * cosSqAlpha * (4 + flattening * (4 - 3 * cosSqAlpha));
      let l = lambda - (1 - c) * flattening * sinAlpha * (sigma + c * sinSigma * (cos2SigmaM + c * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));
      let lon2 = dart.notNull(longitude) + l;
      if (lon2 > 3.141592653589793) {
        lon2 = lon2 - 2 * 3.141592653589793;
      }
      if (lon2 < -1 * 3.141592653589793) {
        lon2 = lon2 + 2 * 3.141592653589793;
      }
      return new latlong.LatLng.new(latlong.radianToDeg(lat2), latlong.radianToDeg(lon2));
    }
  };
  (latlong.Vincenty.new = function() {
    ;
  }).prototype = latlong.Vincenty.prototype;
  dart.addTypeTests(latlong.Vincenty);
  dart.addTypeCaches(latlong.Vincenty);
  latlong.Vincenty[dart.implements] = () => [latlong.DistanceCalculator];
  dart.setMethodSignature(latlong.Vincenty, () => ({
    __proto__: dart.getMethods(latlong.Vincenty.__proto__),
    distance: dart.fnType(dart.legacy(core.double), [dart.legacy(latlong.LatLng), dart.legacy(latlong.LatLng)]),
    offset: dart.fnType(dart.legacy(latlong.LatLng), [dart.legacy(latlong.LatLng), dart.legacy(core.double), dart.legacy(core.double)])
  }));
  dart.setLibraryUri(latlong.Vincenty, I[0]);
  var _radius = dart.privateName(latlong, "Distance._radius");
  var _roundResult = dart.privateName(latlong, "Distance._roundResult");
  var _calculator = dart.privateName(latlong, "Distance._calculator");
  var _radius$ = dart.privateName(latlong, "_radius");
  var _roundResult$ = dart.privateName(latlong, "_roundResult");
  var _calculator$ = dart.privateName(latlong, "_calculator");
  var _round = dart.privateName(latlong, "_round");
  latlong.Distance = class Distance extends core.Object {
    get [_radius$]() {
      return this[_radius];
    }
    set [_radius$](value) {
      super[_radius$] = value;
    }
    get [_roundResult$]() {
      return this[_roundResult];
    }
    set [_roundResult$](value) {
      super[_roundResult$] = value;
    }
    get [_calculator$]() {
      return this[_calculator];
    }
    set [_calculator$](value) {
      super[_calculator$] = value;
    }
    get radius() {
      return this[_radius$];
    }
    get calculator() {
      return this[_calculator$];
    }
    call(p1, p2) {
      return this.distance(p1, p2);
    }
    as(unit, p1, p2) {
      let dist = this[_calculator$].distance(p1, p2);
      return this[_round](latlong.LengthUnit.Meter.to(unit, dist));
    }
    distance(p1, p2) {
      return this[_round](this[_calculator$].distance(p1, p2));
    }
    bearing(p1, p2) {
      let diffLongitude = dart.notNull(p2.longitudeInRad) - dart.notNull(p1.longitudeInRad);
      let y = math.sin(diffLongitude);
      let x = math.cos(p1.latitudeInRad) * math.tan(p2.latitudeInRad) - math.sin(p1.latitudeInRad) * math.cos(diffLongitude);
      return latlong.radianToDeg(math.atan2(y, x));
    }
    offset(from, distanceInMeter, bearing) {
      return this[_calculator$].offset(from, distanceInMeter[$toDouble](), bearing[$toDouble]());
    }
    [_round](value) {
      return dart.dtest(this[_roundResult$]) ? value[$round]()[$toDouble]() : value;
    }
  };
  (latlong.Distance.new = function(opts) {
    let roundResult = opts && 'roundResult' in opts ? opts.roundResult : true;
    let calculator = opts && 'calculator' in opts ? opts.calculator : C[0] || CT.C0;
    this[_radius] = 6378137;
    this[_roundResult] = roundResult;
    this[_calculator] = calculator;
    ;
  }).prototype = latlong.Distance.prototype;
  (latlong.Distance.withRadius = function(radius, opts) {
    let roundResult = opts && 'roundResult' in opts ? opts.roundResult : true;
    let calculator = opts && 'calculator' in opts ? opts.calculator : C[0] || CT.C0;
    this[_radius] = radius;
    this[_roundResult] = roundResult;
    this[_calculator] = calculator;
    validate.Validate.isTrue(dart.notNull(radius) > 0, "Radius must be greater than 0 but was " + dart.str(radius));
  }).prototype = latlong.Distance.prototype;
  dart.addTypeTests(latlong.Distance);
  dart.addTypeCaches(latlong.Distance);
  latlong.Distance[dart.implements] = () => [latlong.DistanceCalculator];
  dart.setMethodSignature(latlong.Distance, () => ({
    __proto__: dart.getMethods(latlong.Distance.__proto__),
    call: dart.fnType(dart.legacy(core.num), [dart.legacy(latlong.LatLng), dart.legacy(latlong.LatLng)]),
    as: dart.fnType(dart.legacy(core.num), [dart.legacy(latlong.LengthUnit), dart.legacy(latlong.LatLng), dart.legacy(latlong.LatLng)]),
    distance: dart.fnType(dart.legacy(core.num), [dart.legacy(latlong.LatLng), dart.legacy(latlong.LatLng)]),
    bearing: dart.fnType(dart.legacy(core.double), [dart.legacy(latlong.LatLng), dart.legacy(latlong.LatLng)]),
    offset: dart.fnType(dart.legacy(latlong.LatLng), [dart.legacy(latlong.LatLng), dart.legacy(core.num), dart.legacy(core.num)]),
    [_round]: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)])
  }));
  dart.setGetterSignature(latlong.Distance, () => ({
    __proto__: dart.getGetters(latlong.Distance.__proto__),
    radius: dart.legacy(core.double),
    calculator: dart.legacy(latlong.DistanceCalculator)
  }));
  dart.setLibraryUri(latlong.Distance, I[0]);
  dart.setFieldSignature(latlong.Distance, () => ({
    __proto__: dart.getFields(latlong.Distance.__proto__),
    [_radius$]: dart.finalFieldType(dart.legacy(core.double)),
    [_roundResult$]: dart.finalFieldType(dart.dynamic),
    [_calculator$]: dart.finalFieldType(dart.legacy(latlong.DistanceCalculator))
  }));
  latlong.DistanceVincenty = class DistanceVincenty extends latlong.Distance {};
  (latlong.DistanceVincenty.new = function(opts) {
    let roundResult = opts && 'roundResult' in opts ? opts.roundResult : true;
    latlong.DistanceVincenty.__proto__.new.call(this, {roundResult: roundResult, calculator: C[0] || CT.C0});
    ;
  }).prototype = latlong.DistanceVincenty.prototype;
  (latlong.DistanceVincenty.withRadius = function(radius, opts) {
    let roundResult = opts && 'roundResult' in opts ? opts.roundResult : true;
    latlong.DistanceVincenty.__proto__.withRadius.call(this, radius, {roundResult: roundResult, calculator: C[0] || CT.C0});
    validate.Validate.isTrue(dart.notNull(radius) > 0, "Radius must be greater than 0 but was " + dart.str(radius));
  }).prototype = latlong.DistanceVincenty.prototype;
  dart.addTypeTests(latlong.DistanceVincenty);
  dart.addTypeCaches(latlong.DistanceVincenty);
  dart.setLibraryUri(latlong.DistanceVincenty, I[0]);
  latlong.DistanceHaversine = class DistanceHaversine extends latlong.Distance {};
  (latlong.DistanceHaversine.new = function(opts) {
    let roundResult = opts && 'roundResult' in opts ? opts.roundResult : true;
    latlong.DistanceHaversine.__proto__.new.call(this, {roundResult: roundResult, calculator: C[1] || CT.C1});
    ;
  }).prototype = latlong.DistanceHaversine.prototype;
  (latlong.DistanceHaversine.withRadius = function(radius, opts) {
    let roundResult = opts && 'roundResult' in opts ? opts.roundResult : true;
    latlong.DistanceHaversine.__proto__.withRadius.call(this, radius, {roundResult: roundResult, calculator: C[1] || CT.C1});
    validate.Validate.isTrue(dart.notNull(radius) > 0, "Radius must be greater than 0 but was " + dart.str(radius));
  }).prototype = latlong.DistanceHaversine.prototype;
  dart.addTypeTests(latlong.DistanceHaversine);
  dart.addTypeCaches(latlong.DistanceHaversine);
  dart.setLibraryUri(latlong.DistanceHaversine, I[0]);
  var _latitude$ = dart.privateName(latlong, "_latitude");
  var _longitude$ = dart.privateName(latlong, "_longitude");
  latlong.LatLng = class LatLng extends core.Object {
    set latitude(value) {
      validate.Validate.inclusiveBetween(-90.0, 90.0, this[_latitude$], "Latitude must be between -90 and 90 degrees but was " + dart.str(this[_latitude$]));
      this[_latitude$] = value;
    }
    get latitude() {
      return this[_latitude$];
    }
    set longitude(value) {
      validate.Validate.inclusiveBetween(-180.0, 180.0, this[_longitude$], "Longitude must be between -90 and 90 degrees but was " + dart.str(this[_longitude$]));
      this[_longitude$] = value;
    }
    get longitude() {
      return this[_longitude$];
    }
    get latitudeInRad() {
      return latlong.degToRadian(this.latitude);
    }
    get longitudeInRad() {
      return latlong.degToRadian(this[_longitude$]);
    }
    toString() {
      return "LatLng(latitude:" + dart.str(number_format.NumberFormat.new("0.0#####").format(this.latitude)) + ", " + "longitude:" + dart.str(number_format.NumberFormat.new("0.0#####").format(this.longitude)) + ")";
    }
    toSexagesimal() {
      let latDirection = dart.notNull(this.latitude) >= 0 ? "N" : "S";
      let lonDirection = dart.notNull(this.longitude) >= 0 ? "O" : "W";
      return dart.str(latlong.decimal2sexagesimal(this.latitude)) + " " + latDirection + ", " + dart.str(latlong.decimal2sexagesimal(this.longitude)) + " " + lonDirection;
    }
    get hashCode() {
      return dart.hashCode(this.latitude) + dart.hashCode(this.longitude);
    }
    _equals(other) {
      if (other == null) return false;
      return T$.LatLngL().is(other) && this.latitude == other.latitude && this.longitude == other.longitude;
    }
    round(opts) {
      let decimals = opts && 'decimals' in opts ? opts.decimals : 6;
      return new latlong.LatLng.new(this[_round](this.latitude, {decimals: decimals}), this[_round](this.longitude, {decimals: decimals}));
    }
    [_round](value, opts) {
      let decimals = opts && 'decimals' in opts ? opts.decimals : 6;
      return (dart.notNull(value) * math.pow(10, decimals))[$round]() / math.pow(10, decimals);
    }
  };
  (latlong.LatLng.new = function(_latitude, _longitude) {
    this[_latitude$] = _latitude;
    this[_longitude$] = _longitude;
    validate.Validate.inclusiveBetween(-90.0, 90.0, this[_latitude$], "Latitude must be between -90 and 90 degrees but was " + dart.str(this[_latitude$]));
    validate.Validate.inclusiveBetween(-180.0, 180.0, this[_longitude$], "Longitude must be between -90 and 90 degrees but was " + dart.str(this[_longitude$]));
  }).prototype = latlong.LatLng.prototype;
  dart.addTypeTests(latlong.LatLng);
  dart.addTypeCaches(latlong.LatLng);
  dart.setMethodSignature(latlong.LatLng, () => ({
    __proto__: dart.getMethods(latlong.LatLng.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    toSexagesimal: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    round: dart.fnType(dart.legacy(latlong.LatLng), [], {decimals: dart.legacy(core.int)}, {}),
    [_round]: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)], {decimals: dart.legacy(core.int)}, {})
  }));
  dart.setGetterSignature(latlong.LatLng, () => ({
    __proto__: dart.getGetters(latlong.LatLng.__proto__),
    latitude: dart.legacy(core.double),
    longitude: dart.legacy(core.double),
    latitudeInRad: dart.legacy(core.double),
    longitudeInRad: dart.legacy(core.double),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setSetterSignature(latlong.LatLng, () => ({
    __proto__: dart.getSetters(latlong.LatLng.__proto__),
    latitude: dart.legacy(core.double),
    longitude: dart.legacy(core.double)
  }));
  dart.setLibraryUri(latlong.LatLng, I[0]);
  dart.setFieldSignature(latlong.LatLng, () => ({
    __proto__: dart.getFields(latlong.LatLng.__proto__),
    [_latitude$]: dart.fieldType(dart.legacy(core.double)),
    [_longitude$]: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(latlong.LatLng, ['toString', '_equals']);
  dart.defineExtensionAccessors(latlong.LatLng, ['hashCode']);
  var scaleFactor$ = dart.privateName(latlong, "LengthUnit.scaleFactor");
  latlong.LengthUnit = class LengthUnit extends core.Object {
    get scaleFactor() {
      return this[scaleFactor$];
    }
    set scaleFactor(value) {
      super.scaleFactor = value;
    }
    to(unit, value) {
      if (unit.scaleFactor == this.scaleFactor) {
        return value;
      }
      let primaryValue = dart.notNull(value) / dart.notNull(this.scaleFactor);
      return primaryValue * dart.notNull(unit.scaleFactor);
    }
  };
  (latlong.LengthUnit.new = function(scaleFactor) {
    this[scaleFactor$] = scaleFactor;
    ;
  }).prototype = latlong.LengthUnit.prototype;
  dart.addTypeTests(latlong.LengthUnit);
  dart.addTypeCaches(latlong.LengthUnit);
  dart.setMethodSignature(latlong.LengthUnit, () => ({
    __proto__: dart.getMethods(latlong.LengthUnit.__proto__),
    to: dart.fnType(dart.legacy(core.double), [dart.legacy(latlong.LengthUnit), dart.legacy(core.num)])
  }));
  dart.setLibraryUri(latlong.LengthUnit, I[0]);
  dart.setFieldSignature(latlong.LengthUnit, () => ({
    __proto__: dart.getFields(latlong.LengthUnit.__proto__),
    scaleFactor: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(latlong.LengthUnit, {
    /*latlong.LengthUnit.Millimeter*/get Millimeter() {
      return C[2] || CT.C2;
    },
    /*latlong.LengthUnit.Centimeter*/get Centimeter() {
      return C[3] || CT.C3;
    },
    /*latlong.LengthUnit.Meter*/get Meter() {
      return C[4] || CT.C4;
    },
    /*latlong.LengthUnit.Kilometer*/get Kilometer() {
      return C[5] || CT.C5;
    },
    /*latlong.LengthUnit.Mile*/get Mile() {
      return C[6] || CT.C6;
    }
  }, true);
  var _logger = dart.privateName(latlong, "_logger");
  var _distance = dart.privateName(latlong, "_distance");
  var _coordinates = dart.privateName(latlong, "_coordinates");
  var _latLngFactory = dart.privateName(latlong, "_latLngFactory");
  var _createSpline = dart.privateName(latlong, "_createSpline");
  var _pointToLatLng = dart.privateName(latlong, "_pointToLatLng");
  const _is_Path_default = Symbol('_is_Path_default');
  latlong.Path$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var JSArrayOfTL = () => (JSArrayOfTL = dart.constFn(_interceptors.JSArray$(TL())))();
    var ListOfTL = () => (ListOfTL = dart.constFn(core.List$(TL())))();
    var IterableOfTL = () => (IterableOfTL = dart.constFn(core.Iterable$(TL())))();
    var IterableLOfTL = () => (IterableLOfTL = dart.constFn(dart.legacy(IterableOfTL())))();
    var ListLOfTL = () => (ListLOfTL = dart.constFn(dart.legacy(ListOfTL())))();
    var TLToNull = () => (TLToNull = dart.constFn(dart.fnType(core.Null, [TL()])))();
    class Path extends core.Object {
      get coordinates() {
        return this[_coordinates];
      }
      clear() {
        return this[_coordinates][$clear]();
      }
      add(value) {
        TL().as(value);
        validate.Validate.notNull(TL(), value);
        return this[_coordinates][$add](value);
      }
      addAll(values) {
        ListLOfTL().as(values);
        validate.Validate.notNull(ListLOfTL(), values);
        return this[_coordinates][$addAll](values);
      }
      get first() {
        return this[_coordinates][$first];
      }
      get last() {
        return this[_coordinates][$last];
      }
      equalize(distanceInMeterPerTime, opts) {
        let t1, t0, t1$, t0$, t1$0, t0$0, t1$1, t0$1;
        let smoothPath = opts && 'smoothPath' in opts ? opts.smoothPath : true;
        validate.Validate.isTrue(dart.notNull(distanceInMeterPerTime) > 0, "Distance must be greater than 0");
        validate.Validate.isTrue(dart.test(smoothPath) && dart.notNull(this[_coordinates][$length]) >= 3 || !dart.test(smoothPath) && dart.notNull(this[_coordinates][$length]) >= 2, "At least " + dart.str(dart.test(smoothPath) ? 3 : 2) + " coordinates are needed to create the steps in between");
        let stepDistance = dart.test(smoothPath) ? dart.notNull(distanceInMeterPerTime) * 2.0 : distanceInMeterPerTime[$toDouble]();
        let baseLength = this.distance;
        validate.Validate.isTrue(dart.notNull(baseLength) >= stepDistance, "Path distance must be at least " + dart.str(stepDistance) + "mn (step distance) but was " + dart.str(baseLength));
        if (stepDistance > dart.notNull(baseLength) / 2) {
          this[_logger].warning("Equalizing the path (L: " + dart.str(baseLength) + ") with a key-frame distance of " + dart.str(stepDistance) + " leads to" + "weired results. Turn of path smooting.");
        }
        if (baseLength === stepDistance) {
          return new (T$.PathOfLatLngL()).from(T$.JSArrayOfLatLngL().of([this[_coordinates][$first], this[_coordinates][$last]]));
        }
        let tempCoordinates = ListOfTL().from(this[_coordinates]);
        let path = new (T$.PathOfLatLngL()).new();
        let remainingSteps = 0.0;
        let bearing = null;
        path.add(tempCoordinates[$first]);
        let baseStep = tempCoordinates[$first];
        for (let index = 0; index < dart.notNull(this.coordinates[$length]) - 1; index = index + 1) {
          let distance = (t0 = tempCoordinates[$_get](index), t1 = tempCoordinates[$_get](index + 1), this[_distance].call(t0, t1));
          bearing = this[_distance].bearing(tempCoordinates[$_get](index), tempCoordinates[$_get](index + 1));
          if (remainingSteps <= dart.notNull(distance) || stepDistance - remainingSteps <= dart.notNull(distance)) {
            let firstStepPos = stepDistance - remainingSteps;
            let steps = (dart.notNull(distance) - firstStepPos) / stepDistance + 1;
            let fullSteps = steps[$toInt]();
            remainingSteps = dart.notNull(latlong.round(fullSteps > 0 ? steps[$modulo](fullSteps) : steps, {decimals: 6})) * stepDistance;
            baseStep = tempCoordinates[$_get](index);
            for (let stepCounter = 0; stepCounter < fullSteps; stepCounter = stepCounter + 1) {
              let tempStep = this[_distance].offset(baseStep, firstStepPos, bearing);
              let nextStep = (t0$ = tempStep.latitude, t1$ = tempStep.longitude, this[_latLngFactory](t0$, t1$));
              path.add(nextStep);
              firstStepPos = firstStepPos + stepDistance;
              if (dart.test(smoothPath)) {
                let spline = null;
                if (path.nrOfCoordinates === 3) {
                  spline = this[_createSpline](path._get(0), path._get(0), path._get(1), path._get(2));
                  path.coordinates[$insert](1, this[_pointToLatLng](spline.percentage(50)));
                } else if (dart.notNull(path.nrOfCoordinates) > 3) {
                  let baseIndex = dart.notNull(path.nrOfCoordinates) - 1;
                  spline = this[_createSpline](path._get(baseIndex - 3), path._get(baseIndex - 2), path._get(baseIndex - 1), path._get(baseIndex));
                  path.coordinates[$insert](baseIndex - 1, this[_pointToLatLng](spline.percentage(50)));
                }
              }
            }
          } else {
            remainingSteps = remainingSteps + dart.notNull(distance);
          }
        }
        if (!dart.equals(baseStep.round(), tempCoordinates[$last].round()) && !dart.equals(baseStep.round(), tempCoordinates[$first].round()) && dart.notNull(latlong.round((t0$0 = baseStep, t1$0 = tempCoordinates[$last], this[_distance].call(t0$0, t1$0)))) > 1) {
          path.add(tempCoordinates[$last]);
        }
        if (dart.test(smoothPath)) {
          let baseIndex = dart.notNull(path.nrOfCoordinates) - 1;
          if (baseIndex > 3) {
            let spline = this[_createSpline](path._get(baseIndex - 3), path._get(baseIndex - 2), path._get(baseIndex - 1), path._get(baseIndex - 0));
            path.coordinates[$insert](baseIndex - 1, this[_pointToLatLng](spline.percentage(50)));
          }
          baseIndex = dart.notNull(path.nrOfCoordinates) - 1;
          if (dart.notNull((t0$1 = path._get(baseIndex - 1), t1$1 = path._get(baseIndex), this[_distance].call(t0$1, t1$1))) >= stepDistance) {
            let spline = this[_createSpline](path._get(baseIndex - 1), path._get(baseIndex - 1), path._get(baseIndex - 0), path._get(baseIndex - 0));
            path.coordinates[$insert](baseIndex, this[_pointToLatLng](spline.percentage(50)));
          }
        }
        return path;
      }
      get distance() {
        let t1, t0;
        let tempCoordinates = ListOfTL().from(this[_coordinates]);
        let length = 0.0;
        for (let index = 0; index < dart.notNull(this.coordinates[$length]) - 1; index = index + 1) {
          length = length + dart.notNull((t0 = tempCoordinates[$_get](index), t1 = tempCoordinates[$_get](index + 1), this[_distance].call(t0, t1)));
        }
        return latlong.round(length);
      }
      get center() {
        let t1, t0;
        validate.Validate.notEmpty(this.coordinates, "Coordinates must not be empty!");
        let X = 0.0;
        let Y = 0.0;
        let Z = 0.0;
        let lat = null;
        let lon = null;
        let hyp = null;
        this.coordinates[$forEach](dart.fn(coordinate => {
          lat = coordinate.latitudeInRad;
          lon = coordinate.longitudeInRad;
          X = X + math.cos(lat) * math.cos(lon);
          Y = Y + math.cos(lat) * math.sin(lon);
          Z = Z + math.sin(lat);
        }, TLToNull()));
        let nrOfCoordinates = this.coordinates[$length];
        X = X / dart.notNull(nrOfCoordinates);
        Y = Y / dart.notNull(nrOfCoordinates);
        Z = Z / dart.notNull(nrOfCoordinates);
        lon = math.atan2(Y, X);
        hyp = math.sqrt(X * X + Y * Y);
        lat = math.atan2(Z, hyp);
        t0 = latlong.round(latlong.radianToDeg(lat));
        t1 = latlong.round(latlong.radianToDeg(lon));
        return this[_latLngFactory](t0, t1);
      }
      get nrOfCoordinates() {
        return this[_coordinates][$length];
      }
      _get(index) {
        return this[_coordinates][$elementAt](index);
      }
      [_createSpline](p0, p1, p2, p3) {
        validate.Validate.notNull(T$.LatLngL(), p0);
        validate.Validate.notNull(T$.LatLngL(), p1);
        validate.Validate.notNull(T$.LatLngL(), p2);
        validate.Validate.notNull(T$.LatLngL(), p3);
        return new (T$.CatmullRomSpline2DOfdoubleL()).new(new (T$.Point2DOfdoubleL()).new(p0.latitude, p0.longitude), new (T$.Point2DOfdoubleL()).new(p1.latitude, p1.longitude), new (T$.Point2DOfdoubleL()).new(p2.latitude, p2.longitude), new (T$.Point2DOfdoubleL()).new(p3.latitude, p3.longitude));
      }
      [_pointToLatLng](point) {
        let t1, t0;
        t0 = point.x;
        t1 = point.y;
        return this[_latLngFactory](t0, t1);
      }
    }
    (Path.new = function(opts) {
      let factory = opts && 'factory' in opts ? opts.factory : C[7] || CT.C7;
      this[_logger] = logger.Logger.new("latlong.Path");
      this[_distance] = C[8] || CT.C8;
      this[_coordinates] = JSArrayOfTL().of([]);
      this[_latLngFactory] = factory;
      ;
    }).prototype = Path.prototype;
    (Path.from = function(coordinates, opts) {
      let factory = opts && 'factory' in opts ? opts.factory : C[7] || CT.C7;
      this[_logger] = logger.Logger.new("latlong.Path");
      this[_distance] = C[8] || CT.C8;
      this[_coordinates] = ListOfTL().from(coordinates);
      this[_latLngFactory] = factory;
      validate.Validate.notNull(IterableLOfTL(), coordinates);
    }).prototype = Path.prototype;
    dart.addTypeTests(Path);
    Path.prototype[_is_Path_default] = true;
    dart.addTypeCaches(Path);
    dart.setMethodSignature(Path, () => ({
      __proto__: dart.getMethods(Path.__proto__),
      clear: dart.fnType(dart.void, []),
      add: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      equalize: dart.fnType(dart.legacy(latlong.Path$(dart.legacy(latlong.LatLng))), [dart.legacy(core.num)], {smoothPath: dart.legacy(core.bool)}, {}),
      _get: dart.fnType(dart.legacy(T), [dart.legacy(core.int)]),
      [_createSpline]: dart.fnType(dart.legacy(spline.CatmullRomSpline2D$(dart.legacy(core.double))), [dart.legacy(latlong.LatLng), dart.legacy(latlong.LatLng), dart.legacy(latlong.LatLng), dart.legacy(latlong.LatLng)]),
      [_pointToLatLng]: dart.fnType(dart.legacy(latlong.LatLng), [dart.legacy(spline.Point2D$(dart.legacy(core.num)))])
    }));
    dart.setGetterSignature(Path, () => ({
      __proto__: dart.getGetters(Path.__proto__),
      coordinates: dart.legacy(core.List$(dart.legacy(T))),
      first: dart.legacy(T),
      last: dart.legacy(T),
      distance: dart.legacy(core.num),
      center: dart.legacy(latlong.LatLng),
      nrOfCoordinates: dart.legacy(core.int)
    }));
    dart.setLibraryUri(Path, I[0]);
    dart.setFieldSignature(Path, () => ({
      __proto__: dart.getFields(Path.__proto__),
      [_logger]: dart.finalFieldType(dart.legacy(logger.Logger)),
      [_coordinates]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(T)))),
      [_distance]: dart.finalFieldType(dart.legacy(latlong.Distance)),
      [_latLngFactory]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(latlong.LatLng), [dart.legacy(core.double), dart.legacy(core.double)])))
    }));
    return Path;
  });
  latlong.Path = latlong.Path$();
  dart.addTypeTests(latlong.Path, _is_Path_default);
  var radius$ = dart.privateName(latlong, "Circle.radius");
  var center$ = dart.privateName(latlong, "Circle.center");
  latlong.Circle = class Circle extends core.Object {
    get radius() {
      return this[radius$];
    }
    set radius(value) {
      super.radius = value;
    }
    get center() {
      return this[center$];
    }
    set center(value) {
      super.center = value;
    }
    isPointInside(point) {
      validate.Validate.notNull(T$.LatLngL(), point);
      let distance = new latlong.Distance.new({calculator: this[_calculator$]});
      let dist = distance.call(this.center, point);
      return dart.notNull(dist) <= dart.notNull(this.radius);
    }
  };
  (latlong.Circle.new = function(center, radius, opts) {
    let calculator = opts && 'calculator' in opts ? opts.calculator : C[0] || CT.C0;
    this[center$] = center;
    this[radius$] = radius;
    this[_calculator$] = calculator;
    ;
  }).prototype = latlong.Circle.prototype;
  dart.addTypeTests(latlong.Circle);
  dart.addTypeCaches(latlong.Circle);
  dart.setMethodSignature(latlong.Circle, () => ({
    __proto__: dart.getMethods(latlong.Circle.__proto__),
    isPointInside: dart.fnType(dart.legacy(core.bool), [dart.legacy(latlong.LatLng)])
  }));
  dart.setLibraryUri(latlong.Circle, I[0]);
  dart.setFieldSignature(latlong.Circle, () => ({
    __proto__: dart.getFields(latlong.Circle.__proto__),
    radius: dart.finalFieldType(dart.legacy(core.double)),
    center: dart.finalFieldType(dart.legacy(latlong.LatLng)),
    [_calculator$]: dart.finalFieldType(dart.legacy(latlong.DistanceCalculator))
  }));
  latlong.degToRadian = function degToRadian(deg) {
    return dart.notNull(deg) * (3.141592653589793 / 180.0);
  };
  latlong.radianToDeg = function radianToDeg(rad) {
    return dart.notNull(rad) * (180.0 / 3.141592653589793);
  };
  latlong.round = function round(value, opts) {
    let decimals = opts && 'decimals' in opts ? opts.decimals : 6;
    return (dart.notNull(value) * math.pow(10, decimals))[$round]() / math.pow(10, decimals);
  };
  latlong.normalizeBearing = function normalizeBearing(bearing) {
    return (dart.notNull(bearing) + 360)[$modulo](360);
  };
  latlong.decimal2sexagesimal = function decimal2sexagesimal(dec) {
    function _split(value) {
      let tmp = number_format.NumberFormat.new("0.0#####").format(latlong.round(value, {decimals: 10}))[$split](".");
      return T$.JSArrayOfintL().of([core.int.parse(tmp[$_get](0))[$abs](), core.int.parse(tmp[$_get](1))]);
    }
    dart.fn(_split, T$.doubleLToListLOfintL());
    let parts = _split(dec);
    let integerPart = parts[$_get](0);
    let fractionalPart = parts[$_get](1);
    let deg = integerPart;
    let min = dart.notNull(core.double.parse("0." + dart.str(fractionalPart))) * 60;
    let minParts = _split(min);
    let minFractionalPart = minParts[$_get](1);
    let sec = dart.notNull(core.double.parse("0." + dart.str(minFractionalPart))) * 60;
    return dart.str(deg) + "° " + dart.str(min[$floor]()) + "' " + latlong.round(sec, {decimals: 2})[$toStringAsFixed](2) + "\"";
  };
  latlong._defaultLatLngFactory = function _defaultLatLngFactory(latitude, longitude) {
    return new latlong.LatLng.new(latitude, longitude);
  };
  dart.defineLazy(latlong, {
    /*latlong.EQUATOR_RADIUS*/get EQUATOR_RADIUS() {
      return 6378137;
    },
    /*latlong.POLAR_RADIUS*/get POLAR_RADIUS() {
      return 6356752.314245;
    },
    /*latlong.FLATTENING*/get FLATTENING() {
      return 0.0033528106647474805;
    },
    /*latlong.EARTH_RADIUS*/get EARTH_RADIUS() {
      return 6378137;
    },
    /*latlong.PI*/get PI() {
      return 3.141592653589793;
    }
  }, true);
  dart.trackLibraries("packages/latlong/latlong.dart", {
    "package:latlong/latlong.dart": latlong
  }, {
    "package:latlong/latlong.dart": ["latlong/interfaces.dart", "latlong/calculator/Haversine.dart", "latlong/calculator/Vincenty.dart", "latlong/Distance.dart", "latlong/LatLng.dart", "latlong/LengthUnit.dart", "latlong/Path.dart", "latlong/Circle.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["latlong/interfaces.dart","latlong/calculator/Haversine.dart","latlong/calculator/Vincenty.dart","latlong/Distance.dart","latlong/LatLng.dart","latlong/LengthUnit.dart","latlong/Path.dart","latlong/Circle.dart","latlong.dart"],"names":[],"mappings":"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","file":"../../../../../../../../D:/packages/latlong/latlong.dart.lib.js"}');
  // Exports:
  return {
    latlong: latlong
  };
}));

//# sourceMappingURL=latlong.dart.lib.js.map
