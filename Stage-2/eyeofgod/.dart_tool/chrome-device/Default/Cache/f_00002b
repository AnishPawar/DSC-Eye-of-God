define(['dart_sdk', 'packages/google_maps_flutter_platform_interface/src/types/location.dart', 'packages/google_maps_flutter_platform_interface/src/types/tile.dart', 'packages/flutter/src/foundation/object.dart', 'packages/google_maps_flutter_platform_interface/src/types/joint_type.dart', 'packages/google_maps_flutter_platform_interface/src/types/pattern_item.dart', 'packages/flutter/src/foundation/collections.dart', 'packages/collection/src/equality.dart', 'packages/google_maps_flutter_platform_interface/src/types/bitmap.dart'], (function load__packages__google_maps_flutter_platform_interface__src__types__ui_dart(dart_sdk, packages__google_maps_flutter_platform_interface__src__types__location$46dart, packages__google_maps_flutter_platform_interface__src__types__tile$46dart, packages__flutter__src__foundation__object$46dart, packages__google_maps_flutter_platform_interface__src__types__joint_type$46dart, packages__google_maps_flutter_platform_interface__src__types__pattern_item$46dart, packages__flutter__src__foundation__collections$46dart, packages__collection__src__equality$46dart, packages__google_maps_flutter_platform_interface__src__types__bitmap$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const location = packages__google_maps_flutter_platform_interface__src__types__location$46dart.src__types__location;
  const tile = packages__google_maps_flutter_platform_interface__src__types__tile$46dart.src__types__tile;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const joint_type = packages__google_maps_flutter_platform_interface__src__types__joint_type$46dart.src__types__joint_type;
  const pattern_item = packages__google_maps_flutter_platform_interface__src__types__pattern_item$46dart.src__types__pattern_item;
  const collections = packages__flutter__src__foundation__collections$46dart.src__foundation__collections;
  const equality = packages__collection__src__equality$46dart.src__equality;
  const bitmap = packages__google_maps_flutter_platform_interface__src__types__bitmap$46dart.src__types__bitmap;
  var ui$ = Object.create(dart.library);
  var tile_provider = Object.create(dart.library);
  var tile_overlay = Object.create(dart.library);
  var polyline = Object.create(dart.library);
  var polyline$ = Object.create(dart.library);
  var polyline_updates = Object.create(dart.library);
  var polygon = Object.create(dart.library);
  var polygon$ = Object.create(dart.library);
  var polygon_updates = Object.create(dart.library);
  var marker = Object.create(dart.library);
  var marker$ = Object.create(dart.library);
  var marker_updates = Object.create(dart.library);
  var circle = Object.create(dart.library);
  var circle$ = Object.create(dart.library);
  var circle_updates = Object.create(dart.library);
  var cap = Object.create(dart.library);
  var camera = Object.create(dart.library);
  var callbacks = Object.create(dart.library);
  var types = Object.create(dart.library);
  var tile_overlay$ = Object.create(dart.library);
  var $toString = dartx.toString;
  var $runtimeType = dartx.runtimeType;
  var $_equals = dartx._equals;
  var $hashCode = dartx.hashCode;
  var $_set = dartx._set;
  var $add = dartx.add;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $keys = dartx.keys;
  var $toSet = dartx.toSet;
  var $_get = dartx._get;
  var $where = dartx.where;
  var $length = dartx.length;
  var $remove = dartx.remove;
  var $isEmpty = dartx.isEmpty;
  var $isNotEmpty = dartx.isNotEmpty;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    MapTypeL: () => (T.MapTypeL = dart.constFn(dart.legacy(ui$.MapType)))(),
    CameraTargetBoundsL: () => (T.CameraTargetBoundsL = dart.constFn(dart.legacy(ui$.CameraTargetBounds)))(),
    MinMaxZoomPreferenceL: () => (T.MinMaxZoomPreferenceL = dart.constFn(dart.legacy(ui$.MinMaxZoomPreference)))(),
    TileOverlayIdL: () => (T.TileOverlayIdL = dart.constFn(dart.legacy(tile_overlay.TileOverlayId)))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    IdentityMapOfStringL$dynamic: () => (T.IdentityMapOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(T.StringL(), dart.dynamic)))(),
    StringLAnddynamicTovoid: () => (T.StringLAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [T.StringL(), dart.dynamic])))(),
    TileOverlayL: () => (T.TileOverlayL = dart.constFn(dart.legacy(tile_overlay.TileOverlay)))(),
    PolylineIdL: () => (T.PolylineIdL = dart.constFn(dart.legacy(polyline.PolylineId)))(),
    LatLngL: () => (T.LatLngL = dart.constFn(dart.legacy(location.LatLng)))(),
    PatternItemL: () => (T.PatternItemL = dart.constFn(dart.legacy(pattern_item.PatternItem)))(),
    ListOfPatternItemL: () => (T.ListOfPatternItemL = dart.constFn(core.List$(T.PatternItemL())))(),
    ListOfLatLngL: () => (T.ListOfLatLngL = dart.constFn(core.List$(T.LatLngL())))(),
    PolylineL: () => (T.PolylineL = dart.constFn(dart.legacy(polyline.Polyline)))(),
    LinkedMapOfPolylineIdL$PolylineL: () => (T.LinkedMapOfPolylineIdL$PolylineL = dart.constFn(_js_helper.LinkedMap$(T.PolylineIdL(), T.PolylineL())))(),
    MapOfPolylineIdL$PolylineL: () => (T.MapOfPolylineIdL$PolylineL = dart.constFn(core.Map$(T.PolylineIdL(), T.PolylineL())))(),
    MapEntryOfPolylineIdL$PolylineL: () => (T.MapEntryOfPolylineIdL$PolylineL = dart.constFn(core.MapEntry$(T.PolylineIdL(), T.PolylineL())))(),
    MapEntryLOfPolylineIdL$PolylineL: () => (T.MapEntryLOfPolylineIdL$PolylineL = dart.constFn(dart.legacy(T.MapEntryOfPolylineIdL$PolylineL())))(),
    PolylineLToMapEntryLOfPolylineIdL$PolylineL: () => (T.PolylineLToMapEntryLOfPolylineIdL$PolylineL = dart.constFn(dart.fnType(T.MapEntryLOfPolylineIdL$PolylineL(), [T.PolylineL()])))(),
    MapOfStringL$dynamic: () => (T.MapOfStringL$dynamic = dart.constFn(core.Map$(T.StringL(), dart.dynamic)))(),
    MapLOfStringL$dynamic: () => (T.MapLOfStringL$dynamic = dart.constFn(dart.legacy(T.MapOfStringL$dynamic())))(),
    PolylineLToMapLOfStringL$dynamic: () => (T.PolylineLToMapLOfStringL$dynamic = dart.constFn(dart.fnType(T.MapLOfStringL$dynamic(), [T.PolylineL()])))(),
    _IdentityHashSetOfPolylineL: () => (T._IdentityHashSetOfPolylineL = dart.constFn(collection._IdentityHashSet$(T.PolylineL())))(),
    PolylineIdLToPolylineL: () => (T.PolylineIdLToPolylineL = dart.constFn(dart.fnType(T.PolylineL(), [T.PolylineIdL()])))(),
    boolL: () => (T.boolL = dart.constFn(dart.legacy(core.bool)))(),
    PolylineLToboolL: () => (T.PolylineLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.PolylineL()])))(),
    PolylineIdLToStringL: () => (T.PolylineIdLToStringL = dart.constFn(dart.fnType(T.StringL(), [T.PolylineIdL()])))(),
    PolylineUpdatesL: () => (T.PolylineUpdatesL = dart.constFn(dart.legacy(polyline_updates.PolylineUpdates)))(),
    PolygonIdL: () => (T.PolygonIdL = dart.constFn(dart.legacy(polygon.PolygonId)))(),
    ListLOfLatLngL: () => (T.ListLOfLatLngL = dart.constFn(dart.legacy(T.ListOfLatLngL())))(),
    PolygonL: () => (T.PolygonL = dart.constFn(dart.legacy(polygon.Polygon)))(),
    ListL: () => (T.ListL = dart.constFn(dart.legacy(core.List)))(),
    JSArrayOfListL: () => (T.JSArrayOfListL = dart.constFn(_interceptors.JSArray$(T.ListL())))(),
    LinkedMapOfPolygonIdL$PolygonL: () => (T.LinkedMapOfPolygonIdL$PolygonL = dart.constFn(_js_helper.LinkedMap$(T.PolygonIdL(), T.PolygonL())))(),
    MapOfPolygonIdL$PolygonL: () => (T.MapOfPolygonIdL$PolygonL = dart.constFn(core.Map$(T.PolygonIdL(), T.PolygonL())))(),
    MapEntryOfPolygonIdL$PolygonL: () => (T.MapEntryOfPolygonIdL$PolygonL = dart.constFn(core.MapEntry$(T.PolygonIdL(), T.PolygonL())))(),
    MapEntryLOfPolygonIdL$PolygonL: () => (T.MapEntryLOfPolygonIdL$PolygonL = dart.constFn(dart.legacy(T.MapEntryOfPolygonIdL$PolygonL())))(),
    PolygonLToMapEntryLOfPolygonIdL$PolygonL: () => (T.PolygonLToMapEntryLOfPolygonIdL$PolygonL = dart.constFn(dart.fnType(T.MapEntryLOfPolygonIdL$PolygonL(), [T.PolygonL()])))(),
    PolygonLToMapLOfStringL$dynamic: () => (T.PolygonLToMapLOfStringL$dynamic = dart.constFn(dart.fnType(T.MapLOfStringL$dynamic(), [T.PolygonL()])))(),
    _IdentityHashSetOfPolygonL: () => (T._IdentityHashSetOfPolygonL = dart.constFn(collection._IdentityHashSet$(T.PolygonL())))(),
    PolygonIdLToPolygonL: () => (T.PolygonIdLToPolygonL = dart.constFn(dart.fnType(T.PolygonL(), [T.PolygonIdL()])))(),
    PolygonLToboolL: () => (T.PolygonLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.PolygonL()])))(),
    PolygonIdLToStringL: () => (T.PolygonIdLToStringL = dart.constFn(dart.fnType(T.StringL(), [T.PolygonIdL()])))(),
    PolygonUpdatesL: () => (T.PolygonUpdatesL = dart.constFn(dart.legacy(polygon_updates.PolygonUpdates)))(),
    InfoWindowL: () => (T.InfoWindowL = dart.constFn(dart.legacy(marker.InfoWindow)))(),
    MarkerIdL: () => (T.MarkerIdL = dart.constFn(dart.legacy(marker.MarkerId)))(),
    MarkerL: () => (T.MarkerL = dart.constFn(dart.legacy(marker.Marker)))(),
    LinkedMapOfMarkerIdL$MarkerL: () => (T.LinkedMapOfMarkerIdL$MarkerL = dart.constFn(_js_helper.LinkedMap$(T.MarkerIdL(), T.MarkerL())))(),
    MapOfMarkerIdL$MarkerL: () => (T.MapOfMarkerIdL$MarkerL = dart.constFn(core.Map$(T.MarkerIdL(), T.MarkerL())))(),
    MapEntryOfMarkerIdL$MarkerL: () => (T.MapEntryOfMarkerIdL$MarkerL = dart.constFn(core.MapEntry$(T.MarkerIdL(), T.MarkerL())))(),
    MapEntryLOfMarkerIdL$MarkerL: () => (T.MapEntryLOfMarkerIdL$MarkerL = dart.constFn(dart.legacy(T.MapEntryOfMarkerIdL$MarkerL())))(),
    MarkerLToMapEntryLOfMarkerIdL$MarkerL: () => (T.MarkerLToMapEntryLOfMarkerIdL$MarkerL = dart.constFn(dart.fnType(T.MapEntryLOfMarkerIdL$MarkerL(), [T.MarkerL()])))(),
    MarkerLToMapLOfStringL$dynamic: () => (T.MarkerLToMapLOfStringL$dynamic = dart.constFn(dart.fnType(T.MapLOfStringL$dynamic(), [T.MarkerL()])))(),
    _IdentityHashSetOfMarkerL: () => (T._IdentityHashSetOfMarkerL = dart.constFn(collection._IdentityHashSet$(T.MarkerL())))(),
    MarkerIdLToMarkerL: () => (T.MarkerIdLToMarkerL = dart.constFn(dart.fnType(T.MarkerL(), [T.MarkerIdL()])))(),
    MarkerLToboolL: () => (T.MarkerLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.MarkerL()])))(),
    MarkerIdLToStringL: () => (T.MarkerIdLToStringL = dart.constFn(dart.fnType(T.StringL(), [T.MarkerIdL()])))(),
    MarkerUpdatesL: () => (T.MarkerUpdatesL = dart.constFn(dart.legacy(marker_updates.MarkerUpdates)))(),
    CircleIdL: () => (T.CircleIdL = dart.constFn(dart.legacy(circle.CircleId)))(),
    CircleL: () => (T.CircleL = dart.constFn(dart.legacy(circle.Circle)))(),
    LinkedMapOfCircleIdL$CircleL: () => (T.LinkedMapOfCircleIdL$CircleL = dart.constFn(_js_helper.LinkedMap$(T.CircleIdL(), T.CircleL())))(),
    MapOfCircleIdL$CircleL: () => (T.MapOfCircleIdL$CircleL = dart.constFn(core.Map$(T.CircleIdL(), T.CircleL())))(),
    MapEntryOfCircleIdL$CircleL: () => (T.MapEntryOfCircleIdL$CircleL = dart.constFn(core.MapEntry$(T.CircleIdL(), T.CircleL())))(),
    MapEntryLOfCircleIdL$CircleL: () => (T.MapEntryLOfCircleIdL$CircleL = dart.constFn(dart.legacy(T.MapEntryOfCircleIdL$CircleL())))(),
    CircleLToMapEntryLOfCircleIdL$CircleL: () => (T.CircleLToMapEntryLOfCircleIdL$CircleL = dart.constFn(dart.fnType(T.MapEntryLOfCircleIdL$CircleL(), [T.CircleL()])))(),
    CircleLToMapLOfStringL$dynamic: () => (T.CircleLToMapLOfStringL$dynamic = dart.constFn(dart.fnType(T.MapLOfStringL$dynamic(), [T.CircleL()])))(),
    _IdentityHashSetOfCircleL: () => (T._IdentityHashSetOfCircleL = dart.constFn(collection._IdentityHashSet$(T.CircleL())))(),
    CircleIdLToCircleL: () => (T.CircleIdLToCircleL = dart.constFn(dart.fnType(T.CircleL(), [T.CircleIdL()])))(),
    CircleLToboolL: () => (T.CircleLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.CircleL()])))(),
    CircleIdLToStringL: () => (T.CircleIdLToStringL = dart.constFn(dart.fnType(T.StringL(), [T.CircleIdL()])))(),
    CircleUpdatesL: () => (T.CircleUpdatesL = dart.constFn(dart.legacy(circle_updates.CircleUpdates)))(),
    doubleL: () => (T.doubleL = dart.constFn(dart.legacy(core.double)))(),
    CameraPositionL: () => (T.CameraPositionL = dart.constFn(dart.legacy(camera.CameraPosition)))(),
    JSArrayOfdoubleL: () => (T.JSArrayOfdoubleL = dart.constFn(_interceptors.JSArray$(T.doubleL())))(),
    LinkedMapOfTileOverlayIdL$TileOverlayL: () => (T.LinkedMapOfTileOverlayIdL$TileOverlayL = dart.constFn(_js_helper.LinkedMap$(T.TileOverlayIdL(), T.TileOverlayL())))(),
    MapOfTileOverlayIdL$TileOverlayL: () => (T.MapOfTileOverlayIdL$TileOverlayL = dart.constFn(core.Map$(T.TileOverlayIdL(), T.TileOverlayL())))(),
    MapEntryOfTileOverlayIdL$TileOverlayL: () => (T.MapEntryOfTileOverlayIdL$TileOverlayL = dart.constFn(core.MapEntry$(T.TileOverlayIdL(), T.TileOverlayL())))(),
    MapEntryLOfTileOverlayIdL$TileOverlayL: () => (T.MapEntryLOfTileOverlayIdL$TileOverlayL = dart.constFn(dart.legacy(T.MapEntryOfTileOverlayIdL$TileOverlayL())))(),
    TileOverlayLToMapEntryLOfTileOverlayIdL$TileOverlayL: () => (T.TileOverlayLToMapEntryLOfTileOverlayIdL$TileOverlayL = dart.constFn(dart.fnType(T.MapEntryLOfTileOverlayIdL$TileOverlayL(), [T.TileOverlayL()])))(),
    TileOverlayLToMapLOfStringL$dynamic: () => (T.TileOverlayLToMapLOfStringL$dynamic = dart.constFn(dart.fnType(T.MapLOfStringL$dynamic(), [T.TileOverlayL()])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: ui$.MapType.prototype,
        [_name$]: "MapType.none",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: ui$.MapType.prototype,
        [_name$]: "MapType.normal",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: ui$.MapType.prototype,
        [_name$]: "MapType.satellite",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: ui$.MapType.prototype,
        [_name$]: "MapType.terrain",
        index: 3
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: ui$.MapType.prototype,
        [_name$]: "MapType.hybrid",
        index: 4
      });
    },
    get C5() {
      return C[5] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4], T.MapTypeL());
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: ui$.CameraTargetBounds.prototype,
        [bounds$]: null
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: ui$.MinMaxZoomPreference.prototype,
        [maxZoom$]: null,
        [minZoom$]: null
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: tile.Tile.prototype,
        [Tile_data]: null,
        [Tile_height]: -1,
        [Tile_width]: -1
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080.0
      });
    },
    get C11() {
      return C[11] = dart.constList(["buttCap"], dart.dynamic);
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: cap.Cap.prototype,
        [Cap__json]: C[11] || CT.C11
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: joint_type.JointType.prototype,
        [JointType_value]: 0
      });
    },
    get C13() {
      return C[13] = dart.constList([], T.LatLngL());
    },
    get C14() {
      return C[14] = dart.constList([], T.PatternItemL());
    },
    get C15() {
      return C[15] = dart.constList([], T.ListLOfLatLngL());
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0.5
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: marker.InfoWindow.prototype,
        [onTap$1]: null,
        [anchor$]: C[16] || CT.C16,
        [snippet$]: null,
        [title$]: null
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 1,
        [OffsetBase__dx]: 0.5
      });
    },
    get C20() {
      return C[20] = dart.constList(["defaultMarker"], dart.dynamic);
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: bitmap.BitmapDescriptor.prototype,
        [BitmapDescriptor__json]: C[20] || CT.C20
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: location.LatLng.prototype,
        [LatLng_longitude]: 0,
        [LatLng_latitude]: 0
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 0
      });
    },
    get C24() {
      return C[24] = dart.constList(["roundCap"], dart.dynamic);
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: cap.Cap.prototype,
        [Cap__json]: C[24] || CT.C24
      });
    },
    get C26() {
      return C[26] = dart.constList(["squareCap"], dart.dynamic);
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: cap.Cap.prototype,
        [Cap__json]: C[26] || CT.C26
      });
    }
  }, false);
  var C = Array(27).fill(void 0);
  var I = [
    "package:google_maps_flutter_platform_interface/src/types/ui.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-1.2.0/lib/src/types/ui.dart",
    "package:google_maps_flutter_platform_interface/src/types/tile_provider.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-1.2.0/lib/src/types/tile_overlay.dart",
    "package:google_maps_flutter_platform_interface/src/types/tile_overlay.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-1.2.0/lib/src/types/polyline.dart",
    "package:google_maps_flutter_platform_interface/src/types/polyline.dart",
    "package:google_maps_flutter_platform_interface/src/types/polyline_updates.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-1.2.0/lib/src/types/polygon.dart",
    "package:google_maps_flutter_platform_interface/src/types/polygon.dart",
    "package:google_maps_flutter_platform_interface/src/types/polygon_updates.dart",
    "package:google_maps_flutter_platform_interface/src/types/marker.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-1.2.0/lib/src/types/marker.dart",
    "package:google_maps_flutter_platform_interface/src/types/marker_updates.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-1.2.0/lib/src/types/circle.dart",
    "package:google_maps_flutter_platform_interface/src/types/circle.dart",
    "package:google_maps_flutter_platform_interface/src/types/circle_updates.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-1.2.0/lib/src/types/cap.dart",
    "package:google_maps_flutter_platform_interface/src/types/cap.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-1.2.0/lib/src/types/camera.dart",
    "package:google_maps_flutter_platform_interface/src/types/camera.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-1.2.0/lib/src/types/callbacks.dart",
    "package:google_maps_flutter_platform_interface/src/types/callbacks.dart"
  ];
  var _name$ = dart.privateName(ui$, "_name");
  ui$.MapType = class MapType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui$.MapType.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui$.MapType.prototype;
  dart.addTypeTests(ui$.MapType);
  dart.addTypeCaches(ui$.MapType);
  dart.setMethodSignature(ui$.MapType, () => ({
    __proto__: dart.getMethods(ui$.MapType.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(ui$.MapType, I[0]);
  dart.setFieldSignature(ui$.MapType, () => ({
    __proto__: dart.getFields(ui$.MapType.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(ui$.MapType, ['toString']);
  ui$.MapType.none = C[0] || CT.C0;
  ui$.MapType.normal = C[1] || CT.C1;
  ui$.MapType.satellite = C[2] || CT.C2;
  ui$.MapType.terrain = C[3] || CT.C3;
  ui$.MapType.hybrid = C[4] || CT.C4;
  ui$.MapType.values = C[5] || CT.C5;
  var bounds$ = dart.privateName(ui$, "CameraTargetBounds.bounds");
  ui$.CameraTargetBounds = class CameraTargetBounds extends core.Object {
    get bounds() {
      return this[bounds$];
    }
    set bounds(value) {
      super.bounds = value;
    }
    toJson() {
      let t0;
      return [(t0 = this.bounds, t0 == null ? null : t0.toJson())];
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(this.runtimeType, dart.runtimeType(other))) return false;
      let typedOther = T.CameraTargetBoundsL().as(other);
      return dart.equals(this.bounds, typedOther.bounds);
    }
    get hashCode() {
      return dart.hashCode(this.bounds);
    }
    toString() {
      return "CameraTargetBounds(bounds: " + dart.str(this.bounds) + ")";
    }
  };
  (ui$.CameraTargetBounds.new = function(bounds) {
    this[bounds$] = bounds;
    ;
  }).prototype = ui$.CameraTargetBounds.prototype;
  dart.addTypeTests(ui$.CameraTargetBounds);
  dart.addTypeCaches(ui$.CameraTargetBounds);
  dart.setMethodSignature(ui$.CameraTargetBounds, () => ({
    __proto__: dart.getMethods(ui$.CameraTargetBounds.__proto__),
    toJson: dart.fnType(dart.dynamic, []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(ui$.CameraTargetBounds, () => ({
    __proto__: dart.getGetters(ui$.CameraTargetBounds.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(ui$.CameraTargetBounds, I[0]);
  dart.setFieldSignature(ui$.CameraTargetBounds, () => ({
    __proto__: dart.getFields(ui$.CameraTargetBounds.__proto__),
    bounds: dart.finalFieldType(dart.legacy(location.LatLngBounds))
  }));
  dart.defineExtensionMethods(ui$.CameraTargetBounds, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui$.CameraTargetBounds, ['hashCode']);
  dart.defineLazy(ui$.CameraTargetBounds, {
    /*ui$.CameraTargetBounds.unbounded*/get unbounded() {
      return C[6] || CT.C6;
    }
  }, true);
  var minZoom$ = dart.privateName(ui$, "MinMaxZoomPreference.minZoom");
  var maxZoom$ = dart.privateName(ui$, "MinMaxZoomPreference.maxZoom");
  ui$.MinMaxZoomPreference = class MinMaxZoomPreference extends core.Object {
    get minZoom() {
      return this[minZoom$];
    }
    set minZoom(value) {
      super.minZoom = value;
    }
    get maxZoom() {
      return this[maxZoom$];
    }
    set maxZoom(value) {
      super.maxZoom = value;
    }
    toJson() {
      return [this.minZoom, this.maxZoom];
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(this.runtimeType, dart.runtimeType(other))) return false;
      let typedOther = T.MinMaxZoomPreferenceL().as(other);
      return this.minZoom == typedOther.minZoom && this.maxZoom == typedOther.maxZoom;
    }
    get hashCode() {
      return ui.hashValues(this.minZoom, this.maxZoom);
    }
    toString() {
      return "MinMaxZoomPreference(minZoom: " + dart.str(this.minZoom) + ", maxZoom: " + dart.str(this.maxZoom) + ")";
    }
  };
  (ui$.MinMaxZoomPreference.new = function(minZoom, maxZoom) {
    this[minZoom$] = minZoom;
    this[maxZoom$] = maxZoom;
    if (!(minZoom == null || maxZoom == null || dart.notNull(minZoom) <= dart.notNull(maxZoom))) dart.assertFailed(null, I[1], 76, 16, "minZoom == null || maxZoom == null || minZoom <= maxZoom");
    ;
  }).prototype = ui$.MinMaxZoomPreference.prototype;
  dart.addTypeTests(ui$.MinMaxZoomPreference);
  dart.addTypeCaches(ui$.MinMaxZoomPreference);
  dart.setMethodSignature(ui$.MinMaxZoomPreference, () => ({
    __proto__: dart.getMethods(ui$.MinMaxZoomPreference.__proto__),
    toJson: dart.fnType(dart.dynamic, []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(ui$.MinMaxZoomPreference, () => ({
    __proto__: dart.getGetters(ui$.MinMaxZoomPreference.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(ui$.MinMaxZoomPreference, I[0]);
  dart.setFieldSignature(ui$.MinMaxZoomPreference, () => ({
    __proto__: dart.getFields(ui$.MinMaxZoomPreference.__proto__),
    minZoom: dart.finalFieldType(dart.legacy(core.double)),
    maxZoom: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(ui$.MinMaxZoomPreference, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui$.MinMaxZoomPreference, ['hashCode']);
  dart.defineLazy(ui$.MinMaxZoomPreference, {
    /*ui$.MinMaxZoomPreference.unbounded*/get unbounded() {
      return C[7] || CT.C7;
    }
  }, true);
  var cause$ = dart.privateName(ui$, "MapStyleException.cause");
  ui$.MapStyleException = class MapStyleException extends core.Object {
    get cause() {
      return this[cause$];
    }
    set cause(value) {
      super.cause = value;
    }
  };
  (ui$.MapStyleException.new = function(cause) {
    this[cause$] = cause;
    ;
  }).prototype = ui$.MapStyleException.prototype;
  dart.addTypeTests(ui$.MapStyleException);
  dart.addTypeCaches(ui$.MapStyleException);
  ui$.MapStyleException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(ui$.MapStyleException, I[0]);
  dart.setFieldSignature(ui$.MapStyleException, () => ({
    __proto__: dart.getFields(ui$.MapStyleException.__proto__),
    cause: dart.finalFieldType(dart.legacy(core.String))
  }));
  var Tile_data = dart.privateName(tile, "Tile.data");
  var Tile_height = dart.privateName(tile, "Tile.height");
  var Tile_width = dart.privateName(tile, "Tile.width");
  tile_provider.TileProvider = class TileProvider extends core.Object {};
  (tile_provider.TileProvider.new = function() {
    ;
  }).prototype = tile_provider.TileProvider.prototype;
  dart.addTypeTests(tile_provider.TileProvider);
  dart.addTypeCaches(tile_provider.TileProvider);
  dart.setLibraryUri(tile_provider.TileProvider, I[2]);
  dart.defineLazy(tile_provider.TileProvider, {
    /*tile_provider.TileProvider.noTile*/get noTile() {
      return C[8] || CT.C8;
    }
  }, true);
  var value$ = dart.privateName(tile_overlay, "TileOverlayId.value");
  tile_overlay.TileOverlayId = class TileOverlayId extends core.Object {
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      return T.TileOverlayIdL().is(other) && other.value == this.value;
    }
    get hashCode() {
      return dart.hashCode(this.value);
    }
    toString() {
      return dart.str(object.objectRuntimeType(this, "TileOverlayId")) + "(" + dart.str(this.value) + ")";
    }
  };
  (tile_overlay.TileOverlayId.new = function(value) {
    this[value$] = value;
    if (!(value != null)) dart.assertFailed(null, I[3], 15, 38, "value != null");
    ;
  }).prototype = tile_overlay.TileOverlayId.prototype;
  dart.addTypeTests(tile_overlay.TileOverlayId);
  dart.addTypeCaches(tile_overlay.TileOverlayId);
  dart.setMethodSignature(tile_overlay.TileOverlayId, () => ({
    __proto__: dart.getMethods(tile_overlay.TileOverlayId.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(tile_overlay.TileOverlayId, () => ({
    __proto__: dart.getGetters(tile_overlay.TileOverlayId.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(tile_overlay.TileOverlayId, I[4]);
  dart.setFieldSignature(tile_overlay.TileOverlayId, () => ({
    __proto__: dart.getFields(tile_overlay.TileOverlayId.__proto__),
    value: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(tile_overlay.TileOverlayId, ['_equals', 'toString']);
  dart.defineExtensionAccessors(tile_overlay.TileOverlayId, ['hashCode']);
  var tileOverlayId$ = dart.privateName(tile_overlay, "TileOverlay.tileOverlayId");
  var fadeIn$ = dart.privateName(tile_overlay, "TileOverlay.fadeIn");
  var tileProvider$ = dart.privateName(tile_overlay, "TileOverlay.tileProvider");
  var transparency$ = dart.privateName(tile_overlay, "TileOverlay.transparency");
  var zIndex$ = dart.privateName(tile_overlay, "TileOverlay.zIndex");
  var visible$ = dart.privateName(tile_overlay, "TileOverlay.visible");
  var tileSize$ = dart.privateName(tile_overlay, "TileOverlay.tileSize");
  tile_overlay.TileOverlay = class TileOverlay extends core.Object {
    get tileOverlayId() {
      return this[tileOverlayId$];
    }
    set tileOverlayId(value) {
      super.tileOverlayId = value;
    }
    get fadeIn() {
      return this[fadeIn$];
    }
    set fadeIn(value) {
      super.fadeIn = value;
    }
    get tileProvider() {
      return this[tileProvider$];
    }
    set tileProvider(value) {
      super.tileProvider = value;
    }
    get transparency() {
      return this[transparency$];
    }
    set transparency(value) {
      super.transparency = value;
    }
    get zIndex() {
      return this[zIndex$];
    }
    set zIndex(value) {
      super.zIndex = value;
    }
    get visible() {
      return this[visible$];
    }
    set visible(value) {
      super.visible = value;
    }
    get tileSize() {
      return this[tileSize$];
    }
    set tileSize(value) {
      super.tileSize = value;
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2;
      let tileOverlayId = opts && 'tileOverlayId' in opts ? opts.tileOverlayId : null;
      let fadeInParam = opts && 'fadeInParam' in opts ? opts.fadeInParam : null;
      let transparencyParam = opts && 'transparencyParam' in opts ? opts.transparencyParam : null;
      let zIndexParam = opts && 'zIndexParam' in opts ? opts.zIndexParam : null;
      let visibleParam = opts && 'visibleParam' in opts ? opts.visibleParam : null;
      let tileSizeParam = opts && 'tileSizeParam' in opts ? opts.tileSizeParam : null;
      return new tile_overlay.TileOverlay.new({tileOverlayId: tileOverlayId, fadeIn: (t0 = fadeInParam, t0 == null ? this.fadeIn : t0), transparency: (t0$ = transparencyParam, t0$ == null ? this.transparency : t0$), zIndex: (t0$0 = zIndexParam, t0$0 == null ? this.zIndex : t0$0), visible: (t0$1 = visibleParam, t0$1 == null ? this.visible : t0$1), tileSize: (t0$2 = tileSizeParam, t0$2 == null ? this.tileSize : t0$2)});
    }
    toJson() {
      let json = new (T.IdentityMapOfStringL$dynamic()).new();
      function addIfPresent(fieldName, value) {
        if (value != null) {
          json[$_set](fieldName, value);
        }
      }
      dart.fn(addIfPresent, T.StringLAnddynamicTovoid());
      addIfPresent("tileOverlayId", this.tileOverlayId.value);
      addIfPresent("fadeIn", this.fadeIn);
      addIfPresent("transparency", this.transparency);
      addIfPresent("zIndex", this.zIndex);
      addIfPresent("visible", this.visible);
      addIfPresent("tileSize", this.tileSize);
      return json;
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      return T.TileOverlayL().is(other) && dart.equals(this.tileOverlayId, other.tileOverlayId) && this.fadeIn == other.fadeIn && this.transparency == other.transparency && this.zIndex == other.zIndex && this.visible == other.visible && this.tileSize == other.tileSize;
    }
    get hashCode() {
      return ui.hashValues(this.tileOverlayId, this.fadeIn, this.transparency, this.zIndex, this.visible, this.tileSize);
    }
  };
  (tile_overlay.TileOverlay.new = function(opts) {
    let tileOverlayId = opts && 'tileOverlayId' in opts ? opts.tileOverlayId : null;
    let fadeIn = opts && 'fadeIn' in opts ? opts.fadeIn : true;
    let tileProvider = opts && 'tileProvider' in opts ? opts.tileProvider : null;
    let transparency = opts && 'transparency' in opts ? opts.transparency : 0;
    let zIndex = opts && 'zIndex' in opts ? opts.zIndex : null;
    let visible = opts && 'visible' in opts ? opts.visible : true;
    let tileSize = opts && 'tileSize' in opts ? opts.tileSize : 256;
    this[tileOverlayId$] = tileOverlayId;
    this[fadeIn$] = fadeIn;
    this[tileProvider$] = tileProvider;
    this[transparency$] = transparency;
    this[zIndex$] = zIndex;
    this[visible$] = visible;
    this[tileSize$] = tileSize;
    if (!(dart.notNull(transparency) >= 0.0 && dart.notNull(transparency) <= 1.0)) dart.assertFailed(null, I[3], 74, 15, "transparency >= 0.0 && transparency <= 1.0");
    ;
  }).prototype = tile_overlay.TileOverlay.prototype;
  dart.addTypeTests(tile_overlay.TileOverlay);
  dart.addTypeCaches(tile_overlay.TileOverlay);
  dart.setMethodSignature(tile_overlay.TileOverlay, () => ({
    __proto__: dart.getMethods(tile_overlay.TileOverlay.__proto__),
    copyWith: dart.fnType(dart.legacy(tile_overlay.TileOverlay), [], {fadeInParam: dart.legacy(core.bool), tileOverlayId: dart.legacy(tile_overlay.TileOverlayId), tileSizeParam: dart.legacy(core.int), transparencyParam: dart.legacy(core.double), visibleParam: dart.legacy(core.bool), zIndexParam: dart.legacy(core.int)}, {}),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(tile_overlay.TileOverlay, () => ({
    __proto__: dart.getGetters(tile_overlay.TileOverlay.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(tile_overlay.TileOverlay, I[4]);
  dart.setFieldSignature(tile_overlay.TileOverlay, () => ({
    __proto__: dart.getFields(tile_overlay.TileOverlay.__proto__),
    tileOverlayId: dart.finalFieldType(dart.legacy(tile_overlay.TileOverlayId)),
    fadeIn: dart.finalFieldType(dart.legacy(core.bool)),
    tileProvider: dart.finalFieldType(dart.legacy(tile_provider.TileProvider)),
    transparency: dart.finalFieldType(dart.legacy(core.double)),
    zIndex: dart.finalFieldType(dart.legacy(core.int)),
    visible: dart.finalFieldType(dart.legacy(core.bool)),
    tileSize: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(tile_overlay.TileOverlay, ['_equals']);
  dart.defineExtensionAccessors(tile_overlay.TileOverlay, ['hashCode']);
  var value$0 = dart.privateName(polyline, "PolylineId.value");
  polyline.PolylineId = class PolylineId extends core.Object {
    get value() {
      return this[value$0];
    }
    set value(value) {
      super.value = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      let typedOther = T.PolylineIdL().as(other);
      return this.value == typedOther.value;
    }
    get hashCode() {
      return dart.hashCode(this.value);
    }
    toString() {
      return "PolylineId{value: " + dart.str(this.value) + "}";
    }
  };
  (polyline.PolylineId.new = function(value) {
    this[value$0] = value;
    if (!(value != null)) dart.assertFailed(null, I[5], 19, 35, "value != null");
    ;
  }).prototype = polyline.PolylineId.prototype;
  dart.addTypeTests(polyline.PolylineId);
  dart.addTypeCaches(polyline.PolylineId);
  dart.setMethodSignature(polyline.PolylineId, () => ({
    __proto__: dart.getMethods(polyline.PolylineId.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(polyline.PolylineId, () => ({
    __proto__: dart.getGetters(polyline.PolylineId.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(polyline.PolylineId, I[6]);
  dart.setFieldSignature(polyline.PolylineId, () => ({
    __proto__: dart.getFields(polyline.PolylineId.__proto__),
    value: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(polyline.PolylineId, ['_equals', 'toString']);
  dart.defineExtensionAccessors(polyline.PolylineId, ['hashCode']);
  var polylineId$ = dart.privateName(polyline, "Polyline.polylineId");
  var consumeTapEvents$ = dart.privateName(polyline, "Polyline.consumeTapEvents");
  var color$ = dart.privateName(polyline, "Polyline.color");
  var geodesic$ = dart.privateName(polyline, "Polyline.geodesic");
  var jointType$ = dart.privateName(polyline, "Polyline.jointType");
  var patterns$ = dart.privateName(polyline, "Polyline.patterns");
  var points$ = dart.privateName(polyline, "Polyline.points");
  var startCap$ = dart.privateName(polyline, "Polyline.startCap");
  var endCap$ = dart.privateName(polyline, "Polyline.endCap");
  var visible$0 = dart.privateName(polyline, "Polyline.visible");
  var width$ = dart.privateName(polyline, "Polyline.width");
  var zIndex$0 = dart.privateName(polyline, "Polyline.zIndex");
  var onTap$ = dart.privateName(polyline, "Polyline.onTap");
  var Color_value = dart.privateName(ui, "Color.value");
  var Cap__json = dart.privateName(cap, "Cap._json");
  var JointType_value = dart.privateName(joint_type, "JointType.value");
  var _pointsToJson = dart.privateName(polyline, "_pointsToJson");
  var _patternToJson = dart.privateName(polyline, "_patternToJson");
  polyline.Polyline = class Polyline extends core.Object {
    get polylineId() {
      return this[polylineId$];
    }
    set polylineId(value) {
      super.polylineId = value;
    }
    get consumeTapEvents() {
      return this[consumeTapEvents$];
    }
    set consumeTapEvents(value) {
      super.consumeTapEvents = value;
    }
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get geodesic() {
      return this[geodesic$];
    }
    set geodesic(value) {
      super.geodesic = value;
    }
    get jointType() {
      return this[jointType$];
    }
    set jointType(value) {
      super.jointType = value;
    }
    get patterns() {
      return this[patterns$];
    }
    set patterns(value) {
      super.patterns = value;
    }
    get points() {
      return this[points$];
    }
    set points(value) {
      super.points = value;
    }
    get startCap() {
      return this[startCap$];
    }
    set startCap(value) {
      super.startCap = value;
    }
    get endCap() {
      return this[endCap$];
    }
    set endCap(value) {
      super.endCap = value;
    }
    get visible() {
      return this[visible$0];
    }
    set visible(value) {
      super.visible = value;
    }
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    get zIndex() {
      return this[zIndex$0];
    }
    set zIndex(value) {
      super.zIndex = value;
    }
    get onTap() {
      return this[onTap$];
    }
    set onTap(value) {
      super.onTap = value;
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9;
      let colorParam = opts && 'colorParam' in opts ? opts.colorParam : null;
      let consumeTapEventsParam = opts && 'consumeTapEventsParam' in opts ? opts.consumeTapEventsParam : null;
      let endCapParam = opts && 'endCapParam' in opts ? opts.endCapParam : null;
      let geodesicParam = opts && 'geodesicParam' in opts ? opts.geodesicParam : null;
      let jointTypeParam = opts && 'jointTypeParam' in opts ? opts.jointTypeParam : null;
      let patternsParam = opts && 'patternsParam' in opts ? opts.patternsParam : null;
      let pointsParam = opts && 'pointsParam' in opts ? opts.pointsParam : null;
      let startCapParam = opts && 'startCapParam' in opts ? opts.startCapParam : null;
      let visibleParam = opts && 'visibleParam' in opts ? opts.visibleParam : null;
      let widthParam = opts && 'widthParam' in opts ? opts.widthParam : null;
      let zIndexParam = opts && 'zIndexParam' in opts ? opts.zIndexParam : null;
      let onTapParam = opts && 'onTapParam' in opts ? opts.onTapParam : null;
      return new polyline.Polyline.new({polylineId: this.polylineId, color: (t0 = colorParam, t0 == null ? this.color : t0), consumeTapEvents: (t0$ = consumeTapEventsParam, t0$ == null ? this.consumeTapEvents : t0$), endCap: (t0$0 = endCapParam, t0$0 == null ? this.endCap : t0$0), geodesic: (t0$1 = geodesicParam, t0$1 == null ? this.geodesic : t0$1), jointType: (t0$2 = jointTypeParam, t0$2 == null ? this.jointType : t0$2), patterns: (t0$3 = patternsParam, t0$3 == null ? this.patterns : t0$3), points: (t0$4 = pointsParam, t0$4 == null ? this.points : t0$4), startCap: (t0$5 = startCapParam, t0$5 == null ? this.startCap : t0$5), visible: (t0$6 = visibleParam, t0$6 == null ? this.visible : t0$6), width: (t0$7 = widthParam, t0$7 == null ? this.width : t0$7), onTap: (t0$8 = onTapParam, t0$8 == null ? this.onTap : t0$8), zIndex: (t0$9 = zIndexParam, t0$9 == null ? this.zIndex : t0$9)});
    }
    clone() {
      return this.copyWith({patternsParam: T.ListOfPatternItemL().of(this.patterns), pointsParam: T.ListOfLatLngL().of(this.points)});
    }
    toJson() {
      let t0, t0$, t0$0;
      let json = new (T.IdentityMapOfStringL$dynamic()).new();
      function addIfPresent(fieldName, value) {
        if (value != null) {
          json[$_set](fieldName, value);
        }
      }
      dart.fn(addIfPresent, T.StringLAnddynamicTovoid());
      addIfPresent("polylineId", this.polylineId.value);
      addIfPresent("consumeTapEvents", this.consumeTapEvents);
      addIfPresent("color", this.color.value);
      addIfPresent("endCap", (t0 = this.endCap, t0 == null ? null : t0.toJson()));
      addIfPresent("geodesic", this.geodesic);
      addIfPresent("jointType", (t0$ = this.jointType, t0$ == null ? null : t0$.value));
      addIfPresent("startCap", (t0$0 = this.startCap, t0$0 == null ? null : t0$0.toJson()));
      addIfPresent("visible", this.visible);
      addIfPresent("width", this.width);
      addIfPresent("zIndex", this.zIndex);
      if (this.points != null) {
        json[$_set]("points", this[_pointsToJson]());
      }
      if (this.patterns != null) {
        json[$_set]("pattern", this[_patternToJson]());
      }
      return json;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      let typedOther = T.PolylineL().as(other);
      return dart.equals(this.polylineId, typedOther.polylineId) && this.consumeTapEvents == typedOther.consumeTapEvents && dart.equals(this.color, typedOther.color) && this.geodesic == typedOther.geodesic && dart.equals(this.jointType, typedOther.jointType) && dart.test(collections.listEquals(T.PatternItemL(), this.patterns, typedOther.patterns)) && dart.test(collections.listEquals(T.LatLngL(), this.points, typedOther.points)) && dart.equals(this.startCap, typedOther.startCap) && dart.equals(this.endCap, typedOther.endCap) && this.visible == typedOther.visible && this.width == typedOther.width && this.zIndex == typedOther.zIndex;
    }
    get hashCode() {
      return dart.hashCode(this.polylineId);
    }
    [_pointsToJson]() {
      let result = [];
      for (let point of this.points) {
        result[$add](point.toJson());
      }
      return result;
    }
    [_patternToJson]() {
      let result = [];
      for (let patternItem of this.patterns) {
        if (patternItem != null) {
          result[$add](patternItem.toJson());
        }
      }
      return result;
    }
  };
  (polyline.Polyline.new = function(opts) {
    let polylineId = opts && 'polylineId' in opts ? opts.polylineId : null;
    let consumeTapEvents = opts && 'consumeTapEvents' in opts ? opts.consumeTapEvents : false;
    let color = opts && 'color' in opts ? opts.color : C[9] || CT.C9;
    let endCap = opts && 'endCap' in opts ? opts.endCap : C[10] || CT.C10;
    let geodesic = opts && 'geodesic' in opts ? opts.geodesic : false;
    let jointType = opts && 'jointType' in opts ? opts.jointType : C[12] || CT.C12;
    let points = opts && 'points' in opts ? opts.points : C[13] || CT.C13;
    let patterns = opts && 'patterns' in opts ? opts.patterns : C[14] || CT.C14;
    let startCap = opts && 'startCap' in opts ? opts.startCap : C[10] || CT.C10;
    let visible = opts && 'visible' in opts ? opts.visible : true;
    let width = opts && 'width' in opts ? opts.width : 10;
    let zIndex = opts && 'zIndex' in opts ? opts.zIndex : 0;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    this[polylineId$] = polylineId;
    this[consumeTapEvents$] = consumeTapEvents;
    this[color$] = color;
    this[endCap$] = endCap;
    this[geodesic$] = geodesic;
    this[jointType$] = jointType;
    this[points$] = points;
    this[patterns$] = patterns;
    this[startCap$] = startCap;
    this[visible$0] = visible;
    this[width$] = width;
    this[zIndex$0] = zIndex;
    this[onTap$] = onTap;
    ;
  }).prototype = polyline.Polyline.prototype;
  dart.addTypeTests(polyline.Polyline);
  dart.addTypeCaches(polyline.Polyline);
  dart.setMethodSignature(polyline.Polyline, () => ({
    __proto__: dart.getMethods(polyline.Polyline.__proto__),
    copyWith: dart.fnType(dart.legacy(polyline.Polyline), [], {colorParam: dart.legacy(ui.Color), consumeTapEventsParam: dart.legacy(core.bool), endCapParam: dart.legacy(cap.Cap), geodesicParam: dart.legacy(core.bool), jointTypeParam: dart.legacy(joint_type.JointType), onTapParam: dart.legacy(dart.fnType(dart.void, [])), patternsParam: dart.legacy(core.List$(dart.legacy(pattern_item.PatternItem))), pointsParam: dart.legacy(core.List$(dart.legacy(location.LatLng))), startCapParam: dart.legacy(cap.Cap), visibleParam: dart.legacy(core.bool), widthParam: dart.legacy(core.int), zIndexParam: dart.legacy(core.int)}, {}),
    clone: dart.fnType(dart.legacy(polyline.Polyline), []),
    toJson: dart.fnType(dart.dynamic, []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [_pointsToJson]: dart.fnType(dart.dynamic, []),
    [_patternToJson]: dart.fnType(dart.dynamic, [])
  }));
  dart.setGetterSignature(polyline.Polyline, () => ({
    __proto__: dart.getGetters(polyline.Polyline.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(polyline.Polyline, I[6]);
  dart.setFieldSignature(polyline.Polyline, () => ({
    __proto__: dart.getFields(polyline.Polyline.__proto__),
    polylineId: dart.finalFieldType(dart.legacy(polyline.PolylineId)),
    consumeTapEvents: dart.finalFieldType(dart.legacy(core.bool)),
    color: dart.finalFieldType(dart.legacy(ui.Color)),
    geodesic: dart.finalFieldType(dart.legacy(core.bool)),
    jointType: dart.finalFieldType(dart.legacy(joint_type.JointType)),
    patterns: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(pattern_item.PatternItem)))),
    points: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(location.LatLng)))),
    startCap: dart.finalFieldType(dart.legacy(cap.Cap)),
    endCap: dart.finalFieldType(dart.legacy(cap.Cap)),
    visible: dart.finalFieldType(dart.legacy(core.bool)),
    width: dart.finalFieldType(dart.legacy(core.int)),
    zIndex: dart.finalFieldType(dart.legacy(core.int)),
    onTap: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [])))
  }));
  dart.defineExtensionMethods(polyline.Polyline, ['_equals']);
  dart.defineExtensionAccessors(polyline.Polyline, ['hashCode']);
  polyline$.keyByPolylineId = function keyByPolylineId(polylines) {
    if (polylines == null) {
      return new (T.LinkedMapOfPolylineIdL$PolylineL()).new();
    }
    return T.MapOfPolylineIdL$PolylineL().fromEntries(polylines[$map](T.MapEntryLOfPolylineIdL$PolylineL(), dart.fn(polyline => new (T.MapEntryOfPolylineIdL$PolylineL()).__(polyline.polylineId, polyline.clone()), T.PolylineLToMapEntryLOfPolylineIdL$PolylineL())));
  };
  polyline$.serializePolylineSet = function serializePolylineSet(polylines) {
    if (polylines == null) {
      return null;
    }
    return polylines[$map](T.MapLOfStringL$dynamic(), dart.fn(p => T.MapLOfStringL$dynamic().as(p.toJson()), T.PolylineLToMapLOfStringL$dynamic()))[$toList]();
  };
  var polylinesToAdd = dart.privateName(polyline_updates, "PolylineUpdates.polylinesToAdd");
  var polylineIdsToRemove = dart.privateName(polyline_updates, "PolylineUpdates.polylineIdsToRemove");
  var polylinesToChange = dart.privateName(polyline_updates, "PolylineUpdates.polylinesToChange");
  polyline_updates.PolylineUpdates = class PolylineUpdates extends core.Object {
    get polylinesToAdd() {
      return this[polylinesToAdd];
    }
    set polylinesToAdd(value) {
      this[polylinesToAdd] = value;
    }
    get polylineIdsToRemove() {
      return this[polylineIdsToRemove];
    }
    set polylineIdsToRemove(value) {
      this[polylineIdsToRemove] = value;
    }
    get polylinesToChange() {
      return this[polylinesToChange];
    }
    set polylinesToChange(value) {
      this[polylinesToChange] = value;
    }
    toJson() {
      let updateMap = new (T.IdentityMapOfStringL$dynamic()).new();
      function addIfNonNull(fieldName, value) {
        if (value != null) {
          updateMap[$_set](fieldName, value);
        }
      }
      dart.fn(addIfNonNull, T.StringLAnddynamicTovoid());
      addIfNonNull("polylinesToAdd", polyline$.serializePolylineSet(this.polylinesToAdd));
      addIfNonNull("polylinesToChange", polyline$.serializePolylineSet(this.polylinesToChange));
      addIfNonNull("polylineIdsToRemove", this.polylineIdsToRemove[$map](dart.dynamic, dart.fn(m => m.value, T.PolylineIdLToStringL()))[$toList]());
      return updateMap;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      let typedOther = T.PolylineUpdatesL().as(other);
      return dart.test(collections.setEquals(T.PolylineL(), this.polylinesToAdd, typedOther.polylinesToAdd)) && dart.test(collections.setEquals(T.PolylineIdL(), this.polylineIdsToRemove, typedOther.polylineIdsToRemove)) && dart.test(collections.setEquals(T.PolylineL(), this.polylinesToChange, typedOther.polylinesToChange));
    }
    get hashCode() {
      return ui.hashValues(this.polylinesToAdd, this.polylineIdsToRemove, this.polylinesToChange);
    }
    toString() {
      return "_PolylineUpdates{polylinesToAdd: " + dart.str(this.polylinesToAdd) + ", " + "polylineIdsToRemove: " + dart.str(this.polylineIdsToRemove) + ", " + "polylinesToChange: " + dart.str(this.polylinesToChange) + "}";
    }
  };
  (polyline_updates.PolylineUpdates.from = function(previous, current) {
    this[polylinesToAdd] = null;
    this[polylineIdsToRemove] = null;
    this[polylinesToChange] = null;
    if (previous == null) {
      previous = new (T._IdentityHashSetOfPolylineL()).new();
    }
    if (current == null) {
      current = new (T._IdentityHashSetOfPolylineL()).new();
    }
    let previousPolylines = polyline$.keyByPolylineId(previous);
    let currentPolylines = polyline$.keyByPolylineId(current);
    let prevPolylineIds = previousPolylines[$keys][$toSet]();
    let currentPolylineIds = currentPolylines[$keys][$toSet]();
    function idToCurrentPolyline(id) {
      return currentPolylines[$_get](id);
    }
    dart.fn(idToCurrentPolyline, T.PolylineIdLToPolylineL());
    let _polylineIdsToRemove = prevPolylineIds.difference(currentPolylineIds);
    let _polylinesToAdd = currentPolylineIds.difference(prevPolylineIds)[$map](T.PolylineL(), idToCurrentPolyline)[$toSet]();
    function hasChanged(current) {
      let previous = previousPolylines[$_get](current.polylineId);
      return !dart.equals(current, previous);
    }
    dart.fn(hasChanged, T.PolylineLToboolL());
    let _polylinesToChange = currentPolylineIds.intersection(prevPolylineIds)[$map](T.PolylineL(), idToCurrentPolyline)[$where](hasChanged)[$toSet]();
    this.polylinesToAdd = _polylinesToAdd;
    this.polylineIdsToRemove = _polylineIdsToRemove;
    this.polylinesToChange = _polylinesToChange;
  }).prototype = polyline_updates.PolylineUpdates.prototype;
  dart.addTypeTests(polyline_updates.PolylineUpdates);
  dart.addTypeCaches(polyline_updates.PolylineUpdates);
  dart.setMethodSignature(polyline_updates.PolylineUpdates, () => ({
    __proto__: dart.getMethods(polyline_updates.PolylineUpdates.__proto__),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(polyline_updates.PolylineUpdates, () => ({
    __proto__: dart.getGetters(polyline_updates.PolylineUpdates.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(polyline_updates.PolylineUpdates, I[7]);
  dart.setFieldSignature(polyline_updates.PolylineUpdates, () => ({
    __proto__: dart.getFields(polyline_updates.PolylineUpdates.__proto__),
    polylinesToAdd: dart.fieldType(dart.legacy(core.Set$(dart.legacy(polyline.Polyline)))),
    polylineIdsToRemove: dart.fieldType(dart.legacy(core.Set$(dart.legacy(polyline.PolylineId)))),
    polylinesToChange: dart.fieldType(dart.legacy(core.Set$(dart.legacy(polyline.Polyline))))
  }));
  dart.defineExtensionMethods(polyline_updates.PolylineUpdates, ['_equals', 'toString']);
  dart.defineExtensionAccessors(polyline_updates.PolylineUpdates, ['hashCode']);
  var value$1 = dart.privateName(polygon, "PolygonId.value");
  polygon.PolygonId = class PolygonId extends core.Object {
    get value() {
      return this[value$1];
    }
    set value(value) {
      super.value = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      let typedOther = T.PolygonIdL().as(other);
      return this.value == typedOther.value;
    }
    get hashCode() {
      return dart.hashCode(this.value);
    }
    toString() {
      return "PolygonId{value: " + dart.str(this.value) + "}";
    }
  };
  (polygon.PolygonId.new = function(value) {
    this[value$1] = value;
    if (!(value != null)) dart.assertFailed(null, I[8], 18, 34, "value != null");
    ;
  }).prototype = polygon.PolygonId.prototype;
  dart.addTypeTests(polygon.PolygonId);
  dart.addTypeCaches(polygon.PolygonId);
  dart.setMethodSignature(polygon.PolygonId, () => ({
    __proto__: dart.getMethods(polygon.PolygonId.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(polygon.PolygonId, () => ({
    __proto__: dart.getGetters(polygon.PolygonId.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(polygon.PolygonId, I[9]);
  dart.setFieldSignature(polygon.PolygonId, () => ({
    __proto__: dart.getFields(polygon.PolygonId.__proto__),
    value: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(polygon.PolygonId, ['_equals', 'toString']);
  dart.defineExtensionAccessors(polygon.PolygonId, ['hashCode']);
  var polygonId$ = dart.privateName(polygon, "Polygon.polygonId");
  var consumeTapEvents$0 = dart.privateName(polygon, "Polygon.consumeTapEvents");
  var fillColor$ = dart.privateName(polygon, "Polygon.fillColor");
  var geodesic$0 = dart.privateName(polygon, "Polygon.geodesic");
  var points$0 = dart.privateName(polygon, "Polygon.points");
  var holes$ = dart.privateName(polygon, "Polygon.holes");
  var visible$1 = dart.privateName(polygon, "Polygon.visible");
  var strokeColor$ = dart.privateName(polygon, "Polygon.strokeColor");
  var strokeWidth$ = dart.privateName(polygon, "Polygon.strokeWidth");
  var zIndex$1 = dart.privateName(polygon, "Polygon.zIndex");
  var onTap$0 = dart.privateName(polygon, "Polygon.onTap");
  var _pointsToJson$ = dart.privateName(polygon, "_pointsToJson");
  var _holesToJson = dart.privateName(polygon, "_holesToJson");
  polygon.Polygon = class Polygon extends core.Object {
    get polygonId() {
      return this[polygonId$];
    }
    set polygonId(value) {
      super.polygonId = value;
    }
    get consumeTapEvents() {
      return this[consumeTapEvents$0];
    }
    set consumeTapEvents(value) {
      super.consumeTapEvents = value;
    }
    get fillColor() {
      return this[fillColor$];
    }
    set fillColor(value) {
      super.fillColor = value;
    }
    get geodesic() {
      return this[geodesic$0];
    }
    set geodesic(value) {
      super.geodesic = value;
    }
    get points() {
      return this[points$0];
    }
    set points(value) {
      super.points = value;
    }
    get holes() {
      return this[holes$];
    }
    set holes(value) {
      super.holes = value;
    }
    get visible() {
      return this[visible$1];
    }
    set visible(value) {
      super.visible = value;
    }
    get strokeColor() {
      return this[strokeColor$];
    }
    set strokeColor(value) {
      super.strokeColor = value;
    }
    get strokeWidth() {
      return this[strokeWidth$];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    get zIndex() {
      return this[zIndex$1];
    }
    set zIndex(value) {
      super.zIndex = value;
    }
    get onTap() {
      return this[onTap$0];
    }
    set onTap(value) {
      super.onTap = value;
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7;
      let consumeTapEventsParam = opts && 'consumeTapEventsParam' in opts ? opts.consumeTapEventsParam : null;
      let fillColorParam = opts && 'fillColorParam' in opts ? opts.fillColorParam : null;
      let geodesicParam = opts && 'geodesicParam' in opts ? opts.geodesicParam : null;
      let pointsParam = opts && 'pointsParam' in opts ? opts.pointsParam : null;
      let holesParam = opts && 'holesParam' in opts ? opts.holesParam : null;
      let strokeColorParam = opts && 'strokeColorParam' in opts ? opts.strokeColorParam : null;
      let strokeWidthParam = opts && 'strokeWidthParam' in opts ? opts.strokeWidthParam : null;
      let visibleParam = opts && 'visibleParam' in opts ? opts.visibleParam : null;
      let zIndexParam = opts && 'zIndexParam' in opts ? opts.zIndexParam : null;
      let onTapParam = opts && 'onTapParam' in opts ? opts.onTapParam : null;
      return new polygon.Polygon.new({polygonId: this.polygonId, consumeTapEvents: (t0 = consumeTapEventsParam, t0 == null ? this.consumeTapEvents : t0), fillColor: (t0$ = fillColorParam, t0$ == null ? this.fillColor : t0$), geodesic: (t0$0 = geodesicParam, t0$0 == null ? this.geodesic : t0$0), points: (t0$1 = pointsParam, t0$1 == null ? this.points : t0$1), holes: (t0$2 = holesParam, t0$2 == null ? this.holes : t0$2), strokeColor: (t0$3 = strokeColorParam, t0$3 == null ? this.strokeColor : t0$3), strokeWidth: (t0$4 = strokeWidthParam, t0$4 == null ? this.strokeWidth : t0$4), visible: (t0$5 = visibleParam, t0$5 == null ? this.visible : t0$5), onTap: (t0$6 = onTapParam, t0$6 == null ? this.onTap : t0$6), zIndex: (t0$7 = zIndexParam, t0$7 == null ? this.zIndex : t0$7)});
    }
    clone() {
      return this.copyWith({pointsParam: T.ListOfLatLngL().of(this.points)});
    }
    toJson() {
      let json = new (T.IdentityMapOfStringL$dynamic()).new();
      function addIfPresent(fieldName, value) {
        if (value != null) {
          json[$_set](fieldName, value);
        }
      }
      dart.fn(addIfPresent, T.StringLAnddynamicTovoid());
      addIfPresent("polygonId", this.polygonId.value);
      addIfPresent("consumeTapEvents", this.consumeTapEvents);
      addIfPresent("fillColor", this.fillColor.value);
      addIfPresent("geodesic", this.geodesic);
      addIfPresent("strokeColor", this.strokeColor.value);
      addIfPresent("strokeWidth", this.strokeWidth);
      addIfPresent("visible", this.visible);
      addIfPresent("zIndex", this.zIndex);
      if (this.points != null) {
        json[$_set]("points", this[_pointsToJson$]());
      }
      if (this.holes != null) {
        json[$_set]("holes", this[_holesToJson]());
      }
      return json;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      let typedOther = T.PolygonL().as(other);
      return dart.equals(this.polygonId, typedOther.polygonId) && this.consumeTapEvents == typedOther.consumeTapEvents && dart.equals(this.fillColor, typedOther.fillColor) && this.geodesic == typedOther.geodesic && dart.test(collections.listEquals(T.LatLngL(), this.points, typedOther.points)) && dart.test(new equality.DeepCollectionEquality.new().equals(this.holes, typedOther.holes)) && this.visible == typedOther.visible && dart.equals(this.strokeColor, typedOther.strokeColor) && this.strokeWidth == typedOther.strokeWidth && this.zIndex == typedOther.zIndex;
    }
    get hashCode() {
      return dart.hashCode(this.polygonId);
    }
    [_pointsToJson$]() {
      let result = [];
      for (let point of this.points) {
        result[$add](point.toJson());
      }
      return result;
    }
    [_holesToJson]() {
      let result = T.JSArrayOfListL().of([]);
      for (let hole of this.holes) {
        let jsonHole = [];
        for (let point of hole) {
          jsonHole[$add](point.toJson());
        }
        result[$add](jsonHole);
      }
      return result;
    }
  };
  (polygon.Polygon.new = function(opts) {
    let polygonId = opts && 'polygonId' in opts ? opts.polygonId : null;
    let consumeTapEvents = opts && 'consumeTapEvents' in opts ? opts.consumeTapEvents : false;
    let fillColor = opts && 'fillColor' in opts ? opts.fillColor : C[9] || CT.C9;
    let geodesic = opts && 'geodesic' in opts ? opts.geodesic : false;
    let points = opts && 'points' in opts ? opts.points : C[13] || CT.C13;
    let holes = opts && 'holes' in opts ? opts.holes : C[15] || CT.C15;
    let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : C[9] || CT.C9;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 10;
    let visible = opts && 'visible' in opts ? opts.visible : true;
    let zIndex = opts && 'zIndex' in opts ? opts.zIndex : 0;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    this[polygonId$] = polygonId;
    this[consumeTapEvents$0] = consumeTapEvents;
    this[fillColor$] = fillColor;
    this[geodesic$0] = geodesic;
    this[points$0] = points;
    this[holes$] = holes;
    this[strokeColor$] = strokeColor;
    this[strokeWidth$] = strokeWidth;
    this[visible$1] = visible;
    this[zIndex$1] = zIndex;
    this[onTap$0] = onTap;
    ;
  }).prototype = polygon.Polygon.prototype;
  dart.addTypeTests(polygon.Polygon);
  dart.addTypeCaches(polygon.Polygon);
  dart.setMethodSignature(polygon.Polygon, () => ({
    __proto__: dart.getMethods(polygon.Polygon.__proto__),
    copyWith: dart.fnType(dart.legacy(polygon.Polygon), [], {consumeTapEventsParam: dart.legacy(core.bool), fillColorParam: dart.legacy(ui.Color), geodesicParam: dart.legacy(core.bool), holesParam: dart.legacy(core.List$(dart.legacy(core.List$(dart.legacy(location.LatLng))))), onTapParam: dart.legacy(dart.fnType(dart.void, [])), pointsParam: dart.legacy(core.List$(dart.legacy(location.LatLng))), strokeColorParam: dart.legacy(ui.Color), strokeWidthParam: dart.legacy(core.int), visibleParam: dart.legacy(core.bool), zIndexParam: dart.legacy(core.int)}, {}),
    clone: dart.fnType(dart.legacy(polygon.Polygon), []),
    toJson: dart.fnType(dart.dynamic, []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [_pointsToJson$]: dart.fnType(dart.dynamic, []),
    [_holesToJson]: dart.fnType(dart.legacy(core.List$(dart.legacy(core.List))), [])
  }));
  dart.setGetterSignature(polygon.Polygon, () => ({
    __proto__: dart.getGetters(polygon.Polygon.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(polygon.Polygon, I[9]);
  dart.setFieldSignature(polygon.Polygon, () => ({
    __proto__: dart.getFields(polygon.Polygon.__proto__),
    polygonId: dart.finalFieldType(dart.legacy(polygon.PolygonId)),
    consumeTapEvents: dart.finalFieldType(dart.legacy(core.bool)),
    fillColor: dart.finalFieldType(dart.legacy(ui.Color)),
    geodesic: dart.finalFieldType(dart.legacy(core.bool)),
    points: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(location.LatLng)))),
    holes: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.List$(dart.legacy(location.LatLng)))))),
    visible: dart.finalFieldType(dart.legacy(core.bool)),
    strokeColor: dart.finalFieldType(dart.legacy(ui.Color)),
    strokeWidth: dart.finalFieldType(dart.legacy(core.int)),
    zIndex: dart.finalFieldType(dart.legacy(core.int)),
    onTap: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [])))
  }));
  dart.defineExtensionMethods(polygon.Polygon, ['_equals']);
  dart.defineExtensionAccessors(polygon.Polygon, ['hashCode']);
  polygon$.keyByPolygonId = function keyByPolygonId(polygons) {
    if (polygons == null) {
      return new (T.LinkedMapOfPolygonIdL$PolygonL()).new();
    }
    return T.MapOfPolygonIdL$PolygonL().fromEntries(polygons[$map](T.MapEntryLOfPolygonIdL$PolygonL(), dart.fn(polygon => new (T.MapEntryOfPolygonIdL$PolygonL()).__(polygon.polygonId, polygon.clone()), T.PolygonLToMapEntryLOfPolygonIdL$PolygonL())));
  };
  polygon$.serializePolygonSet = function serializePolygonSet(polygons) {
    if (polygons == null) {
      return null;
    }
    return polygons[$map](T.MapLOfStringL$dynamic(), dart.fn(p => T.MapLOfStringL$dynamic().as(p.toJson()), T.PolygonLToMapLOfStringL$dynamic()))[$toList]();
  };
  var polygonsToAdd = dart.privateName(polygon_updates, "PolygonUpdates.polygonsToAdd");
  var polygonIdsToRemove = dart.privateName(polygon_updates, "PolygonUpdates.polygonIdsToRemove");
  var polygonsToChange = dart.privateName(polygon_updates, "PolygonUpdates.polygonsToChange");
  polygon_updates.PolygonUpdates = class PolygonUpdates extends core.Object {
    get polygonsToAdd() {
      return this[polygonsToAdd];
    }
    set polygonsToAdd(value) {
      this[polygonsToAdd] = value;
    }
    get polygonIdsToRemove() {
      return this[polygonIdsToRemove];
    }
    set polygonIdsToRemove(value) {
      this[polygonIdsToRemove] = value;
    }
    get polygonsToChange() {
      return this[polygonsToChange];
    }
    set polygonsToChange(value) {
      this[polygonsToChange] = value;
    }
    toJson() {
      let updateMap = new (T.IdentityMapOfStringL$dynamic()).new();
      function addIfNonNull(fieldName, value) {
        if (value != null) {
          updateMap[$_set](fieldName, value);
        }
      }
      dart.fn(addIfNonNull, T.StringLAnddynamicTovoid());
      addIfNonNull("polygonsToAdd", polygon$.serializePolygonSet(this.polygonsToAdd));
      addIfNonNull("polygonsToChange", polygon$.serializePolygonSet(this.polygonsToChange));
      addIfNonNull("polygonIdsToRemove", this.polygonIdsToRemove[$map](dart.dynamic, dart.fn(m => m.value, T.PolygonIdLToStringL()))[$toList]());
      return updateMap;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      let typedOther = T.PolygonUpdatesL().as(other);
      return dart.test(collections.setEquals(T.PolygonL(), this.polygonsToAdd, typedOther.polygonsToAdd)) && dart.test(collections.setEquals(T.PolygonIdL(), this.polygonIdsToRemove, typedOther.polygonIdsToRemove)) && dart.test(collections.setEquals(T.PolygonL(), this.polygonsToChange, typedOther.polygonsToChange));
    }
    get hashCode() {
      return ui.hashValues(this.polygonsToAdd, this.polygonIdsToRemove, this.polygonsToChange);
    }
    toString() {
      return "_PolygonUpdates{polygonsToAdd: " + dart.str(this.polygonsToAdd) + ", " + "polygonIdsToRemove: " + dart.str(this.polygonIdsToRemove) + ", " + "polygonsToChange: " + dart.str(this.polygonsToChange) + "}";
    }
  };
  (polygon_updates.PolygonUpdates.from = function(previous, current) {
    this[polygonsToAdd] = null;
    this[polygonIdsToRemove] = null;
    this[polygonsToChange] = null;
    if (previous == null) {
      previous = new (T._IdentityHashSetOfPolygonL()).new();
    }
    if (current == null) {
      current = new (T._IdentityHashSetOfPolygonL()).new();
    }
    let previousPolygons = polygon$.keyByPolygonId(previous);
    let currentPolygons = polygon$.keyByPolygonId(current);
    let prevPolygonIds = previousPolygons[$keys][$toSet]();
    let currentPolygonIds = currentPolygons[$keys][$toSet]();
    function idToCurrentPolygon(id) {
      return currentPolygons[$_get](id);
    }
    dart.fn(idToCurrentPolygon, T.PolygonIdLToPolygonL());
    let _polygonIdsToRemove = prevPolygonIds.difference(currentPolygonIds);
    let _polygonsToAdd = currentPolygonIds.difference(prevPolygonIds)[$map](T.PolygonL(), idToCurrentPolygon)[$toSet]();
    function hasChanged(current) {
      let previous = previousPolygons[$_get](current.polygonId);
      return !dart.equals(current, previous);
    }
    dart.fn(hasChanged, T.PolygonLToboolL());
    let _polygonsToChange = currentPolygonIds.intersection(prevPolygonIds)[$map](T.PolygonL(), idToCurrentPolygon)[$where](hasChanged)[$toSet]();
    this.polygonsToAdd = _polygonsToAdd;
    this.polygonIdsToRemove = _polygonIdsToRemove;
    this.polygonsToChange = _polygonsToChange;
  }).prototype = polygon_updates.PolygonUpdates.prototype;
  dart.addTypeTests(polygon_updates.PolygonUpdates);
  dart.addTypeCaches(polygon_updates.PolygonUpdates);
  dart.setMethodSignature(polygon_updates.PolygonUpdates, () => ({
    __proto__: dart.getMethods(polygon_updates.PolygonUpdates.__proto__),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(polygon_updates.PolygonUpdates, () => ({
    __proto__: dart.getGetters(polygon_updates.PolygonUpdates.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(polygon_updates.PolygonUpdates, I[10]);
  dart.setFieldSignature(polygon_updates.PolygonUpdates, () => ({
    __proto__: dart.getFields(polygon_updates.PolygonUpdates.__proto__),
    polygonsToAdd: dart.fieldType(dart.legacy(core.Set$(dart.legacy(polygon.Polygon)))),
    polygonIdsToRemove: dart.fieldType(dart.legacy(core.Set$(dart.legacy(polygon.PolygonId)))),
    polygonsToChange: dart.fieldType(dart.legacy(core.Set$(dart.legacy(polygon.Polygon))))
  }));
  dart.defineExtensionMethods(polygon_updates.PolygonUpdates, ['_equals', 'toString']);
  dart.defineExtensionAccessors(polygon_updates.PolygonUpdates, ['hashCode']);
  var title$ = dart.privateName(marker, "InfoWindow.title");
  var snippet$ = dart.privateName(marker, "InfoWindow.snippet");
  var anchor$ = dart.privateName(marker, "InfoWindow.anchor");
  var onTap$1 = dart.privateName(marker, "InfoWindow.onTap");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var _toJson = dart.privateName(marker, "_toJson");
  marker.InfoWindow = class InfoWindow extends core.Object {
    get title() {
      return this[title$];
    }
    set title(value) {
      super.title = value;
    }
    get snippet() {
      return this[snippet$];
    }
    set snippet(value) {
      super.snippet = value;
    }
    get anchor() {
      return this[anchor$];
    }
    set anchor(value) {
      super.anchor = value;
    }
    get onTap() {
      return this[onTap$1];
    }
    set onTap(value) {
      super.onTap = value;
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1;
      let titleParam = opts && 'titleParam' in opts ? opts.titleParam : null;
      let snippetParam = opts && 'snippetParam' in opts ? opts.snippetParam : null;
      let anchorParam = opts && 'anchorParam' in opts ? opts.anchorParam : null;
      let onTapParam = opts && 'onTapParam' in opts ? opts.onTapParam : null;
      return new marker.InfoWindow.new({title: (t0 = titleParam, t0 == null ? this.title : t0), snippet: (t0$ = snippetParam, t0$ == null ? this.snippet : t0$), anchor: (t0$0 = anchorParam, t0$0 == null ? this.anchor : t0$0), onTap: (t0$1 = onTapParam, t0$1 == null ? this.onTap : t0$1)});
    }
    [_toJson]() {
      let json = new (T.IdentityMapOfStringL$dynamic()).new();
      function addIfPresent(fieldName, value) {
        if (value != null) {
          json[$_set](fieldName, value);
        }
      }
      dart.fn(addIfPresent, T.StringLAnddynamicTovoid());
      addIfPresent("title", this.title);
      addIfPresent("snippet", this.snippet);
      addIfPresent("anchor", marker._offsetToJson(this.anchor));
      return json;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      let typedOther = T.InfoWindowL().as(other);
      return this.title == typedOther.title && this.snippet == typedOther.snippet && dart.equals(this.anchor, typedOther.anchor);
    }
    get hashCode() {
      return ui.hashValues(dart.hashCode(this.title), this.snippet, this.anchor);
    }
    toString() {
      return "InfoWindow{title: " + dart.str(this.title) + ", snippet: " + dart.str(this.snippet) + ", anchor: " + dart.str(this.anchor) + "}";
    }
  };
  (marker.InfoWindow.new = function(opts) {
    let title = opts && 'title' in opts ? opts.title : null;
    let snippet = opts && 'snippet' in opts ? opts.snippet : null;
    let anchor = opts && 'anchor' in opts ? opts.anchor : C[16] || CT.C16;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    this[title$] = title;
    this[snippet$] = snippet;
    this[anchor$] = anchor;
    this[onTap$1] = onTap;
    ;
  }).prototype = marker.InfoWindow.prototype;
  dart.addTypeTests(marker.InfoWindow);
  dart.addTypeCaches(marker.InfoWindow);
  dart.setMethodSignature(marker.InfoWindow, () => ({
    __proto__: dart.getMethods(marker.InfoWindow.__proto__),
    copyWith: dart.fnType(dart.legacy(marker.InfoWindow), [], {anchorParam: dart.legacy(ui.Offset), onTapParam: dart.legacy(dart.fnType(dart.void, [])), snippetParam: dart.legacy(core.String), titleParam: dart.legacy(core.String)}, {}),
    [_toJson]: dart.fnType(dart.dynamic, []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(marker.InfoWindow, () => ({
    __proto__: dart.getGetters(marker.InfoWindow.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(marker.InfoWindow, I[11]);
  dart.setFieldSignature(marker.InfoWindow, () => ({
    __proto__: dart.getFields(marker.InfoWindow.__proto__),
    title: dart.finalFieldType(dart.legacy(core.String)),
    snippet: dart.finalFieldType(dart.legacy(core.String)),
    anchor: dart.finalFieldType(dart.legacy(ui.Offset)),
    onTap: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [])))
  }));
  dart.defineExtensionMethods(marker.InfoWindow, ['_equals', 'toString']);
  dart.defineExtensionAccessors(marker.InfoWindow, ['hashCode']);
  dart.defineLazy(marker.InfoWindow, {
    /*marker.InfoWindow.noText*/get noText() {
      return C[17] || CT.C17;
    }
  }, true);
  var value$2 = dart.privateName(marker, "MarkerId.value");
  marker.MarkerId = class MarkerId extends core.Object {
    get value() {
      return this[value$2];
    }
    set value(value) {
      super.value = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      let typedOther = T.MarkerIdL().as(other);
      return this.value == typedOther.value;
    }
    get hashCode() {
      return dart.hashCode(this.value);
    }
    toString() {
      return "MarkerId{value: " + dart.str(this.value) + "}";
    }
  };
  (marker.MarkerId.new = function(value) {
    this[value$2] = value;
    if (!(value != null)) dart.assertFailed(null, I[12], 110, 33, "value != null");
    ;
  }).prototype = marker.MarkerId.prototype;
  dart.addTypeTests(marker.MarkerId);
  dart.addTypeCaches(marker.MarkerId);
  dart.setMethodSignature(marker.MarkerId, () => ({
    __proto__: dart.getMethods(marker.MarkerId.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(marker.MarkerId, () => ({
    __proto__: dart.getGetters(marker.MarkerId.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(marker.MarkerId, I[11]);
  dart.setFieldSignature(marker.MarkerId, () => ({
    __proto__: dart.getFields(marker.MarkerId.__proto__),
    value: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(marker.MarkerId, ['_equals', 'toString']);
  dart.defineExtensionAccessors(marker.MarkerId, ['hashCode']);
  var markerId$ = dart.privateName(marker, "Marker.markerId");
  var alpha$ = dart.privateName(marker, "Marker.alpha");
  var anchor$0 = dart.privateName(marker, "Marker.anchor");
  var consumeTapEvents$1 = dart.privateName(marker, "Marker.consumeTapEvents");
  var draggable$ = dart.privateName(marker, "Marker.draggable");
  var flat$ = dart.privateName(marker, "Marker.flat");
  var icon$ = dart.privateName(marker, "Marker.icon");
  var infoWindow$ = dart.privateName(marker, "Marker.infoWindow");
  var position$ = dart.privateName(marker, "Marker.position");
  var rotation$ = dart.privateName(marker, "Marker.rotation");
  var visible$2 = dart.privateName(marker, "Marker.visible");
  var zIndex$2 = dart.privateName(marker, "Marker.zIndex");
  var onTap$2 = dart.privateName(marker, "Marker.onTap");
  var onDragEnd$ = dart.privateName(marker, "Marker.onDragEnd");
  var BitmapDescriptor__json = dart.privateName(bitmap, "BitmapDescriptor._json");
  var LatLng_longitude = dart.privateName(location, "LatLng.longitude");
  var LatLng_latitude = dart.privateName(location, "LatLng.latitude");
  marker.Marker = class Marker extends core.Object {
    get markerId() {
      return this[markerId$];
    }
    set markerId(value) {
      super.markerId = value;
    }
    get alpha() {
      return this[alpha$];
    }
    set alpha(value) {
      super.alpha = value;
    }
    get anchor() {
      return this[anchor$0];
    }
    set anchor(value) {
      super.anchor = value;
    }
    get consumeTapEvents() {
      return this[consumeTapEvents$1];
    }
    set consumeTapEvents(value) {
      super.consumeTapEvents = value;
    }
    get draggable() {
      return this[draggable$];
    }
    set draggable(value) {
      super.draggable = value;
    }
    get flat() {
      return this[flat$];
    }
    set flat(value) {
      super.flat = value;
    }
    get icon() {
      return this[icon$];
    }
    set icon(value) {
      super.icon = value;
    }
    get infoWindow() {
      return this[infoWindow$];
    }
    set infoWindow(value) {
      super.infoWindow = value;
    }
    get position() {
      return this[position$];
    }
    set position(value) {
      super.position = value;
    }
    get rotation() {
      return this[rotation$];
    }
    set rotation(value) {
      super.rotation = value;
    }
    get visible() {
      return this[visible$2];
    }
    set visible(value) {
      super.visible = value;
    }
    get zIndex() {
      return this[zIndex$2];
    }
    set zIndex(value) {
      super.zIndex = value;
    }
    get onTap() {
      return this[onTap$2];
    }
    set onTap(value) {
      super.onTap = value;
    }
    get onDragEnd() {
      return this[onDragEnd$];
    }
    set onDragEnd(value) {
      super.onDragEnd = value;
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10;
      let alphaParam = opts && 'alphaParam' in opts ? opts.alphaParam : null;
      let anchorParam = opts && 'anchorParam' in opts ? opts.anchorParam : null;
      let consumeTapEventsParam = opts && 'consumeTapEventsParam' in opts ? opts.consumeTapEventsParam : null;
      let draggableParam = opts && 'draggableParam' in opts ? opts.draggableParam : null;
      let flatParam = opts && 'flatParam' in opts ? opts.flatParam : null;
      let iconParam = opts && 'iconParam' in opts ? opts.iconParam : null;
      let infoWindowParam = opts && 'infoWindowParam' in opts ? opts.infoWindowParam : null;
      let positionParam = opts && 'positionParam' in opts ? opts.positionParam : null;
      let rotationParam = opts && 'rotationParam' in opts ? opts.rotationParam : null;
      let visibleParam = opts && 'visibleParam' in opts ? opts.visibleParam : null;
      let zIndexParam = opts && 'zIndexParam' in opts ? opts.zIndexParam : null;
      let onTapParam = opts && 'onTapParam' in opts ? opts.onTapParam : null;
      let onDragEndParam = opts && 'onDragEndParam' in opts ? opts.onDragEndParam : null;
      return new marker.Marker.new({markerId: this.markerId, alpha: (t0 = alphaParam, t0 == null ? this.alpha : t0), anchor: (t0$ = anchorParam, t0$ == null ? this.anchor : t0$), consumeTapEvents: (t0$0 = consumeTapEventsParam, t0$0 == null ? this.consumeTapEvents : t0$0), draggable: (t0$1 = draggableParam, t0$1 == null ? this.draggable : t0$1), flat: (t0$2 = flatParam, t0$2 == null ? this.flat : t0$2), icon: (t0$3 = iconParam, t0$3 == null ? this.icon : t0$3), infoWindow: (t0$4 = infoWindowParam, t0$4 == null ? this.infoWindow : t0$4), position: (t0$5 = positionParam, t0$5 == null ? this.position : t0$5), rotation: (t0$6 = rotationParam, t0$6 == null ? this.rotation : t0$6), visible: (t0$7 = visibleParam, t0$7 == null ? this.visible : t0$7), zIndex: (t0$8 = zIndexParam, t0$8 == null ? this.zIndex : t0$8), onTap: (t0$9 = onTapParam, t0$9 == null ? this.onTap : t0$9), onDragEnd: (t0$10 = onDragEndParam, t0$10 == null ? this.onDragEnd : t0$10)});
    }
    clone() {
      return this.copyWith();
    }
    toJson() {
      let t0, t0$, t0$0;
      let json = new (T.IdentityMapOfStringL$dynamic()).new();
      function addIfPresent(fieldName, value) {
        if (value != null) {
          json[$_set](fieldName, value);
        }
      }
      dart.fn(addIfPresent, T.StringLAnddynamicTovoid());
      addIfPresent("markerId", this.markerId.value);
      addIfPresent("alpha", this.alpha);
      addIfPresent("anchor", marker._offsetToJson(this.anchor));
      addIfPresent("consumeTapEvents", this.consumeTapEvents);
      addIfPresent("draggable", this.draggable);
      addIfPresent("flat", this.flat);
      addIfPresent("icon", (t0 = this.icon, t0 == null ? null : t0.toJson()));
      addIfPresent("infoWindow", (t0$ = this.infoWindow, t0$ == null ? null : t0$[_toJson]()));
      addIfPresent("position", (t0$0 = this.position, t0$0 == null ? null : t0$0.toJson()));
      addIfPresent("rotation", this.rotation);
      addIfPresent("visible", this.visible);
      addIfPresent("zIndex", this.zIndex);
      return json;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      let typedOther = T.MarkerL().as(other);
      return dart.equals(this.markerId, typedOther.markerId) && this.alpha == typedOther.alpha && dart.equals(this.anchor, typedOther.anchor) && this.consumeTapEvents == typedOther.consumeTapEvents && this.draggable == typedOther.draggable && this.flat == typedOther.flat && dart.equals(this.icon, typedOther.icon) && dart.equals(this.infoWindow, typedOther.infoWindow) && dart.equals(this.position, typedOther.position) && this.rotation == typedOther.rotation && this.visible == typedOther.visible && this.zIndex == typedOther.zIndex;
    }
    get hashCode() {
      return dart.hashCode(this.markerId);
    }
    toString() {
      return "Marker{markerId: " + dart.str(this.markerId) + ", alpha: " + dart.str(this.alpha) + ", anchor: " + dart.str(this.anchor) + ", " + "consumeTapEvents: " + dart.str(this.consumeTapEvents) + ", draggable: " + dart.str(this.draggable) + ", flat: " + dart.str(this.flat) + ", " + "icon: " + dart.str(this.icon) + ", infoWindow: " + dart.str(this.infoWindow) + ", position: " + dart.str(this.position) + ", rotation: " + dart.str(this.rotation) + ", " + "visible: " + dart.str(this.visible) + ", zIndex: " + dart.str(this.zIndex) + ", onTap: " + dart.str(this.onTap) + "}";
    }
  };
  (marker.Marker.new = function(opts) {
    let markerId = opts && 'markerId' in opts ? opts.markerId : null;
    let alpha = opts && 'alpha' in opts ? opts.alpha : 1;
    let anchor = opts && 'anchor' in opts ? opts.anchor : C[18] || CT.C18;
    let consumeTapEvents = opts && 'consumeTapEvents' in opts ? opts.consumeTapEvents : false;
    let draggable = opts && 'draggable' in opts ? opts.draggable : false;
    let flat = opts && 'flat' in opts ? opts.flat : false;
    let icon = opts && 'icon' in opts ? opts.icon : C[19] || CT.C19;
    let infoWindow = opts && 'infoWindow' in opts ? opts.infoWindow : C[17] || CT.C17;
    let position = opts && 'position' in opts ? opts.position : C[21] || CT.C21;
    let rotation = opts && 'rotation' in opts ? opts.rotation : 0;
    let visible = opts && 'visible' in opts ? opts.visible : true;
    let zIndex = opts && 'zIndex' in opts ? opts.zIndex : 0;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    let onDragEnd = opts && 'onDragEnd' in opts ? opts.onDragEnd : null;
    this[markerId$] = markerId;
    this[alpha$] = alpha;
    this[anchor$0] = anchor;
    this[consumeTapEvents$1] = consumeTapEvents;
    this[draggable$] = draggable;
    this[flat$] = flat;
    this[icon$] = icon;
    this[infoWindow$] = infoWindow;
    this[position$] = position;
    this[rotation$] = rotation;
    this[visible$2] = visible;
    this[zIndex$2] = zIndex;
    this[onTap$2] = onTap;
    this[onDragEnd$] = onDragEnd;
    if (!(alpha == null || 0.0 <= dart.notNull(alpha) && dart.notNull(alpha) <= 1.0)) dart.assertFailed(null, I[12], 173, 15, "alpha == null || (0.0 <= alpha && alpha <= 1.0)");
    ;
  }).prototype = marker.Marker.prototype;
  dart.addTypeTests(marker.Marker);
  dart.addTypeCaches(marker.Marker);
  dart.setMethodSignature(marker.Marker, () => ({
    __proto__: dart.getMethods(marker.Marker.__proto__),
    copyWith: dart.fnType(dart.legacy(marker.Marker), [], {alphaParam: dart.legacy(core.double), anchorParam: dart.legacy(ui.Offset), consumeTapEventsParam: dart.legacy(core.bool), draggableParam: dart.legacy(core.bool), flatParam: dart.legacy(core.bool), iconParam: dart.legacy(bitmap.BitmapDescriptor), infoWindowParam: dart.legacy(marker.InfoWindow), onDragEndParam: dart.legacy(dart.fnType(dart.void, [dart.legacy(location.LatLng)])), onTapParam: dart.legacy(dart.fnType(dart.void, [])), positionParam: dart.legacy(location.LatLng), rotationParam: dart.legacy(core.double), visibleParam: dart.legacy(core.bool), zIndexParam: dart.legacy(core.double)}, {}),
    clone: dart.fnType(dart.legacy(marker.Marker), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(marker.Marker, () => ({
    __proto__: dart.getGetters(marker.Marker.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(marker.Marker, I[11]);
  dart.setFieldSignature(marker.Marker, () => ({
    __proto__: dart.getFields(marker.Marker.__proto__),
    markerId: dart.finalFieldType(dart.legacy(marker.MarkerId)),
    alpha: dart.finalFieldType(dart.legacy(core.double)),
    anchor: dart.finalFieldType(dart.legacy(ui.Offset)),
    consumeTapEvents: dart.finalFieldType(dart.legacy(core.bool)),
    draggable: dart.finalFieldType(dart.legacy(core.bool)),
    flat: dart.finalFieldType(dart.legacy(core.bool)),
    icon: dart.finalFieldType(dart.legacy(bitmap.BitmapDescriptor)),
    infoWindow: dart.finalFieldType(dart.legacy(marker.InfoWindow)),
    position: dart.finalFieldType(dart.legacy(location.LatLng)),
    rotation: dart.finalFieldType(dart.legacy(core.double)),
    visible: dart.finalFieldType(dart.legacy(core.bool)),
    zIndex: dart.finalFieldType(dart.legacy(core.double)),
    onTap: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, []))),
    onDragEnd: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(location.LatLng)])))
  }));
  dart.defineExtensionMethods(marker.Marker, ['_equals', 'toString']);
  dart.defineExtensionAccessors(marker.Marker, ['hashCode']);
  marker._offsetToJson = function _offsetToJson(offset) {
    if (offset == null) {
      return null;
    }
    return [offset.dx, offset.dy];
  };
  marker$.keyByMarkerId = function keyByMarkerId(markers) {
    if (markers == null) {
      return new (T.LinkedMapOfMarkerIdL$MarkerL()).new();
    }
    return T.MapOfMarkerIdL$MarkerL().fromEntries(markers[$map](T.MapEntryLOfMarkerIdL$MarkerL(), dart.fn(marker => new (T.MapEntryOfMarkerIdL$MarkerL()).__(marker.markerId, marker.clone()), T.MarkerLToMapEntryLOfMarkerIdL$MarkerL())));
  };
  marker$.serializeMarkerSet = function serializeMarkerSet(markers) {
    if (markers == null) {
      return null;
    }
    return markers[$map](T.MapLOfStringL$dynamic(), dart.fn(m => m.toJson(), T.MarkerLToMapLOfStringL$dynamic()))[$toList]();
  };
  var markersToAdd = dart.privateName(marker_updates, "MarkerUpdates.markersToAdd");
  var markerIdsToRemove = dart.privateName(marker_updates, "MarkerUpdates.markerIdsToRemove");
  var markersToChange = dart.privateName(marker_updates, "MarkerUpdates.markersToChange");
  marker_updates.MarkerUpdates = class MarkerUpdates extends core.Object {
    get markersToAdd() {
      return this[markersToAdd];
    }
    set markersToAdd(value) {
      this[markersToAdd] = value;
    }
    get markerIdsToRemove() {
      return this[markerIdsToRemove];
    }
    set markerIdsToRemove(value) {
      this[markerIdsToRemove] = value;
    }
    get markersToChange() {
      return this[markersToChange];
    }
    set markersToChange(value) {
      this[markersToChange] = value;
    }
    toJson() {
      let updateMap = new (T.IdentityMapOfStringL$dynamic()).new();
      function addIfNonNull(fieldName, value) {
        if (value != null) {
          updateMap[$_set](fieldName, value);
        }
      }
      dart.fn(addIfNonNull, T.StringLAnddynamicTovoid());
      addIfNonNull("markersToAdd", marker$.serializeMarkerSet(this.markersToAdd));
      addIfNonNull("markersToChange", marker$.serializeMarkerSet(this.markersToChange));
      addIfNonNull("markerIdsToRemove", this.markerIdsToRemove[$map](dart.dynamic, dart.fn(m => m.value, T.MarkerIdLToStringL()))[$toList]());
      return updateMap;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      let typedOther = T.MarkerUpdatesL().as(other);
      return dart.test(collections.setEquals(T.MarkerL(), this.markersToAdd, typedOther.markersToAdd)) && dart.test(collections.setEquals(T.MarkerIdL(), this.markerIdsToRemove, typedOther.markerIdsToRemove)) && dart.test(collections.setEquals(T.MarkerL(), this.markersToChange, typedOther.markersToChange));
    }
    get hashCode() {
      return ui.hashValues(this.markersToAdd, this.markerIdsToRemove, this.markersToChange);
    }
    toString() {
      return "_MarkerUpdates{markersToAdd: " + dart.str(this.markersToAdd) + ", " + "markerIdsToRemove: " + dart.str(this.markerIdsToRemove) + ", " + "markersToChange: " + dart.str(this.markersToChange) + "}";
    }
  };
  (marker_updates.MarkerUpdates.from = function(previous, current) {
    this[markersToAdd] = null;
    this[markerIdsToRemove] = null;
    this[markersToChange] = null;
    if (previous == null) {
      previous = new (T._IdentityHashSetOfMarkerL()).new();
    }
    if (current == null) {
      current = new (T._IdentityHashSetOfMarkerL()).new();
    }
    let previousMarkers = marker$.keyByMarkerId(previous);
    let currentMarkers = marker$.keyByMarkerId(current);
    let prevMarkerIds = previousMarkers[$keys][$toSet]();
    let currentMarkerIds = currentMarkers[$keys][$toSet]();
    function idToCurrentMarker(id) {
      return currentMarkers[$_get](id);
    }
    dart.fn(idToCurrentMarker, T.MarkerIdLToMarkerL());
    let _markerIdsToRemove = prevMarkerIds.difference(currentMarkerIds);
    let _markersToAdd = currentMarkerIds.difference(prevMarkerIds)[$map](T.MarkerL(), idToCurrentMarker)[$toSet]();
    function hasChanged(current) {
      let previous = previousMarkers[$_get](current.markerId);
      return !dart.equals(current, previous);
    }
    dart.fn(hasChanged, T.MarkerLToboolL());
    let _markersToChange = currentMarkerIds.intersection(prevMarkerIds)[$map](T.MarkerL(), idToCurrentMarker)[$where](hasChanged)[$toSet]();
    this.markersToAdd = _markersToAdd;
    this.markerIdsToRemove = _markerIdsToRemove;
    this.markersToChange = _markersToChange;
  }).prototype = marker_updates.MarkerUpdates.prototype;
  dart.addTypeTests(marker_updates.MarkerUpdates);
  dart.addTypeCaches(marker_updates.MarkerUpdates);
  dart.setMethodSignature(marker_updates.MarkerUpdates, () => ({
    __proto__: dart.getMethods(marker_updates.MarkerUpdates.__proto__),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(marker_updates.MarkerUpdates, () => ({
    __proto__: dart.getGetters(marker_updates.MarkerUpdates.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(marker_updates.MarkerUpdates, I[13]);
  dart.setFieldSignature(marker_updates.MarkerUpdates, () => ({
    __proto__: dart.getFields(marker_updates.MarkerUpdates.__proto__),
    markersToAdd: dart.fieldType(dart.legacy(core.Set$(dart.legacy(marker.Marker)))),
    markerIdsToRemove: dart.fieldType(dart.legacy(core.Set$(dart.legacy(marker.MarkerId)))),
    markersToChange: dart.fieldType(dart.legacy(core.Set$(dart.legacy(marker.Marker))))
  }));
  dart.defineExtensionMethods(marker_updates.MarkerUpdates, ['_equals', 'toString']);
  dart.defineExtensionAccessors(marker_updates.MarkerUpdates, ['hashCode']);
  var value$3 = dart.privateName(circle, "CircleId.value");
  circle.CircleId = class CircleId extends core.Object {
    get value() {
      return this[value$3];
    }
    set value(value) {
      super.value = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      let typedOther = T.CircleIdL().as(other);
      return this.value == typedOther.value;
    }
    get hashCode() {
      return dart.hashCode(this.value);
    }
    toString() {
      return "CircleId{value: " + dart.str(this.value) + "}";
    }
  };
  (circle.CircleId.new = function(value) {
    this[value$3] = value;
    if (!(value != null)) dart.assertFailed(null, I[14], 17, 33, "value != null");
    ;
  }).prototype = circle.CircleId.prototype;
  dart.addTypeTests(circle.CircleId);
  dart.addTypeCaches(circle.CircleId);
  dart.setMethodSignature(circle.CircleId, () => ({
    __proto__: dart.getMethods(circle.CircleId.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(circle.CircleId, () => ({
    __proto__: dart.getGetters(circle.CircleId.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(circle.CircleId, I[15]);
  dart.setFieldSignature(circle.CircleId, () => ({
    __proto__: dart.getFields(circle.CircleId.__proto__),
    value: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(circle.CircleId, ['_equals', 'toString']);
  dart.defineExtensionAccessors(circle.CircleId, ['hashCode']);
  var circleId$ = dart.privateName(circle, "Circle.circleId");
  var consumeTapEvents$2 = dart.privateName(circle, "Circle.consumeTapEvents");
  var fillColor$0 = dart.privateName(circle, "Circle.fillColor");
  var center$ = dart.privateName(circle, "Circle.center");
  var radius$ = dart.privateName(circle, "Circle.radius");
  var strokeColor$0 = dart.privateName(circle, "Circle.strokeColor");
  var strokeWidth$0 = dart.privateName(circle, "Circle.strokeWidth");
  var visible$3 = dart.privateName(circle, "Circle.visible");
  var zIndex$3 = dart.privateName(circle, "Circle.zIndex");
  var onTap$3 = dart.privateName(circle, "Circle.onTap");
  circle.Circle = class Circle extends core.Object {
    get circleId() {
      return this[circleId$];
    }
    set circleId(value) {
      super.circleId = value;
    }
    get consumeTapEvents() {
      return this[consumeTapEvents$2];
    }
    set consumeTapEvents(value) {
      super.consumeTapEvents = value;
    }
    get fillColor() {
      return this[fillColor$0];
    }
    set fillColor(value) {
      super.fillColor = value;
    }
    get center() {
      return this[center$];
    }
    set center(value) {
      super.center = value;
    }
    get radius() {
      return this[radius$];
    }
    set radius(value) {
      super.radius = value;
    }
    get strokeColor() {
      return this[strokeColor$0];
    }
    set strokeColor(value) {
      super.strokeColor = value;
    }
    get strokeWidth() {
      return this[strokeWidth$0];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    get visible() {
      return this[visible$3];
    }
    set visible(value) {
      super.visible = value;
    }
    get zIndex() {
      return this[zIndex$3];
    }
    set zIndex(value) {
      super.zIndex = value;
    }
    get onTap() {
      return this[onTap$3];
    }
    set onTap(value) {
      super.onTap = value;
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6;
      let consumeTapEventsParam = opts && 'consumeTapEventsParam' in opts ? opts.consumeTapEventsParam : null;
      let fillColorParam = opts && 'fillColorParam' in opts ? opts.fillColorParam : null;
      let centerParam = opts && 'centerParam' in opts ? opts.centerParam : null;
      let radiusParam = opts && 'radiusParam' in opts ? opts.radiusParam : null;
      let strokeColorParam = opts && 'strokeColorParam' in opts ? opts.strokeColorParam : null;
      let strokeWidthParam = opts && 'strokeWidthParam' in opts ? opts.strokeWidthParam : null;
      let visibleParam = opts && 'visibleParam' in opts ? opts.visibleParam : null;
      let zIndexParam = opts && 'zIndexParam' in opts ? opts.zIndexParam : null;
      let onTapParam = opts && 'onTapParam' in opts ? opts.onTapParam : null;
      return new circle.Circle.new({circleId: this.circleId, consumeTapEvents: (t0 = consumeTapEventsParam, t0 == null ? this.consumeTapEvents : t0), fillColor: (t0$ = fillColorParam, t0$ == null ? this.fillColor : t0$), center: (t0$0 = centerParam, t0$0 == null ? this.center : t0$0), radius: (t0$1 = radiusParam, t0$1 == null ? this.radius : t0$1), strokeColor: (t0$2 = strokeColorParam, t0$2 == null ? this.strokeColor : t0$2), strokeWidth: (t0$3 = strokeWidthParam, t0$3 == null ? this.strokeWidth : t0$3), visible: (t0$4 = visibleParam, t0$4 == null ? this.visible : t0$4), zIndex: (t0$5 = zIndexParam, t0$5 == null ? this.zIndex : t0$5), onTap: (t0$6 = onTapParam, t0$6 == null ? this.onTap : t0$6)});
    }
    clone() {
      return this.copyWith();
    }
    toJson() {
      let json = new (T.IdentityMapOfStringL$dynamic()).new();
      function addIfPresent(fieldName, value) {
        if (value != null) {
          json[$_set](fieldName, value);
        }
      }
      dart.fn(addIfPresent, T.StringLAnddynamicTovoid());
      addIfPresent("circleId", this.circleId.value);
      addIfPresent("consumeTapEvents", this.consumeTapEvents);
      addIfPresent("fillColor", this.fillColor.value);
      addIfPresent("center", this.center.toJson());
      addIfPresent("radius", this.radius);
      addIfPresent("strokeColor", this.strokeColor.value);
      addIfPresent("strokeWidth", this.strokeWidth);
      addIfPresent("visible", this.visible);
      addIfPresent("zIndex", this.zIndex);
      return json;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      let typedOther = T.CircleL().as(other);
      return dart.equals(this.circleId, typedOther.circleId) && this.consumeTapEvents == typedOther.consumeTapEvents && dart.equals(this.fillColor, typedOther.fillColor) && dart.equals(this.center, typedOther.center) && this.radius == typedOther.radius && dart.equals(this.strokeColor, typedOther.strokeColor) && this.strokeWidth == typedOther.strokeWidth && this.visible == typedOther.visible && this.zIndex == typedOther.zIndex;
    }
    get hashCode() {
      return dart.hashCode(this.circleId);
    }
  };
  (circle.Circle.new = function(opts) {
    let circleId = opts && 'circleId' in opts ? opts.circleId : null;
    let consumeTapEvents = opts && 'consumeTapEvents' in opts ? opts.consumeTapEvents : false;
    let fillColor = opts && 'fillColor' in opts ? opts.fillColor : C[22] || CT.C22;
    let center = opts && 'center' in opts ? opts.center : C[21] || CT.C21;
    let radius = opts && 'radius' in opts ? opts.radius : 0;
    let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : C[9] || CT.C9;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 10;
    let visible = opts && 'visible' in opts ? opts.visible : true;
    let zIndex = opts && 'zIndex' in opts ? opts.zIndex : 0;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    this[circleId$] = circleId;
    this[consumeTapEvents$2] = consumeTapEvents;
    this[fillColor$0] = fillColor;
    this[center$] = center;
    this[radius$] = radius;
    this[strokeColor$0] = strokeColor;
    this[strokeWidth$0] = strokeWidth;
    this[visible$3] = visible;
    this[zIndex$3] = zIndex;
    this[onTap$3] = onTap;
    ;
  }).prototype = circle.Circle.prototype;
  dart.addTypeTests(circle.Circle);
  dart.addTypeCaches(circle.Circle);
  dart.setMethodSignature(circle.Circle, () => ({
    __proto__: dart.getMethods(circle.Circle.__proto__),
    copyWith: dart.fnType(dart.legacy(circle.Circle), [], {centerParam: dart.legacy(location.LatLng), consumeTapEventsParam: dart.legacy(core.bool), fillColorParam: dart.legacy(ui.Color), onTapParam: dart.legacy(dart.fnType(dart.void, [])), radiusParam: dart.legacy(core.double), strokeColorParam: dart.legacy(ui.Color), strokeWidthParam: dart.legacy(core.int), visibleParam: dart.legacy(core.bool), zIndexParam: dart.legacy(core.int)}, {}),
    clone: dart.fnType(dart.legacy(circle.Circle), []),
    toJson: dart.fnType(dart.dynamic, []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(circle.Circle, () => ({
    __proto__: dart.getGetters(circle.Circle.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(circle.Circle, I[15]);
  dart.setFieldSignature(circle.Circle, () => ({
    __proto__: dart.getFields(circle.Circle.__proto__),
    circleId: dart.finalFieldType(dart.legacy(circle.CircleId)),
    consumeTapEvents: dart.finalFieldType(dart.legacy(core.bool)),
    fillColor: dart.finalFieldType(dart.legacy(ui.Color)),
    center: dart.finalFieldType(dart.legacy(location.LatLng)),
    radius: dart.finalFieldType(dart.legacy(core.double)),
    strokeColor: dart.finalFieldType(dart.legacy(ui.Color)),
    strokeWidth: dart.finalFieldType(dart.legacy(core.int)),
    visible: dart.finalFieldType(dart.legacy(core.bool)),
    zIndex: dart.finalFieldType(dart.legacy(core.int)),
    onTap: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [])))
  }));
  dart.defineExtensionMethods(circle.Circle, ['_equals']);
  dart.defineExtensionAccessors(circle.Circle, ['hashCode']);
  circle$.keyByCircleId = function keyByCircleId(circles) {
    if (circles == null) {
      return new (T.LinkedMapOfCircleIdL$CircleL()).new();
    }
    return T.MapOfCircleIdL$CircleL().fromEntries(circles[$map](T.MapEntryLOfCircleIdL$CircleL(), dart.fn(circle => new (T.MapEntryOfCircleIdL$CircleL()).__(circle.circleId, circle.clone()), T.CircleLToMapEntryLOfCircleIdL$CircleL())));
  };
  circle$.serializeCircleSet = function serializeCircleSet(circles) {
    if (circles == null) {
      return null;
    }
    return circles[$map](T.MapLOfStringL$dynamic(), dart.fn(p => T.MapLOfStringL$dynamic().as(p.toJson()), T.CircleLToMapLOfStringL$dynamic()))[$toList]();
  };
  var circlesToAdd = dart.privateName(circle_updates, "CircleUpdates.circlesToAdd");
  var circleIdsToRemove = dart.privateName(circle_updates, "CircleUpdates.circleIdsToRemove");
  var circlesToChange = dart.privateName(circle_updates, "CircleUpdates.circlesToChange");
  circle_updates.CircleUpdates = class CircleUpdates extends core.Object {
    get circlesToAdd() {
      return this[circlesToAdd];
    }
    set circlesToAdd(value) {
      this[circlesToAdd] = value;
    }
    get circleIdsToRemove() {
      return this[circleIdsToRemove];
    }
    set circleIdsToRemove(value) {
      this[circleIdsToRemove] = value;
    }
    get circlesToChange() {
      return this[circlesToChange];
    }
    set circlesToChange(value) {
      this[circlesToChange] = value;
    }
    toJson() {
      let updateMap = new (T.IdentityMapOfStringL$dynamic()).new();
      function addIfNonNull(fieldName, value) {
        if (value != null) {
          updateMap[$_set](fieldName, value);
        }
      }
      dart.fn(addIfNonNull, T.StringLAnddynamicTovoid());
      addIfNonNull("circlesToAdd", circle$.serializeCircleSet(this.circlesToAdd));
      addIfNonNull("circlesToChange", circle$.serializeCircleSet(this.circlesToChange));
      addIfNonNull("circleIdsToRemove", this.circleIdsToRemove[$map](dart.dynamic, dart.fn(m => m.value, T.CircleIdLToStringL()))[$toList]());
      return updateMap;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      let typedOther = T.CircleUpdatesL().as(other);
      return dart.test(collections.setEquals(T.CircleL(), this.circlesToAdd, typedOther.circlesToAdd)) && dart.test(collections.setEquals(T.CircleIdL(), this.circleIdsToRemove, typedOther.circleIdsToRemove)) && dart.test(collections.setEquals(T.CircleL(), this.circlesToChange, typedOther.circlesToChange));
    }
    get hashCode() {
      return ui.hashValues(this.circlesToAdd, this.circleIdsToRemove, this.circlesToChange);
    }
    toString() {
      return "_CircleUpdates{circlesToAdd: " + dart.str(this.circlesToAdd) + ", " + "circleIdsToRemove: " + dart.str(this.circleIdsToRemove) + ", " + "circlesToChange: " + dart.str(this.circlesToChange) + "}";
    }
  };
  (circle_updates.CircleUpdates.from = function(previous, current) {
    this[circlesToAdd] = null;
    this[circleIdsToRemove] = null;
    this[circlesToChange] = null;
    if (previous == null) {
      previous = new (T._IdentityHashSetOfCircleL()).new();
    }
    if (current == null) {
      current = new (T._IdentityHashSetOfCircleL()).new();
    }
    let previousCircles = circle$.keyByCircleId(previous);
    let currentCircles = circle$.keyByCircleId(current);
    let prevCircleIds = previousCircles[$keys][$toSet]();
    let currentCircleIds = currentCircles[$keys][$toSet]();
    function idToCurrentCircle(id) {
      return currentCircles[$_get](id);
    }
    dart.fn(idToCurrentCircle, T.CircleIdLToCircleL());
    let _circleIdsToRemove = prevCircleIds.difference(currentCircleIds);
    let _circlesToAdd = currentCircleIds.difference(prevCircleIds)[$map](T.CircleL(), idToCurrentCircle)[$toSet]();
    function hasChanged(current) {
      let previous = previousCircles[$_get](current.circleId);
      return !dart.equals(current, previous);
    }
    dart.fn(hasChanged, T.CircleLToboolL());
    let _circlesToChange = currentCircleIds.intersection(prevCircleIds)[$map](T.CircleL(), idToCurrentCircle)[$where](hasChanged)[$toSet]();
    this.circlesToAdd = _circlesToAdd;
    this.circleIdsToRemove = _circleIdsToRemove;
    this.circlesToChange = _circlesToChange;
  }).prototype = circle_updates.CircleUpdates.prototype;
  dart.addTypeTests(circle_updates.CircleUpdates);
  dart.addTypeCaches(circle_updates.CircleUpdates);
  dart.setMethodSignature(circle_updates.CircleUpdates, () => ({
    __proto__: dart.getMethods(circle_updates.CircleUpdates.__proto__),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(circle_updates.CircleUpdates, () => ({
    __proto__: dart.getGetters(circle_updates.CircleUpdates.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(circle_updates.CircleUpdates, I[16]);
  dart.setFieldSignature(circle_updates.CircleUpdates, () => ({
    __proto__: dart.getFields(circle_updates.CircleUpdates.__proto__),
    circlesToAdd: dart.fieldType(dart.legacy(core.Set$(dart.legacy(circle.Circle)))),
    circleIdsToRemove: dart.fieldType(dart.legacy(core.Set$(dart.legacy(circle.CircleId)))),
    circlesToChange: dart.fieldType(dart.legacy(core.Set$(dart.legacy(circle.Circle))))
  }));
  dart.defineExtensionMethods(circle_updates.CircleUpdates, ['_equals', 'toString']);
  dart.defineExtensionAccessors(circle_updates.CircleUpdates, ['hashCode']);
  var _json = dart.privateName(cap, "_json");
  const _json$ = Cap__json;
  cap.Cap = class Cap extends core.Object {
    get [_json]() {
      return this[_json$];
    }
    set [_json](value) {
      super[_json] = value;
    }
    static customCapFromBitmap(bitmapDescriptor, opts) {
      let refWidth = opts && 'refWidth' in opts ? opts.refWidth : 10;
      if (!(bitmapDescriptor != null)) dart.assertFailed(null, I[17], 46, 12, "bitmapDescriptor != null");
      if (!(dart.notNull(refWidth) > 0.0)) dart.assertFailed(null, I[17], 47, 12, "refWidth > 0.0");
      return new cap.Cap.__(["customCap", bitmapDescriptor.toJson(), refWidth]);
    }
    toJson() {
      return this[_json];
    }
  };
  (cap.Cap.__ = function(_json) {
    this[_json$] = _json;
    ;
  }).prototype = cap.Cap.prototype;
  dart.addTypeTests(cap.Cap);
  dart.addTypeCaches(cap.Cap);
  dart.setMethodSignature(cap.Cap, () => ({
    __proto__: dart.getMethods(cap.Cap.__proto__),
    toJson: dart.fnType(dart.dynamic, [])
  }));
  dart.setLibraryUri(cap.Cap, I[18]);
  dart.setFieldSignature(cap.Cap, () => ({
    __proto__: dart.getFields(cap.Cap.__proto__),
    [_json]: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineLazy(cap.Cap, {
    /*cap.Cap.buttCap*/get buttCap() {
      return C[10] || CT.C10;
    },
    /*cap.Cap.roundCap*/get roundCap() {
      return C[23] || CT.C23;
    },
    /*cap.Cap.squareCap*/get squareCap() {
      return C[25] || CT.C25;
    }
  }, true);
  var bearing$ = dart.privateName(camera, "CameraPosition.bearing");
  var target$ = dart.privateName(camera, "CameraPosition.target");
  var tilt$ = dart.privateName(camera, "CameraPosition.tilt");
  var zoom$ = dart.privateName(camera, "CameraPosition.zoom");
  camera.CameraPosition = class CameraPosition extends core.Object {
    get bearing() {
      return this[bearing$];
    }
    set bearing(value) {
      super.bearing = value;
    }
    get target() {
      return this[target$];
    }
    set target(value) {
      super.target = value;
    }
    get tilt() {
      return this[tilt$];
    }
    set tilt(value) {
      super.tilt = value;
    }
    get zoom() {
      return this[zoom$];
    }
    set zoom(value) {
      super.zoom = value;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["bearing", this.bearing, "target", this.target.toJson(), "tilt", this.tilt, "zoom", this.zoom]);
    }
    static fromMap(json) {
      if (json == null) {
        return null;
      }
      return new camera.CameraPosition.new({bearing: T.doubleL().as(dart.dsend(json, '_get', ["bearing"])), target: location.LatLng.fromJson(dart.dsend(json, '_get', ["target"])), tilt: T.doubleL().as(dart.dsend(json, '_get', ["tilt"])), zoom: T.doubleL().as(dart.dsend(json, '_get', ["zoom"]))});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(this.runtimeType, dart.runtimeType(other))) return false;
      let typedOther = T.CameraPositionL().as(other);
      return this.bearing == typedOther.bearing && dart.equals(this.target, typedOther.target) && this.tilt == typedOther.tilt && this.zoom == typedOther.zoom;
    }
    get hashCode() {
      return ui.hashValues(this.bearing, this.target, this.tilt, this.zoom);
    }
    toString() {
      return "CameraPosition(bearing: " + dart.str(this.bearing) + ", target: " + dart.str(this.target) + ", tilt: " + dart.str(this.tilt) + ", zoom: " + dart.str(this.zoom) + ")";
    }
  };
  (camera.CameraPosition.new = function(opts) {
    let bearing = opts && 'bearing' in opts ? opts.bearing : 0;
    let target = opts && 'target' in opts ? opts.target : null;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    let zoom = opts && 'zoom' in opts ? opts.zoom : 0;
    this[bearing$] = bearing;
    this[target$] = target;
    this[tilt$] = tilt;
    this[zoom$] = zoom;
    if (!(bearing != null)) dart.assertFailed(null, I[19], 25, 16, "bearing != null");
    if (!(target != null)) dart.assertFailed(null, I[19], 26, 16, "target != null");
    if (!(tilt != null)) dart.assertFailed(null, I[19], 27, 16, "tilt != null");
    if (!(zoom != null)) dart.assertFailed(null, I[19], 28, 16, "zoom != null");
    ;
  }).prototype = camera.CameraPosition.prototype;
  dart.addTypeTests(camera.CameraPosition);
  dart.addTypeCaches(camera.CameraPosition);
  dart.setMethodSignature(camera.CameraPosition, () => ({
    __proto__: dart.getMethods(camera.CameraPosition.__proto__),
    toMap: dart.fnType(dart.dynamic, []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(camera.CameraPosition, () => ({
    __proto__: dart.getGetters(camera.CameraPosition.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(camera.CameraPosition, I[20]);
  dart.setFieldSignature(camera.CameraPosition, () => ({
    __proto__: dart.getFields(camera.CameraPosition.__proto__),
    bearing: dart.finalFieldType(dart.legacy(core.double)),
    target: dart.finalFieldType(dart.legacy(location.LatLng)),
    tilt: dart.finalFieldType(dart.legacy(core.double)),
    zoom: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(camera.CameraPosition, ['_equals', 'toString']);
  dart.defineExtensionAccessors(camera.CameraPosition, ['hashCode']);
  var _json$0 = dart.privateName(camera, "_json");
  camera.CameraUpdate = class CameraUpdate extends core.Object {
    static newCameraPosition(cameraPosition) {
      return new camera.CameraUpdate.__(["newCameraPosition", cameraPosition.toMap()]);
    }
    static newLatLng(latLng) {
      return new camera.CameraUpdate.__(["newLatLng", latLng.toJson()]);
    }
    static newLatLngBounds(bounds, padding) {
      return new camera.CameraUpdate.__(["newLatLngBounds", bounds.toJson(), padding]);
    }
    static newLatLngZoom(latLng, zoom) {
      return new camera.CameraUpdate.__(["newLatLngZoom", latLng.toJson(), zoom]);
    }
    static scrollBy(dx, dy) {
      return new camera.CameraUpdate.__(["scrollBy", dx, dy]);
    }
    static zoomBy(amount, focus = null) {
      if (focus == null) {
        return new camera.CameraUpdate.__(["zoomBy", amount]);
      } else {
        return new camera.CameraUpdate.__(["zoomBy", amount, T.JSArrayOfdoubleL().of([focus.dx, focus.dy])]);
      }
    }
    static zoomIn() {
      return new camera.CameraUpdate.__(["zoomIn"]);
    }
    static zoomOut() {
      return new camera.CameraUpdate.__(["zoomOut"]);
    }
    static zoomTo(zoom) {
      return new camera.CameraUpdate.__(["zoomTo", zoom]);
    }
    toJson() {
      return this[_json$0];
    }
  };
  (camera.CameraUpdate.__ = function(_json) {
    this[_json$0] = _json;
    ;
  }).prototype = camera.CameraUpdate.prototype;
  dart.addTypeTests(camera.CameraUpdate);
  dart.addTypeCaches(camera.CameraUpdate);
  dart.setMethodSignature(camera.CameraUpdate, () => ({
    __proto__: dart.getMethods(camera.CameraUpdate.__proto__),
    toJson: dart.fnType(dart.dynamic, [])
  }));
  dart.setLibraryUri(camera.CameraUpdate, I[20]);
  dart.setFieldSignature(camera.CameraUpdate, () => ({
    __proto__: dart.getFields(camera.CameraUpdate.__proto__),
    [_json$0]: dart.finalFieldType(dart.dynamic)
  }));
  var _callbacks = dart.privateName(callbacks, "_callbacks");
  const _is_ArgumentCallbacks_default = Symbol('_is_ArgumentCallbacks_default');
  callbacks.ArgumentCallbacks$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var TLTovoid = () => (TLTovoid = dart.constFn(dart.fnType(dart.void, [TL()])))();
    var TLToLvoid = () => (TLToLvoid = dart.constFn(dart.legacy(TLTovoid())))();
    var JSArrayOfTLToLvoid = () => (JSArrayOfTLToLvoid = dart.constFn(_interceptors.JSArray$(TLToLvoid())))();
    var ListOfTLToLvoid = () => (ListOfTLToLvoid = dart.constFn(core.List$(TLToLvoid())))();
    class ArgumentCallbacks extends core.Object {
      call(argument) {
        TL().as(argument);
        let length = this[_callbacks][$length];
        if (length === 1) {
          this[_callbacks][$_get](0)(argument);
        } else if (0 < dart.notNull(length)) {
          for (let callback of ListOfTLToLvoid().from(this[_callbacks])) {
            callback(argument);
          }
        }
      }
      add(callback) {
        if (!(callback != null)) dart.assertFailed(null, I[21], 47, 12, "callback != null");
        this[_callbacks][$add](callback);
      }
      remove(callback) {
        this[_callbacks][$remove](callback);
      }
      get isEmpty() {
        return this[_callbacks][$isEmpty];
      }
      get isNotEmpty() {
        return this[_callbacks][$isNotEmpty];
      }
    }
    (ArgumentCallbacks.new = function() {
      this[_callbacks] = JSArrayOfTLToLvoid().of([]);
      ;
    }).prototype = ArgumentCallbacks.prototype;
    dart.addTypeTests(ArgumentCallbacks);
    ArgumentCallbacks.prototype[_is_ArgumentCallbacks_default] = true;
    dart.addTypeCaches(ArgumentCallbacks);
    dart.setMethodSignature(ArgumentCallbacks, () => ({
      __proto__: dart.getMethods(ArgumentCallbacks.__proto__),
      call: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      add: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, [dart.legacy(T)]))]),
      remove: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, [dart.legacy(T)]))])
    }));
    dart.setGetterSignature(ArgumentCallbacks, () => ({
      __proto__: dart.getGetters(ArgumentCallbacks.__proto__),
      isEmpty: dart.legacy(core.bool),
      isNotEmpty: dart.legacy(core.bool)
    }));
    dart.setLibraryUri(ArgumentCallbacks, I[22]);
    dart.setFieldSignature(ArgumentCallbacks, () => ({
      __proto__: dart.getFields(ArgumentCallbacks.__proto__),
      [_callbacks]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(dart.fnType(dart.void, [dart.legacy(T)])))))
    }));
    return ArgumentCallbacks;
  });
  callbacks.ArgumentCallbacks = callbacks.ArgumentCallbacks$();
  dart.addTypeTests(callbacks.ArgumentCallbacks, _is_ArgumentCallbacks_default);
  tile_overlay$.keyTileOverlayId = function keyTileOverlayId(tileOverlays) {
    if (tileOverlays == null) {
      return new (T.LinkedMapOfTileOverlayIdL$TileOverlayL()).new();
    }
    return T.MapOfTileOverlayIdL$TileOverlayL().fromEntries(tileOverlays[$map](T.MapEntryLOfTileOverlayIdL$TileOverlayL(), dart.fn(tileOverlay => new (T.MapEntryOfTileOverlayIdL$TileOverlayL()).__(tileOverlay.tileOverlayId, tileOverlay), T.TileOverlayLToMapEntryLOfTileOverlayIdL$TileOverlayL())));
  };
  tile_overlay$.serializeTileOverlaySet = function serializeTileOverlaySet(tileOverlays) {
    if (tileOverlays == null) {
      return null;
    }
    return tileOverlays[$map](T.MapLOfStringL$dynamic(), dart.fn(p => p.toJson(), T.TileOverlayLToMapLOfStringL$dynamic()))[$toList]();
  };
  dart.trackLibraries("packages/google_maps_flutter_platform_interface/src/types/ui.dart", {
    "package:google_maps_flutter_platform_interface/src/types/ui.dart": ui$,
    "package:google_maps_flutter_platform_interface/src/types/tile_provider.dart": tile_provider,
    "package:google_maps_flutter_platform_interface/src/types/tile_overlay.dart": tile_overlay,
    "package:google_maps_flutter_platform_interface/src/types/polyline.dart": polyline,
    "package:google_maps_flutter_platform_interface/src/types/utils/polyline.dart": polyline$,
    "package:google_maps_flutter_platform_interface/src/types/polyline_updates.dart": polyline_updates,
    "package:google_maps_flutter_platform_interface/src/types/polygon.dart": polygon,
    "package:google_maps_flutter_platform_interface/src/types/utils/polygon.dart": polygon$,
    "package:google_maps_flutter_platform_interface/src/types/polygon_updates.dart": polygon_updates,
    "package:google_maps_flutter_platform_interface/src/types/marker.dart": marker,
    "package:google_maps_flutter_platform_interface/src/types/utils/marker.dart": marker$,
    "package:google_maps_flutter_platform_interface/src/types/marker_updates.dart": marker_updates,
    "package:google_maps_flutter_platform_interface/src/types/circle.dart": circle,
    "package:google_maps_flutter_platform_interface/src/types/utils/circle.dart": circle$,
    "package:google_maps_flutter_platform_interface/src/types/circle_updates.dart": circle_updates,
    "package:google_maps_flutter_platform_interface/src/types/cap.dart": cap,
    "package:google_maps_flutter_platform_interface/src/types/camera.dart": camera,
    "package:google_maps_flutter_platform_interface/src/types/callbacks.dart": callbacks,
    "package:google_maps_flutter_platform_interface/src/types/types.dart": types,
    "package:google_maps_flutter_platform_interface/src/types/utils/tile_overlay.dart": tile_overlay$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["ui.dart","tile_provider.dart","tile_overlay.dart","polyline.dart","utils/polyline.dart","polyline_updates.dart","polygon.dart","utils/polygon.dart","polygon_updates.dart","marker.dart","utils/marker.dart","marker_updates.dart","circle.dart","utils/circle.dart","circle_updates.dart","cap.dart","camera.dart","callbacks.dart","utils/tile_overlay.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../D:/packages/google_maps_flutter_platform_interface/src/types/ui.dart.lib.js"}');
  // Exports:
  return {
    src__types__ui: ui$,
    src__types__tile_provider: tile_provider,
    src__types__tile_overlay: tile_overlay,
    src__types__polyline: polyline,
    src__types__utils__polyline: polyline$,
    src__types__polyline_updates: polyline_updates,
    src__types__polygon: polygon,
    src__types__utils__polygon: polygon$,
    src__types__polygon_updates: polygon_updates,
    src__types__marker: marker,
    src__types__utils__marker: marker$,
    src__types__marker_updates: marker_updates,
    src__types__circle: circle,
    src__types__utils__circle: circle$,
    src__types__circle_updates: circle_updates,
    src__types__cap: cap,
    src__types__camera: camera,
    src__types__callbacks: callbacks,
    src__types__types: types,
    src__types__utils__tile_overlay: tile_overlay$
  };
}));

//# sourceMappingURL=ui.dart.lib.js.map
