define(['dart_sdk', 'packages/flutter/src/services/system_channels.dart'], (function load__packages__tflite__tflite_dart(dart_sdk, packages__flutter__src__services__system_channels$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const typed_data = dart_sdk.typed_data;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const message_codecs = packages__flutter__src__services__system_channels$46dart.src__services__message_codecs;
  var tflite = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(false);
  var T = {
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    ObjectL: () => (T.ObjectL = dart.constFn(dart.legacy(core.Object)))(),
    IdentityMapOfStringL$ObjectL: () => (T.IdentityMapOfStringL$ObjectL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.ObjectL())))(),
    ListL: () => (T.ListL = dart.constFn(dart.legacy(core.List)))(),
    doubleL: () => (T.doubleL = dart.constFn(dart.legacy(core.double)))(),
    Uint8ListL: () => (T.Uint8ListL = dart.constFn(dart.legacy(typed_data.Uint8List)))(),
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    JSArrayOfintL: () => (T.JSArrayOfintL = dart.constFn(_interceptors.JSArray$(T.intL())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.constList([0.57273, 0.677385, 1.87446, 2.06253, 3.33843, 5.47434, 7.88282, 3.52778, 9.77052, 9.16828], T.doubleL());
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[3] || CT.C3
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[2] || CT.C2,
        [MethodChannel_name]: "tflite"
      });
    }
  }, false);
  var C = Array(4).fill(void 0);
  var I = ["package:tflite/tflite.dart"];
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  tflite.Tflite = class Tflite extends core.Object {
    static loadModel(opts) {
      let model = opts && 'model' in opts ? opts.model : null;
      let labels = opts && 'labels' in opts ? opts.labels : "";
      let numThreads = opts && 'numThreads' in opts ? opts.numThreads : 1;
      let isAsset = opts && 'isAsset' in opts ? opts.isAsset : true;
      let useGpuDelegate = opts && 'useGpuDelegate' in opts ? opts.useGpuDelegate : false;
      return async.async(T.StringL(), function* loadModel() {
        return yield tflite.Tflite._channel.invokeMethod(T.StringL(), "loadModel", new (T.IdentityMapOfStringL$ObjectL()).from(["model", model, "labels", labels, "numThreads", numThreads, "isAsset", isAsset, "useGpuDelegate", useGpuDelegate]));
      });
    }
    static runModelOnImage(opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      let imageMean = opts && 'imageMean' in opts ? opts.imageMean : 117;
      let imageStd = opts && 'imageStd' in opts ? opts.imageStd : 1;
      let numResults = opts && 'numResults' in opts ? opts.numResults : 5;
      let threshold = opts && 'threshold' in opts ? opts.threshold : 0.1;
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      return async.async(T.ListL(), function* runModelOnImage() {
        return yield tflite.Tflite._channel.invokeMethod(T.ListL(), "runModelOnImage", new (T.IdentityMapOfStringL$ObjectL()).from(["path", path, "imageMean", imageMean, "imageStd", imageStd, "numResults", numResults, "threshold", threshold, "asynch", asynch]));
      });
    }
    static runModelOnBinary(opts) {
      let binary = opts && 'binary' in opts ? opts.binary : null;
      let numResults = opts && 'numResults' in opts ? opts.numResults : 5;
      let threshold = opts && 'threshold' in opts ? opts.threshold : 0.1;
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      return async.async(T.ListL(), function* runModelOnBinary() {
        return yield tflite.Tflite._channel.invokeMethod(T.ListL(), "runModelOnBinary", new (T.IdentityMapOfStringL$ObjectL()).from(["binary", binary, "numResults", numResults, "threshold", threshold, "asynch", asynch]));
      });
    }
    static runModelOnFrame(opts) {
      let bytesList = opts && 'bytesList' in opts ? opts.bytesList : null;
      let imageHeight = opts && 'imageHeight' in opts ? opts.imageHeight : 1280;
      let imageWidth = opts && 'imageWidth' in opts ? opts.imageWidth : 720;
      let imageMean = opts && 'imageMean' in opts ? opts.imageMean : 127.5;
      let imageStd = opts && 'imageStd' in opts ? opts.imageStd : 127.5;
      let rotation = opts && 'rotation' in opts ? opts.rotation : 90;
      let numResults = opts && 'numResults' in opts ? opts.numResults : 5;
      let threshold = opts && 'threshold' in opts ? opts.threshold : 0.1;
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      return async.async(T.ListL(), function* runModelOnFrame() {
        return yield tflite.Tflite._channel.invokeMethod(T.ListL(), "runModelOnFrame", new (T.IdentityMapOfStringL$ObjectL()).from(["bytesList", bytesList, "imageHeight", imageHeight, "imageWidth", imageWidth, "imageMean", imageMean, "imageStd", imageStd, "rotation", rotation, "numResults", numResults, "threshold", threshold, "asynch", asynch]));
      });
    }
    static detectObjectOnImage(opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      let model = opts && 'model' in opts ? opts.model : "SSDMobileNet";
      let imageMean = opts && 'imageMean' in opts ? opts.imageMean : 127.5;
      let imageStd = opts && 'imageStd' in opts ? opts.imageStd : 127.5;
      let threshold = opts && 'threshold' in opts ? opts.threshold : 0.1;
      let numResultsPerClass = opts && 'numResultsPerClass' in opts ? opts.numResultsPerClass : 5;
      let anchors = opts && 'anchors' in opts ? opts.anchors : C[0] || CT.C0;
      let blockSize = opts && 'blockSize' in opts ? opts.blockSize : 32;
      let numBoxesPerBlock = opts && 'numBoxesPerBlock' in opts ? opts.numBoxesPerBlock : 5;
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      return async.async(T.ListL(), function* detectObjectOnImage() {
        return yield tflite.Tflite._channel.invokeMethod(T.ListL(), "detectObjectOnImage", new (T.IdentityMapOfStringL$ObjectL()).from(["path", path, "model", model, "imageMean", imageMean, "imageStd", imageStd, "threshold", threshold, "numResultsPerClass", numResultsPerClass, "anchors", anchors, "blockSize", blockSize, "numBoxesPerBlock", numBoxesPerBlock, "asynch", asynch]));
      });
    }
    static detectObjectOnBinary(opts) {
      let binary = opts && 'binary' in opts ? opts.binary : null;
      let model = opts && 'model' in opts ? opts.model : "SSDMobileNet";
      let threshold = opts && 'threshold' in opts ? opts.threshold : 0.1;
      let numResultsPerClass = opts && 'numResultsPerClass' in opts ? opts.numResultsPerClass : 5;
      let anchors = opts && 'anchors' in opts ? opts.anchors : C[0] || CT.C0;
      let blockSize = opts && 'blockSize' in opts ? opts.blockSize : 32;
      let numBoxesPerBlock = opts && 'numBoxesPerBlock' in opts ? opts.numBoxesPerBlock : 5;
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      return async.async(T.ListL(), function* detectObjectOnBinary() {
        return yield tflite.Tflite._channel.invokeMethod(T.ListL(), "detectObjectOnBinary", new (T.IdentityMapOfStringL$ObjectL()).from(["binary", binary, "model", model, "threshold", threshold, "numResultsPerClass", numResultsPerClass, "anchors", anchors, "blockSize", blockSize, "numBoxesPerBlock", numBoxesPerBlock, "asynch", asynch]));
      });
    }
    static detectObjectOnFrame(opts) {
      let bytesList = opts && 'bytesList' in opts ? opts.bytesList : null;
      let model = opts && 'model' in opts ? opts.model : "SSDMobileNet";
      let imageHeight = opts && 'imageHeight' in opts ? opts.imageHeight : 1280;
      let imageWidth = opts && 'imageWidth' in opts ? opts.imageWidth : 720;
      let imageMean = opts && 'imageMean' in opts ? opts.imageMean : 127.5;
      let imageStd = opts && 'imageStd' in opts ? opts.imageStd : 127.5;
      let threshold = opts && 'threshold' in opts ? opts.threshold : 0.1;
      let numResultsPerClass = opts && 'numResultsPerClass' in opts ? opts.numResultsPerClass : 5;
      let rotation = opts && 'rotation' in opts ? opts.rotation : 90;
      let anchors = opts && 'anchors' in opts ? opts.anchors : C[0] || CT.C0;
      let blockSize = opts && 'blockSize' in opts ? opts.blockSize : 32;
      let numBoxesPerBlock = opts && 'numBoxesPerBlock' in opts ? opts.numBoxesPerBlock : 5;
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      return async.async(T.ListL(), function* detectObjectOnFrame() {
        return yield tflite.Tflite._channel.invokeMethod(T.ListL(), "detectObjectOnFrame", new (T.IdentityMapOfStringL$ObjectL()).from(["bytesList", bytesList, "model", model, "imageHeight", imageHeight, "imageWidth", imageWidth, "imageMean", imageMean, "imageStd", imageStd, "rotation", rotation, "threshold", threshold, "numResultsPerClass", numResultsPerClass, "anchors", anchors, "blockSize", blockSize, "numBoxesPerBlock", numBoxesPerBlock, "asynch", asynch]));
      });
    }
    static close() {
      return async.async(dart.dynamic, function* close() {
        return yield tflite.Tflite._channel.invokeMethod(dart.dynamic, "close");
      });
    }
    static runPix2PixOnImage(opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      let imageMean = opts && 'imageMean' in opts ? opts.imageMean : 0;
      let imageStd = opts && 'imageStd' in opts ? opts.imageStd : 255;
      let outputType = opts && 'outputType' in opts ? opts.outputType : "png";
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      return async.async(T.Uint8ListL(), function* runPix2PixOnImage() {
        return yield tflite.Tflite._channel.invokeMethod(T.Uint8ListL(), "runPix2PixOnImage", new (T.IdentityMapOfStringL$ObjectL()).from(["path", path, "imageMean", imageMean, "imageStd", imageStd, "asynch", asynch, "outputType", outputType]));
      });
    }
    static runPix2PixOnBinary(opts) {
      let binary = opts && 'binary' in opts ? opts.binary : null;
      let outputType = opts && 'outputType' in opts ? opts.outputType : "png";
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      return async.async(T.Uint8ListL(), function* runPix2PixOnBinary() {
        return yield tflite.Tflite._channel.invokeMethod(T.Uint8ListL(), "runPix2PixOnBinary", new (T.IdentityMapOfStringL$ObjectL()).from(["binary", binary, "asynch", asynch, "outputType", outputType]));
      });
    }
    static runPix2PixOnFrame(opts) {
      let bytesList = opts && 'bytesList' in opts ? opts.bytesList : null;
      let imageHeight = opts && 'imageHeight' in opts ? opts.imageHeight : 1280;
      let imageWidth = opts && 'imageWidth' in opts ? opts.imageWidth : 720;
      let imageMean = opts && 'imageMean' in opts ? opts.imageMean : 0;
      let imageStd = opts && 'imageStd' in opts ? opts.imageStd : 255;
      let rotation = opts && 'rotation' in opts ? opts.rotation : 90;
      let outputType = opts && 'outputType' in opts ? opts.outputType : "png";
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      return async.async(T.Uint8ListL(), function* runPix2PixOnFrame() {
        return yield tflite.Tflite._channel.invokeMethod(T.Uint8ListL(), "runPix2PixOnFrame", new (T.IdentityMapOfStringL$ObjectL()).from(["bytesList", bytesList, "imageHeight", imageHeight, "imageWidth", imageWidth, "imageMean", imageMean, "imageStd", imageStd, "rotation", rotation, "asynch", asynch, "outputType", outputType]));
      });
    }
    static runSegmentationOnImage(opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      let imageMean = opts && 'imageMean' in opts ? opts.imageMean : 0;
      let imageStd = opts && 'imageStd' in opts ? opts.imageStd : 255;
      let labelColors = opts && 'labelColors' in opts ? opts.labelColors : null;
      let outputType = opts && 'outputType' in opts ? opts.outputType : "png";
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      return async.async(T.Uint8ListL(), function* runSegmentationOnImage() {
        let t0;
        return yield tflite.Tflite._channel.invokeMethod(T.Uint8ListL(), "runSegmentationOnImage", new (T.IdentityMapOfStringL$ObjectL()).from(["path", path, "imageMean", imageMean, "imageStd", imageStd, "labelColors", (t0 = labelColors, t0 == null ? tflite.Tflite.pascalVOCLabelColors : t0), "outputType", outputType, "asynch", asynch]));
      });
    }
    static runSegmentationOnBinary(opts) {
      let binary = opts && 'binary' in opts ? opts.binary : null;
      let labelColors = opts && 'labelColors' in opts ? opts.labelColors : null;
      let outputType = opts && 'outputType' in opts ? opts.outputType : "png";
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      return async.async(T.Uint8ListL(), function* runSegmentationOnBinary() {
        let t0;
        return yield tflite.Tflite._channel.invokeMethod(T.Uint8ListL(), "runSegmentationOnBinary", new (T.IdentityMapOfStringL$ObjectL()).from(["binary", binary, "labelColors", (t0 = labelColors, t0 == null ? tflite.Tflite.pascalVOCLabelColors : t0), "outputType", outputType, "asynch", asynch]));
      });
    }
    static runSegmentationOnFrame(opts) {
      let bytesList = opts && 'bytesList' in opts ? opts.bytesList : null;
      let imageHeight = opts && 'imageHeight' in opts ? opts.imageHeight : 1280;
      let imageWidth = opts && 'imageWidth' in opts ? opts.imageWidth : 720;
      let imageMean = opts && 'imageMean' in opts ? opts.imageMean : 0;
      let imageStd = opts && 'imageStd' in opts ? opts.imageStd : 255;
      let rotation = opts && 'rotation' in opts ? opts.rotation : 90;
      let labelColors = opts && 'labelColors' in opts ? opts.labelColors : null;
      let outputType = opts && 'outputType' in opts ? opts.outputType : "png";
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      return async.async(T.Uint8ListL(), function* runSegmentationOnFrame() {
        let t0;
        return yield tflite.Tflite._channel.invokeMethod(T.Uint8ListL(), "runSegmentationOnFrame", new (T.IdentityMapOfStringL$ObjectL()).from(["bytesList", bytesList, "imageHeight", imageHeight, "imageWidth", imageWidth, "imageMean", imageMean, "imageStd", imageStd, "rotation", rotation, "labelColors", (t0 = labelColors, t0 == null ? tflite.Tflite.pascalVOCLabelColors : t0), "outputType", outputType, "asynch", asynch]));
      });
    }
    static runPoseNetOnImage(opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      let imageMean = opts && 'imageMean' in opts ? opts.imageMean : 127.5;
      let imageStd = opts && 'imageStd' in opts ? opts.imageStd : 127.5;
      let numResults = opts && 'numResults' in opts ? opts.numResults : 5;
      let threshold = opts && 'threshold' in opts ? opts.threshold : 0.5;
      let nmsRadius = opts && 'nmsRadius' in opts ? opts.nmsRadius : 20;
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      return async.async(T.ListL(), function* runPoseNetOnImage() {
        return yield tflite.Tflite._channel.invokeMethod(T.ListL(), "runPoseNetOnImage", new (T.IdentityMapOfStringL$ObjectL()).from(["path", path, "imageMean", imageMean, "imageStd", imageStd, "numResults", numResults, "threshold", threshold, "nmsRadius", nmsRadius, "asynch", asynch]));
      });
    }
    static runPoseNetOnBinary(opts) {
      let binary = opts && 'binary' in opts ? opts.binary : null;
      let numResults = opts && 'numResults' in opts ? opts.numResults : 5;
      let threshold = opts && 'threshold' in opts ? opts.threshold : 0.5;
      let nmsRadius = opts && 'nmsRadius' in opts ? opts.nmsRadius : 20;
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      return async.async(T.ListL(), function* runPoseNetOnBinary() {
        return yield tflite.Tflite._channel.invokeMethod(T.ListL(), "runPoseNetOnBinary", new (T.IdentityMapOfStringL$ObjectL()).from(["binary", binary, "numResults", numResults, "threshold", threshold, "nmsRadius", nmsRadius, "asynch", asynch]));
      });
    }
    static runPoseNetOnFrame(opts) {
      let bytesList = opts && 'bytesList' in opts ? opts.bytesList : null;
      let imageHeight = opts && 'imageHeight' in opts ? opts.imageHeight : 1280;
      let imageWidth = opts && 'imageWidth' in opts ? opts.imageWidth : 720;
      let imageMean = opts && 'imageMean' in opts ? opts.imageMean : 127.5;
      let imageStd = opts && 'imageStd' in opts ? opts.imageStd : 127.5;
      let rotation = opts && 'rotation' in opts ? opts.rotation : 90;
      let numResults = opts && 'numResults' in opts ? opts.numResults : 5;
      let threshold = opts && 'threshold' in opts ? opts.threshold : 0.5;
      let nmsRadius = opts && 'nmsRadius' in opts ? opts.nmsRadius : 20;
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      return async.async(T.ListL(), function* runPoseNetOnFrame() {
        return yield tflite.Tflite._channel.invokeMethod(T.ListL(), "runPoseNetOnFrame", new (T.IdentityMapOfStringL$ObjectL()).from(["bytesList", bytesList, "imageHeight", imageHeight, "imageWidth", imageWidth, "imageMean", imageMean, "imageStd", imageStd, "rotation", rotation, "numResults", numResults, "threshold", threshold, "nmsRadius", nmsRadius, "asynch", asynch]));
      });
    }
  };
  (tflite.Tflite.new = function() {
    ;
  }).prototype = tflite.Tflite.prototype;
  dart.addTypeTests(tflite.Tflite);
  dart.addTypeCaches(tflite.Tflite);
  dart.setLibraryUri(tflite.Tflite, I[0]);
  dart.defineLazy(tflite.Tflite, {
    /*tflite.Tflite._channel*/get _channel() {
      return C[1] || CT.C1;
    },
    /*tflite.Tflite.anchors*/get anchors() {
      return C[0] || CT.C0;
    },
    /*tflite.Tflite.pascalVOCLabelColors*/get pascalVOCLabelColors() {
      return T.JSArrayOfintL().of([new ui.Color.fromARGB(255, 0, 0, 0).value, new ui.Color.fromARGB(255, 128, 0, 0).value, new ui.Color.fromARGB(255, 0, 128, 0).value, new ui.Color.fromARGB(255, 128, 128, 0).value, new ui.Color.fromARGB(255, 0, 0, 128).value, new ui.Color.fromARGB(255, 128, 0, 128).value, new ui.Color.fromARGB(255, 0, 128, 128).value, new ui.Color.fromARGB(255, 128, 128, 128).value, new ui.Color.fromARGB(255, 64, 0, 0).value, new ui.Color.fromARGB(255, 192, 0, 0).value, new ui.Color.fromARGB(255, 64, 128, 0).value, new ui.Color.fromARGB(255, 192, 128, 0).value, new ui.Color.fromARGB(255, 64, 0, 128).value, new ui.Color.fromARGB(255, 192, 0, 128).value, new ui.Color.fromARGB(255, 64, 128, 128).value, new ui.Color.fromARGB(255, 192, 128, 128).value, new ui.Color.fromARGB(255, 0, 64, 0).value, new ui.Color.fromARGB(255, 128, 64, 0).value, new ui.Color.fromARGB(255, 0, 192, 0).value, new ui.Color.fromARGB(255, 128, 192, 0).value, new ui.Color.fromARGB(255, 0, 64, 128).value]);
    },
    set pascalVOCLabelColors(_) {}
  }, true);
  dart.trackLibraries("packages/tflite/tflite.dart", {
    "package:tflite/tflite.dart": tflite
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["tflite.dart"],"names":[],"mappings":"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","file":"../../../../../../../../D:/packages/tflite/tflite.dart.lib.js"}');
  // Exports:
  return {
    tflite: tflite
  };
}));

//# sourceMappingURL=tflite.dart.lib.js.map
