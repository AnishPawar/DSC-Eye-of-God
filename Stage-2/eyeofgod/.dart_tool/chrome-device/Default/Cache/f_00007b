define(['dart_sdk', 'packages/google_maps_flutter_platform_interface/src/types/location.dart', 'packages/google_maps_flutter_platform_interface/src/types/ui.dart', 'packages/flutter/src/services/system_channels.dart', 'packages/stream_transform/src/where.dart', 'packages/google_maps_flutter_platform_interface/src/types/tile_overlay_updates.dart', 'packages/google_maps_flutter_platform_interface/src/types/screen_coordinate.dart', 'packages/flutter/src/foundation/_platform_web.dart', 'packages/flutter/src/widgets/platform_view.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/plugin_platform_interface/plugin_platform_interface.dart', 'packages/flutter/src/foundation/basic_types.dart', 'packages/flutter/src/gestures/recognizer.dart'], (function load__packages__google_maps_flutter_platform_interface__src__events__map_event_dart(dart_sdk, packages__google_maps_flutter_platform_interface__src__types__location$46dart, packages__google_maps_flutter_platform_interface__src__types__ui$46dart, packages__flutter__src__services__system_channels$46dart, packages__stream_transform__src__where$46dart, packages__google_maps_flutter_platform_interface__src__types__tile_overlay_updates$46dart, packages__google_maps_flutter_platform_interface__src__types__screen_coordinate$46dart, packages__flutter__src__foundation___platform_web$46dart, packages__flutter__src__widgets__platform_view$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__plugin_platform_interface__plugin_platform_interface$46dart, packages__flutter__src__foundation__basic_types$46dart, packages__flutter__src__gestures__recognizer$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const typed_data = dart_sdk.typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const location = packages__google_maps_flutter_platform_interface__src__types__location$46dart.src__types__location;
  const camera = packages__google_maps_flutter_platform_interface__src__types__ui$46dart.src__types__camera;
  const marker = packages__google_maps_flutter_platform_interface__src__types__ui$46dart.src__types__marker;
  const polyline = packages__google_maps_flutter_platform_interface__src__types__ui$46dart.src__types__polyline;
  const polygon = packages__google_maps_flutter_platform_interface__src__types__ui$46dart.src__types__polygon;
  const circle = packages__google_maps_flutter_platform_interface__src__types__ui$46dart.src__types__circle;
  const tile_overlay = packages__google_maps_flutter_platform_interface__src__types__ui$46dart.src__types__tile_overlay;
  const tile_provider = packages__google_maps_flutter_platform_interface__src__types__ui$46dart.src__types__tile_provider;
  const tile_overlay$ = packages__google_maps_flutter_platform_interface__src__types__ui$46dart.src__types__utils__tile_overlay;
  const ui = packages__google_maps_flutter_platform_interface__src__types__ui$46dart.src__types__ui;
  const marker_updates = packages__google_maps_flutter_platform_interface__src__types__ui$46dart.src__types__marker_updates;
  const polygon_updates = packages__google_maps_flutter_platform_interface__src__types__ui$46dart.src__types__polygon_updates;
  const polyline_updates = packages__google_maps_flutter_platform_interface__src__types__ui$46dart.src__types__polyline_updates;
  const circle_updates = packages__google_maps_flutter_platform_interface__src__types__ui$46dart.src__types__circle_updates;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  const message_codecs = packages__flutter__src__services__system_channels$46dart.src__services__message_codecs;
  const where = packages__stream_transform__src__where$46dart.src__where;
  const tile_overlay_updates = packages__google_maps_flutter_platform_interface__src__types__tile_overlay_updates$46dart.src__types__tile_overlay_updates;
  const screen_coordinate = packages__google_maps_flutter_platform_interface__src__types__screen_coordinate$46dart.src__types__screen_coordinate;
  const platform = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  const platform_view = packages__flutter__src__widgets__platform_view$46dart.src__widgets__platform_view;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const text = packages__flutter__src__widgets__widget_span$46dart.src__widgets__text;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const plugin_platform_interface = packages__plugin_platform_interface__plugin_platform_interface$46dart.plugin_platform_interface;
  const basic_types = packages__flutter__src__foundation__basic_types$46dart.src__foundation__basic_types;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  var map_event = Object.create(dart.library);
  var method_channel_google_maps_flutter = Object.create(dart.library);
  var google_maps_flutter_platform = Object.create(dart.library);
  var google_maps_flutter_platform_interface = Object.create(dart.library);
  var $_get = dartx._get;
  var $containsKey = dartx.containsKey;
  var $_set = dartx._set;
  var $values = dartx.values;
  var $toSet = dartx.toSet;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    MethodChannelL: () => (T.MethodChannelL = dart.constFn(dart.legacy(platform_channel.MethodChannel)))(),
    IdentityMapOfintL$MethodChannelL: () => (T.IdentityMapOfintL$MethodChannelL = dart.constFn(_js_helper.IdentityMap$(T.intL(), T.MethodChannelL())))(),
    TileOverlayIdL: () => (T.TileOverlayIdL = dart.constFn(dart.legacy(tile_overlay.TileOverlayId)))(),
    TileOverlayL: () => (T.TileOverlayL = dart.constFn(dart.legacy(tile_overlay.TileOverlay)))(),
    MapOfTileOverlayIdL$TileOverlayL: () => (T.MapOfTileOverlayIdL$TileOverlayL = dart.constFn(core.Map$(T.TileOverlayIdL(), T.TileOverlayL())))(),
    MapLOfTileOverlayIdL$TileOverlayL: () => (T.MapLOfTileOverlayIdL$TileOverlayL = dart.constFn(dart.legacy(T.MapOfTileOverlayIdL$TileOverlayL())))(),
    IdentityMapOfintL$MapLOfTileOverlayIdL$TileOverlayL: () => (T.IdentityMapOfintL$MapLOfTileOverlayIdL$TileOverlayL = dart.constFn(_js_helper.IdentityMap$(T.intL(), T.MapLOfTileOverlayIdL$TileOverlayL())))(),
    MapEventL: () => (T.MapEventL = dart.constFn(dart.legacy(map_event.MapEvent)))(),
    StreamControllerOfMapEventL: () => (T.StreamControllerOfMapEventL = dart.constFn(async.StreamController$(T.MapEventL())))(),
    FutureL: () => (T.FutureL = dart.constFn(dart.legacy(async.Future)))(),
    MethodCallL: () => (T.MethodCallL = dart.constFn(dart.legacy(message_codec.MethodCall)))(),
    MethodCallLToFutureL: () => (T.MethodCallLToFutureL = dart.constFn(dart.fnType(T.FutureL(), [T.MethodCallL()])))(),
    boolL: () => (T.boolL = dart.constFn(dart.legacy(core.bool)))(),
    MapEventLToboolL: () => (T.MapEventLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.MapEventL()])))(),
    CameraMoveStartedEventL: () => (T.CameraMoveStartedEventL = dart.constFn(dart.legacy(map_event.CameraMoveStartedEvent)))(),
    CameraMoveEventL: () => (T.CameraMoveEventL = dart.constFn(dart.legacy(map_event.CameraMoveEvent)))(),
    CameraIdleEventL: () => (T.CameraIdleEventL = dart.constFn(dart.legacy(map_event.CameraIdleEvent)))(),
    MarkerTapEventL: () => (T.MarkerTapEventL = dart.constFn(dart.legacy(map_event.MarkerTapEvent)))(),
    InfoWindowTapEventL: () => (T.InfoWindowTapEventL = dart.constFn(dart.legacy(map_event.InfoWindowTapEvent)))(),
    MarkerDragEndEventL: () => (T.MarkerDragEndEventL = dart.constFn(dart.legacy(map_event.MarkerDragEndEvent)))(),
    PolylineTapEventL: () => (T.PolylineTapEventL = dart.constFn(dart.legacy(map_event.PolylineTapEvent)))(),
    PolygonTapEventL: () => (T.PolygonTapEventL = dart.constFn(dart.legacy(map_event.PolygonTapEvent)))(),
    CircleTapEventL: () => (T.CircleTapEventL = dart.constFn(dart.legacy(map_event.CircleTapEvent)))(),
    MapTapEventL: () => (T.MapTapEventL = dart.constFn(dart.legacy(map_event.MapTapEvent)))(),
    MapLongPressEventL: () => (T.MapLongPressEventL = dart.constFn(dart.legacy(map_event.MapLongPressEvent)))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    IdentityMapOfStringL$dynamic: () => (T.IdentityMapOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(T.StringL(), dart.dynamic)))(),
    ListL: () => (T.ListL = dart.constFn(dart.legacy(core.List)))(),
    LatLngBoundsL: () => (T.LatLngBoundsL = dart.constFn(dart.legacy(location.LatLngBounds)))(),
    ScreenCoordinateL: () => (T.ScreenCoordinateL = dart.constFn(dart.legacy(screen_coordinate.ScreenCoordinate)))(),
    doubleL: () => (T.doubleL = dart.constFn(dart.legacy(core.double)))(),
    LatLngL: () => (T.LatLngL = dart.constFn(dart.legacy(location.LatLng)))(),
    IdentityMapOfStringL$StringL: () => (T.IdentityMapOfStringL$StringL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.StringL())))(),
    Uint8ListL: () => (T.Uint8ListL = dart.constFn(dart.legacy(typed_data.Uint8List)))(),
    _LocationL: () => (T._LocationL = dart.constFn(dart.legacy(widget_inspector._Location)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "viewType",
        [_Location_column]: 9,
        [_Location_line]: 530,
        [_Location_file]: null
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPlatformViewCreated",
        [_Location_column]: 9,
        [_Location_line]: 531,
        [_Location_file]: null
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "gestureRecognizers",
        [_Location_column]: 9,
        [_Location_line]: 532,
        [_Location_file]: null
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "creationParams",
        [_Location_column]: 9,
        [_Location_line]: 533,
        [_Location_file]: null
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "creationParamsCodec",
        [_Location_column]: 9,
        [_Location_line]: 534,
        [_Location_file]: null
      });
    },
    get C2() {
      return C[2] = dart.constList([C[3] || CT.C3, C[4] || CT.C4, C[5] || CT.C5, C[6] || CT.C6, C[7] || CT.C7], T._LocationL());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[2] || CT.C2,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 529,
        [_Location_file]: "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-1.2.0/lib/src/method_channel/method_channel_google_maps_flutter.dart"
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "viewType",
        [_Location_column]: 9,
        [_Location_line]: 538,
        [_Location_file]: null
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPlatformViewCreated",
        [_Location_column]: 9,
        [_Location_line]: 539,
        [_Location_file]: null
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "gestureRecognizers",
        [_Location_column]: 9,
        [_Location_line]: 540,
        [_Location_file]: null
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "creationParams",
        [_Location_column]: 9,
        [_Location_line]: 541,
        [_Location_file]: null
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "creationParamsCodec",
        [_Location_column]: 9,
        [_Location_line]: 542,
        [_Location_file]: null
      });
    },
    get C9() {
      return C[9] = dart.constList([C[10] || CT.C10, C[11] || CT.C11, C[12] || CT.C12, C[13] || CT.C13, C[14] || CT.C14], T._LocationL());
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[9] || CT.C9,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 537,
        [_Location_file]: "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-1.2.0/lib/src/method_channel/method_channel_google_maps_flutter.dart"
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 73,
        [_Location_line]: 546,
        [_Location_file]: null
      });
    },
    get C16() {
      return C[16] = dart.constList([C[17] || CT.C17], T._LocationL());
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[16] || CT.C16,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 545,
        [_Location_file]: "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-1.2.0/lib/src/method_channel/method_channel_google_maps_flutter.dart"
      });
    }
  }, false);
  var C = Array(18).fill(void 0);
  var I = [
    "package:google_maps_flutter_platform_interface/src/events/map_event.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/google_maps_flutter_platform_interface-1.2.0/lib/src/method_channel/method_channel_google_maps_flutter.dart",
    "package:google_maps_flutter_platform_interface/src/platform_interface/google_maps_flutter_platform.dart",
    "package:google_maps_flutter_platform_interface/src/method_channel/method_channel_google_maps_flutter.dart"
  ];
  var mapId$ = dart.privateName(map_event, "MapEvent.mapId");
  var value$ = dart.privateName(map_event, "MapEvent.value");
  const _is_MapEvent_default = Symbol('_is_MapEvent_default');
  map_event.MapEvent$ = dart.generic(T => {
    class MapEvent extends core.Object {
      get mapId() {
        return this[mapId$];
      }
      set mapId(value) {
        super.mapId = value;
      }
      get value() {
        return this[value$];
      }
      set value(value) {
        super.value = value;
      }
    }
    (MapEvent.new = function(mapId, value) {
      this[mapId$] = mapId;
      this[value$] = value;
      ;
    }).prototype = MapEvent.prototype;
    dart.addTypeTests(MapEvent);
    MapEvent.prototype[_is_MapEvent_default] = true;
    dart.addTypeCaches(MapEvent);
    dart.setLibraryUri(MapEvent, I[0]);
    dart.setFieldSignature(MapEvent, () => ({
      __proto__: dart.getFields(MapEvent.__proto__),
      mapId: dart.finalFieldType(dart.legacy(core.int)),
      value: dart.finalFieldType(dart.legacy(T))
    }));
    return MapEvent;
  });
  map_event.MapEvent = map_event.MapEvent$();
  dart.addTypeTests(map_event.MapEvent, _is_MapEvent_default);
  var position$ = dart.privateName(map_event, "_PositionedMapEvent.position");
  const _is__PositionedMapEvent_default = Symbol('_is__PositionedMapEvent_default');
  map_event._PositionedMapEvent$ = dart.generic(T => {
    class _PositionedMapEvent extends map_event.MapEvent$(dart.legacy(T)) {
      get position() {
        return this[position$];
      }
      set position(value) {
        super.position = value;
      }
    }
    (_PositionedMapEvent.new = function(mapId, position, value) {
      this[position$] = position;
      _PositionedMapEvent.__proto__.new.call(this, mapId, value);
      ;
    }).prototype = _PositionedMapEvent.prototype;
    dart.addTypeTests(_PositionedMapEvent);
    _PositionedMapEvent.prototype[_is__PositionedMapEvent_default] = true;
    dart.addTypeCaches(_PositionedMapEvent);
    dart.setLibraryUri(_PositionedMapEvent, I[0]);
    dart.setFieldSignature(_PositionedMapEvent, () => ({
      __proto__: dart.getFields(_PositionedMapEvent.__proto__),
      position: dart.finalFieldType(dart.legacy(location.LatLng))
    }));
    return _PositionedMapEvent;
  });
  map_event._PositionedMapEvent = map_event._PositionedMapEvent$();
  dart.addTypeTests(map_event._PositionedMapEvent, _is__PositionedMapEvent_default);
  map_event.CameraMoveStartedEvent = class CameraMoveStartedEvent extends map_event.MapEvent$(dart.void) {};
  (map_event.CameraMoveStartedEvent.new = function(mapId) {
    map_event.CameraMoveStartedEvent.__proto__.new.call(this, mapId, null);
    ;
  }).prototype = map_event.CameraMoveStartedEvent.prototype;
  dart.addTypeTests(map_event.CameraMoveStartedEvent);
  dart.addTypeCaches(map_event.CameraMoveStartedEvent);
  dart.setLibraryUri(map_event.CameraMoveStartedEvent, I[0]);
  map_event.CameraMoveEvent = class CameraMoveEvent extends map_event.MapEvent$(dart.legacy(camera.CameraPosition)) {};
  (map_event.CameraMoveEvent.new = function(mapId, position) {
    map_event.CameraMoveEvent.__proto__.new.call(this, mapId, position);
    ;
  }).prototype = map_event.CameraMoveEvent.prototype;
  dart.addTypeTests(map_event.CameraMoveEvent);
  dart.addTypeCaches(map_event.CameraMoveEvent);
  dart.setLibraryUri(map_event.CameraMoveEvent, I[0]);
  map_event.CameraIdleEvent = class CameraIdleEvent extends map_event.MapEvent$(dart.void) {};
  (map_event.CameraIdleEvent.new = function(mapId) {
    map_event.CameraIdleEvent.__proto__.new.call(this, mapId, null);
    ;
  }).prototype = map_event.CameraIdleEvent.prototype;
  dart.addTypeTests(map_event.CameraIdleEvent);
  dart.addTypeCaches(map_event.CameraIdleEvent);
  dart.setLibraryUri(map_event.CameraIdleEvent, I[0]);
  map_event.MarkerTapEvent = class MarkerTapEvent extends map_event.MapEvent$(dart.legacy(marker.MarkerId)) {};
  (map_event.MarkerTapEvent.new = function(mapId, markerId) {
    map_event.MarkerTapEvent.__proto__.new.call(this, mapId, markerId);
    ;
  }).prototype = map_event.MarkerTapEvent.prototype;
  dart.addTypeTests(map_event.MarkerTapEvent);
  dart.addTypeCaches(map_event.MarkerTapEvent);
  dart.setLibraryUri(map_event.MarkerTapEvent, I[0]);
  map_event.InfoWindowTapEvent = class InfoWindowTapEvent extends map_event.MapEvent$(dart.legacy(marker.MarkerId)) {};
  (map_event.InfoWindowTapEvent.new = function(mapId, markerId) {
    map_event.InfoWindowTapEvent.__proto__.new.call(this, mapId, markerId);
    ;
  }).prototype = map_event.InfoWindowTapEvent.prototype;
  dart.addTypeTests(map_event.InfoWindowTapEvent);
  dart.addTypeCaches(map_event.InfoWindowTapEvent);
  dart.setLibraryUri(map_event.InfoWindowTapEvent, I[0]);
  map_event.MarkerDragEndEvent = class MarkerDragEndEvent extends map_event._PositionedMapEvent$(dart.legacy(marker.MarkerId)) {};
  (map_event.MarkerDragEndEvent.new = function(mapId, position, markerId) {
    map_event.MarkerDragEndEvent.__proto__.new.call(this, mapId, position, markerId);
    ;
  }).prototype = map_event.MarkerDragEndEvent.prototype;
  dart.addTypeTests(map_event.MarkerDragEndEvent);
  dart.addTypeCaches(map_event.MarkerDragEndEvent);
  dart.setLibraryUri(map_event.MarkerDragEndEvent, I[0]);
  map_event.PolylineTapEvent = class PolylineTapEvent extends map_event.MapEvent$(dart.legacy(polyline.PolylineId)) {};
  (map_event.PolylineTapEvent.new = function(mapId, polylineId) {
    map_event.PolylineTapEvent.__proto__.new.call(this, mapId, polylineId);
    ;
  }).prototype = map_event.PolylineTapEvent.prototype;
  dart.addTypeTests(map_event.PolylineTapEvent);
  dart.addTypeCaches(map_event.PolylineTapEvent);
  dart.setLibraryUri(map_event.PolylineTapEvent, I[0]);
  map_event.PolygonTapEvent = class PolygonTapEvent extends map_event.MapEvent$(dart.legacy(polygon.PolygonId)) {};
  (map_event.PolygonTapEvent.new = function(mapId, polygonId) {
    map_event.PolygonTapEvent.__proto__.new.call(this, mapId, polygonId);
    ;
  }).prototype = map_event.PolygonTapEvent.prototype;
  dart.addTypeTests(map_event.PolygonTapEvent);
  dart.addTypeCaches(map_event.PolygonTapEvent);
  dart.setLibraryUri(map_event.PolygonTapEvent, I[0]);
  map_event.CircleTapEvent = class CircleTapEvent extends map_event.MapEvent$(dart.legacy(circle.CircleId)) {};
  (map_event.CircleTapEvent.new = function(mapId, circleId) {
    map_event.CircleTapEvent.__proto__.new.call(this, mapId, circleId);
    ;
  }).prototype = map_event.CircleTapEvent.prototype;
  dart.addTypeTests(map_event.CircleTapEvent);
  dart.addTypeCaches(map_event.CircleTapEvent);
  dart.setLibraryUri(map_event.CircleTapEvent, I[0]);
  map_event.MapTapEvent = class MapTapEvent extends map_event._PositionedMapEvent$(dart.void) {};
  (map_event.MapTapEvent.new = function(mapId, position) {
    map_event.MapTapEvent.__proto__.new.call(this, mapId, position, null);
    ;
  }).prototype = map_event.MapTapEvent.prototype;
  dart.addTypeTests(map_event.MapTapEvent);
  dart.addTypeCaches(map_event.MapTapEvent);
  dart.setLibraryUri(map_event.MapTapEvent, I[0]);
  map_event.MapLongPressEvent = class MapLongPressEvent extends map_event._PositionedMapEvent$(dart.void) {};
  (map_event.MapLongPressEvent.new = function(mapId, position) {
    map_event.MapLongPressEvent.__proto__.new.call(this, mapId, position, null);
    ;
  }).prototype = map_event.MapLongPressEvent.prototype;
  dart.addTypeTests(map_event.MapLongPressEvent);
  dart.addTypeCaches(map_event.MapLongPressEvent);
  dart.setLibraryUri(map_event.MapLongPressEvent, I[0]);
  var _channels = dart.privateName(method_channel_google_maps_flutter, "_channels");
  var _tileOverlays = dart.privateName(method_channel_google_maps_flutter, "_tileOverlays");
  var _mapEventStreamController = dart.privateName(method_channel_google_maps_flutter, "_mapEventStreamController");
  var _handleMethodCall = dart.privateName(method_channel_google_maps_flutter, "_handleMethodCall");
  var _events = dart.privateName(method_channel_google_maps_flutter, "_events");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  google_maps_flutter_platform.GoogleMapsFlutterPlatform = class GoogleMapsFlutterPlatform extends plugin_platform_interface.PlatformInterface {
    static get instance() {
      return google_maps_flutter_platform.GoogleMapsFlutterPlatform._instance;
    }
    static set instance(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, google_maps_flutter_platform.GoogleMapsFlutterPlatform._token);
      google_maps_flutter_platform.GoogleMapsFlutterPlatform._instance = instance;
    }
    init(mapId) {
      dart.throw(new core.UnimplementedError.new("init() has not been implemented."));
    }
    updateMapOptions(optionsUpdate, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("updateMapOptions() has not been implemented."));
    }
    updateMarkers(markerUpdates, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("updateMarkers() has not been implemented."));
    }
    updatePolygons(polygonUpdates, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("updatePolygons() has not been implemented."));
    }
    updatePolylines(polylineUpdates, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("updatePolylines() has not been implemented."));
    }
    updateCircles(circleUpdates, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("updateCircles() has not been implemented."));
    }
    updateTileOverlays(opts) {
      let newTileOverlays = opts && 'newTileOverlays' in opts ? opts.newTileOverlays : null;
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("updateTileOverlays() has not been implemented."));
    }
    clearTileCache(tileOverlayId, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("clearTileCache() has not been implemented."));
    }
    animateCamera(cameraUpdate, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("animateCamera() has not been implemented."));
    }
    moveCamera(cameraUpdate, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("moveCamera() has not been implemented."));
    }
    setMapStyle(mapStyle, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("setMapStyle() has not been implemented."));
    }
    getVisibleRegion(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("getVisibleRegion() has not been implemented."));
    }
    getScreenCoordinate(latLng, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("getScreenCoordinate() has not been implemented."));
    }
    getLatLng(screenCoordinate, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("getLatLng() has not been implemented."));
    }
    showMarkerInfoWindow(markerId, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("showMarkerInfoWindow() has not been implemented."));
    }
    hideMarkerInfoWindow(markerId, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("hideMarkerInfoWindow() has not been implemented."));
    }
    isMarkerInfoWindowShown(markerId, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("updateMapOptions() has not been implemented."));
    }
    getZoomLevel(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("getZoomLevel() has not been implemented."));
    }
    takeSnapshot(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("takeSnapshot() has not been implemented."));
    }
    onCameraMoveStarted(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("onCameraMoveStarted() has not been implemented."));
    }
    onCameraMove(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("onCameraMove() has not been implemented."));
    }
    onCameraIdle(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("onCameraMove() has not been implemented."));
    }
    onMarkerTap(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("onMarkerTap() has not been implemented."));
    }
    onInfoWindowTap(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("onInfoWindowTap() has not been implemented."));
    }
    onMarkerDragEnd(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("onMarkerDragEnd() has not been implemented."));
    }
    onPolylineTap(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("onPolylineTap() has not been implemented."));
    }
    onPolygonTap(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("onPolygonTap() has not been implemented."));
    }
    onCircleTap(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("onCircleTap() has not been implemented."));
    }
    onTap(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("onTap() has not been implemented."));
    }
    onLongPress(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("onLongPress() has not been implemented."));
    }
    dispose(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      dart.throw(new core.UnimplementedError.new("dispose() has not been implemented."));
    }
    buildView(creationParams, gestureRecognizers, onPlatformViewCreated) {
      dart.throw(new core.UnimplementedError.new("buildView() has not been implemented."));
    }
  };
  (google_maps_flutter_platform.GoogleMapsFlutterPlatform.new = function() {
    google_maps_flutter_platform.GoogleMapsFlutterPlatform.__proto__.new.call(this, {token: google_maps_flutter_platform.GoogleMapsFlutterPlatform._token});
    ;
  }).prototype = google_maps_flutter_platform.GoogleMapsFlutterPlatform.prototype;
  dart.addTypeTests(google_maps_flutter_platform.GoogleMapsFlutterPlatform);
  dart.addTypeCaches(google_maps_flutter_platform.GoogleMapsFlutterPlatform);
  dart.setMethodSignature(google_maps_flutter_platform.GoogleMapsFlutterPlatform, () => ({
    __proto__: dart.getMethods(google_maps_flutter_platform.GoogleMapsFlutterPlatform.__proto__),
    init: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.int)]),
    updateMapOptions: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))], {mapId: dart.legacy(core.int)}, {}),
    updateMarkers: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(marker_updates.MarkerUpdates)], {mapId: dart.legacy(core.int)}, {}),
    updatePolygons: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(polygon_updates.PolygonUpdates)], {mapId: dart.legacy(core.int)}, {}),
    updatePolylines: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(polyline_updates.PolylineUpdates)], {mapId: dart.legacy(core.int)}, {}),
    updateCircles: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(circle_updates.CircleUpdates)], {mapId: dart.legacy(core.int)}, {}),
    updateTileOverlays: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {mapId: dart.legacy(core.int), newTileOverlays: dart.legacy(core.Set$(dart.legacy(tile_overlay.TileOverlay)))}, {}),
    clearTileCache: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(tile_overlay.TileOverlayId)], {mapId: dart.legacy(core.int)}, {}),
    animateCamera: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(camera.CameraUpdate)], {mapId: dart.legacy(core.int)}, {}),
    moveCamera: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(camera.CameraUpdate)], {mapId: dart.legacy(core.int)}, {}),
    setMapStyle: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.String)], {mapId: dart.legacy(core.int)}, {}),
    getVisibleRegion: dart.fnType(dart.legacy(async.Future$(dart.legacy(location.LatLngBounds))), [], {mapId: dart.legacy(core.int)}, {}),
    getScreenCoordinate: dart.fnType(dart.legacy(async.Future$(dart.legacy(screen_coordinate.ScreenCoordinate))), [dart.legacy(location.LatLng)], {mapId: dart.legacy(core.int)}, {}),
    getLatLng: dart.fnType(dart.legacy(async.Future$(dart.legacy(location.LatLng))), [dart.legacy(screen_coordinate.ScreenCoordinate)], {mapId: dart.legacy(core.int)}, {}),
    showMarkerInfoWindow: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(marker.MarkerId)], {mapId: dart.legacy(core.int)}, {}),
    hideMarkerInfoWindow: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(marker.MarkerId)], {mapId: dart.legacy(core.int)}, {}),
    isMarkerInfoWindowShown: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [dart.legacy(marker.MarkerId)], {mapId: dart.legacy(core.int)}, {}),
    getZoomLevel: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.double))), [], {mapId: dart.legacy(core.int)}, {}),
    takeSnapshot: dart.fnType(dart.legacy(async.Future$(dart.legacy(typed_data.Uint8List))), [], {mapId: dart.legacy(core.int)}, {}),
    onCameraMoveStarted: dart.fnType(dart.legacy(async.Stream$(dart.legacy(map_event.CameraMoveStartedEvent))), [], {mapId: dart.legacy(core.int)}, {}),
    onCameraMove: dart.fnType(dart.legacy(async.Stream$(dart.legacy(map_event.CameraMoveEvent))), [], {mapId: dart.legacy(core.int)}, {}),
    onCameraIdle: dart.fnType(dart.legacy(async.Stream$(dart.legacy(map_event.CameraIdleEvent))), [], {mapId: dart.legacy(core.int)}, {}),
    onMarkerTap: dart.fnType(dart.legacy(async.Stream$(dart.legacy(map_event.MarkerTapEvent))), [], {mapId: dart.legacy(core.int)}, {}),
    onInfoWindowTap: dart.fnType(dart.legacy(async.Stream$(dart.legacy(map_event.InfoWindowTapEvent))), [], {mapId: dart.legacy(core.int)}, {}),
    onMarkerDragEnd: dart.fnType(dart.legacy(async.Stream$(dart.legacy(map_event.MarkerDragEndEvent))), [], {mapId: dart.legacy(core.int)}, {}),
    onPolylineTap: dart.fnType(dart.legacy(async.Stream$(dart.legacy(map_event.PolylineTapEvent))), [], {mapId: dart.legacy(core.int)}, {}),
    onPolygonTap: dart.fnType(dart.legacy(async.Stream$(dart.legacy(map_event.PolygonTapEvent))), [], {mapId: dart.legacy(core.int)}, {}),
    onCircleTap: dart.fnType(dart.legacy(async.Stream$(dart.legacy(map_event.CircleTapEvent))), [], {mapId: dart.legacy(core.int)}, {}),
    onTap: dart.fnType(dart.legacy(async.Stream$(dart.legacy(map_event.MapTapEvent))), [], {mapId: dart.legacy(core.int)}, {}),
    onLongPress: dart.fnType(dart.legacy(async.Stream$(dart.legacy(map_event.MapLongPressEvent))), [], {mapId: dart.legacy(core.int)}, {}),
    dispose: dart.fnType(dart.void, [], {mapId: dart.legacy(core.int)}, {}),
    buildView: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), dart.legacy(core.Set$(dart.legacy(basic_types.Factory$(dart.legacy(recognizer.OneSequenceGestureRecognizer))))), dart.legacy(dart.fnType(dart.void, [dart.legacy(core.int)]))])
  }));
  dart.setLibraryUri(google_maps_flutter_platform.GoogleMapsFlutterPlatform, I[2]);
  dart.defineLazy(google_maps_flutter_platform.GoogleMapsFlutterPlatform, {
    /*google_maps_flutter_platform.GoogleMapsFlutterPlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*google_maps_flutter_platform.GoogleMapsFlutterPlatform._instance*/get _instance() {
      return new method_channel_google_maps_flutter.MethodChannelGoogleMapsFlutter.new();
    },
    set _instance(_) {}
  }, true);
  method_channel_google_maps_flutter.MethodChannelGoogleMapsFlutter = class MethodChannelGoogleMapsFlutter extends google_maps_flutter_platform.GoogleMapsFlutterPlatform {
    channel(mapId) {
      return this[_channels][$_get](mapId);
    }
    init(mapId) {
      let channel = null;
      if (!dart.test(this[_channels][$containsKey](mapId))) {
        channel = new platform_channel.MethodChannel.new("plugins.flutter.io/google_maps_" + dart.str(mapId));
        channel.setMethodCallHandler(dart.fn(call => this[_handleMethodCall](call, mapId), T.MethodCallLToFutureL()));
        this[_channels][$_set](mapId, channel);
      }
      return channel.invokeMethod(dart.void, "map#waitForMap");
    }
    dispose(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
    }
    [_events](mapId) {
      return this[_mapEventStreamController].stream.where(dart.fn(event => event.mapId == mapId, T.MapEventLToboolL()));
    }
    onCameraMoveStarted(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return where['Where|whereType'](T.MapEventL(), T.CameraMoveStartedEventL(), this[_events](mapId));
    }
    onCameraMove(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return where['Where|whereType'](T.MapEventL(), T.CameraMoveEventL(), this[_events](mapId));
    }
    onCameraIdle(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return where['Where|whereType'](T.MapEventL(), T.CameraIdleEventL(), this[_events](mapId));
    }
    onMarkerTap(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return where['Where|whereType'](T.MapEventL(), T.MarkerTapEventL(), this[_events](mapId));
    }
    onInfoWindowTap(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return where['Where|whereType'](T.MapEventL(), T.InfoWindowTapEventL(), this[_events](mapId));
    }
    onMarkerDragEnd(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return where['Where|whereType'](T.MapEventL(), T.MarkerDragEndEventL(), this[_events](mapId));
    }
    onPolylineTap(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return where['Where|whereType'](T.MapEventL(), T.PolylineTapEventL(), this[_events](mapId));
    }
    onPolygonTap(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return where['Where|whereType'](T.MapEventL(), T.PolygonTapEventL(), this[_events](mapId));
    }
    onCircleTap(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return where['Where|whereType'](T.MapEventL(), T.CircleTapEventL(), this[_events](mapId));
    }
    onTap(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return where['Where|whereType'](T.MapEventL(), T.MapTapEventL(), this[_events](mapId));
    }
    onLongPress(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return where['Where|whereType'](T.MapEventL(), T.MapLongPressEventL(), this[_events](mapId));
    }
    [_handleMethodCall](call, mapId) {
      return async.async(dart.dynamic, (function* _handleMethodCall() {
        switch (call.method) {
          case "camera#onMoveStarted":
          {
            this[_mapEventStreamController].add(new map_event.CameraMoveStartedEvent.new(mapId));
            break;
          }
          case "camera#onMove":
          {
            this[_mapEventStreamController].add(new map_event.CameraMoveEvent.new(mapId, camera.CameraPosition.fromMap(dart.dsend(call.arguments, '_get', ["position"]))));
            break;
          }
          case "camera#onIdle":
          {
            this[_mapEventStreamController].add(new map_event.CameraIdleEvent.new(mapId));
            break;
          }
          case "marker#onTap":
          {
            this[_mapEventStreamController].add(new map_event.MarkerTapEvent.new(mapId, new marker.MarkerId.new(T.StringL().as(dart.dsend(call.arguments, '_get', ["markerId"])))));
            break;
          }
          case "marker#onDragEnd":
          {
            this[_mapEventStreamController].add(new map_event.MarkerDragEndEvent.new(mapId, location.LatLng.fromJson(dart.dsend(call.arguments, '_get', ["position"])), new marker.MarkerId.new(T.StringL().as(dart.dsend(call.arguments, '_get', ["markerId"])))));
            break;
          }
          case "infoWindow#onTap":
          {
            this[_mapEventStreamController].add(new map_event.InfoWindowTapEvent.new(mapId, new marker.MarkerId.new(T.StringL().as(dart.dsend(call.arguments, '_get', ["markerId"])))));
            break;
          }
          case "polyline#onTap":
          {
            this[_mapEventStreamController].add(new map_event.PolylineTapEvent.new(mapId, new polyline.PolylineId.new(T.StringL().as(dart.dsend(call.arguments, '_get', ["polylineId"])))));
            break;
          }
          case "polygon#onTap":
          {
            this[_mapEventStreamController].add(new map_event.PolygonTapEvent.new(mapId, new polygon.PolygonId.new(T.StringL().as(dart.dsend(call.arguments, '_get', ["polygonId"])))));
            break;
          }
          case "circle#onTap":
          {
            this[_mapEventStreamController].add(new map_event.CircleTapEvent.new(mapId, new circle.CircleId.new(T.StringL().as(dart.dsend(call.arguments, '_get', ["circleId"])))));
            break;
          }
          case "map#onTap":
          {
            this[_mapEventStreamController].add(new map_event.MapTapEvent.new(mapId, location.LatLng.fromJson(dart.dsend(call.arguments, '_get', ["position"]))));
            break;
          }
          case "map#onLongPress":
          {
            this[_mapEventStreamController].add(new map_event.MapLongPressEvent.new(mapId, location.LatLng.fromJson(dart.dsend(call.arguments, '_get', ["position"]))));
            break;
          }
          case "tileOverlay#getTile":
          {
            let tileOverlaysForThisMap = this[_tileOverlays][$_get](mapId);
            let tileOverlayId = T.StringL().as(dart.dsend(call.arguments, '_get', ["tileOverlayId"]));
            let tileOverlay = tileOverlaysForThisMap[$_get](new tile_overlay.TileOverlayId.new(tileOverlayId));
            let tile = null;
            if (tileOverlay == null || tileOverlay.tileProvider == null) {
              return tile_provider.TileProvider.noTile.toJson();
            }
            tile = (yield tileOverlay.tileProvider.getTile(T.intL().as(dart.dsend(call.arguments, '_get', ["x"])), T.intL().as(dart.dsend(call.arguments, '_get', ["y"])), T.intL().as(dart.dsend(call.arguments, '_get', ["zoom"]))));
            return tile.toJson();
          }
          default:
          {
            dart.throw(new message_codec.MissingPluginException.new());
          }
        }
      }).bind(this));
    }
    updateMapOptions(optionsUpdate, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      if (!(optionsUpdate != null)) dart.assertFailed(null, I[1], 224, 12, "optionsUpdate != null");
      return this.channel(mapId).invokeMethod(dart.void, "map#update", new (T.IdentityMapOfStringL$dynamic()).from(["options", optionsUpdate]));
    }
    updateMarkers(markerUpdates, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      if (!(markerUpdates != null)) dart.assertFailed(null, I[1], 244, 12, "markerUpdates != null");
      return this.channel(mapId).invokeMethod(dart.void, "markers#update", markerUpdates.toJson());
    }
    updatePolygons(polygonUpdates, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      if (!(polygonUpdates != null)) dart.assertFailed(null, I[1], 262, 12, "polygonUpdates != null");
      return this.channel(mapId).invokeMethod(dart.void, "polygons#update", polygonUpdates.toJson());
    }
    updatePolylines(polylineUpdates, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      if (!(polylineUpdates != null)) dart.assertFailed(null, I[1], 280, 12, "polylineUpdates != null");
      return this.channel(mapId).invokeMethod(dart.void, "polylines#update", polylineUpdates.toJson());
    }
    updateCircles(circleUpdates, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      if (!(circleUpdates != null)) dart.assertFailed(null, I[1], 298, 12, "circleUpdates != null");
      return this.channel(mapId).invokeMethod(dart.void, "circles#update", circleUpdates.toJson());
    }
    updateTileOverlays(opts) {
      let newTileOverlays = opts && 'newTileOverlays' in opts ? opts.newTileOverlays : null;
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      let currentTileOverlays = this[_tileOverlays][$_get](mapId);
      let previousSet = currentTileOverlays != null ? currentTileOverlays[$values][$toSet]() : null;
      let updates = new tile_overlay_updates.TileOverlayUpdates.from(previousSet, newTileOverlays);
      this[_tileOverlays][$_set](mapId, tile_overlay$.keyTileOverlayId(newTileOverlays));
      return this.channel(mapId).invokeMethod(dart.void, "tileOverlays#update", updates.toJson());
    }
    clearTileCache(tileOverlayId, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return this.channel(mapId).invokeMethod(dart.void, "tileOverlays#clearTileCache", new (T.IdentityMapOfStringL$dynamic()).from(["tileOverlayId", tileOverlayId.value]));
    }
    animateCamera(cameraUpdate, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return this.channel(mapId).invokeMethod(dart.void, "camera#animate", new (T.IdentityMapOfStringL$dynamic()).from(["cameraUpdate", cameraUpdate.toJson()]));
    }
    moveCamera(cameraUpdate, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return this.channel(mapId).invokeMethod(dart.void, "camera#move", new (T.IdentityMapOfStringL$dynamic()).from(["cameraUpdate", cameraUpdate.toJson()]));
    }
    setMapStyle(mapStyle, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return async.async(dart.void, (function* setMapStyle() {
        let successAndError = (yield this.channel(mapId).invokeMethod(T.ListL(), "map#setStyle", mapStyle));
        let success = T.boolL().as(successAndError[$_get](0));
        if (!dart.test(success)) {
          dart.throw(new ui.MapStyleException.new(T.StringL().as(successAndError[$_get](1))));
        }
      }).bind(this));
    }
    getVisibleRegion(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return async.async(T.LatLngBoundsL(), (function* getVisibleRegion() {
        let latLngBounds = (yield this.channel(mapId).invokeMapMethod(T.StringL(), dart.dynamic, "map#getVisibleRegion"));
        let southwest = location.LatLng.fromJson(latLngBounds[$_get]("southwest"));
        let northeast = location.LatLng.fromJson(latLngBounds[$_get]("northeast"));
        return new location.LatLngBounds.new({northeast: northeast, southwest: southwest});
      }).bind(this));
    }
    getScreenCoordinate(latLng, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return async.async(T.ScreenCoordinateL(), (function* getScreenCoordinate() {
        let point = (yield this.channel(mapId).invokeMapMethod(T.StringL(), T.intL(), "map#getScreenCoordinate", latLng.toJson()));
        return new screen_coordinate.ScreenCoordinate.new({x: point[$_get]("x"), y: point[$_get]("y")});
      }).bind(this));
    }
    getLatLng(screenCoordinate, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return async.async(T.LatLngL(), (function* getLatLng() {
        let latLng = (yield this.channel(mapId).invokeMethod(T.ListL(), "map#getLatLng", screenCoordinate.toJson()));
        return new location.LatLng.new(T.doubleL().as(latLng[$_get](0)), T.doubleL().as(latLng[$_get](1)));
      }).bind(this));
    }
    showMarkerInfoWindow(markerId, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      if (!(markerId != null)) dart.assertFailed(null, I[1], 462, 12, "markerId != null");
      return this.channel(mapId).invokeMethod(dart.void, "markers#showInfoWindow", new (T.IdentityMapOfStringL$StringL()).from(["markerId", markerId.value]));
    }
    hideMarkerInfoWindow(markerId, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      if (!(markerId != null)) dart.assertFailed(null, I[1], 480, 12, "markerId != null");
      return this.channel(mapId).invokeMethod(dart.void, "markers#hideInfoWindow", new (T.IdentityMapOfStringL$StringL()).from(["markerId", markerId.value]));
    }
    isMarkerInfoWindowShown(markerId, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      if (!(markerId != null)) dart.assertFailed(null, I[1], 498, 12, "markerId != null");
      return this.channel(mapId).invokeMethod(T.boolL(), "markers#isInfoWindowShown", new (T.IdentityMapOfStringL$StringL()).from(["markerId", markerId.value]));
    }
    getZoomLevel(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return this.channel(mapId).invokeMethod(T.doubleL(), "map#getZoomLevel");
    }
    takeSnapshot(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return this.channel(mapId).invokeMethod(T.Uint8ListL(), "map#takeSnapshot");
    }
    buildView(creationParams, gestureRecognizers, onPlatformViewCreated) {
      if (platform.defaultTargetPlatform == platform.TargetPlatform.android) {
        return new platform_view.AndroidView.new({viewType: "plugins.flutter.io/google_maps", onPlatformViewCreated: onPlatformViewCreated, gestureRecognizers: gestureRecognizers, creationParams: creationParams, creationParamsCodec: C[0] || CT.C0, $creationLocationd_0dea112b090073317d4: C[1] || CT.C1});
      } else if (platform.defaultTargetPlatform == platform.TargetPlatform.iOS) {
        return new platform_view.UiKitView.new({viewType: "plugins.flutter.io/google_maps", onPlatformViewCreated: onPlatformViewCreated, gestureRecognizers: gestureRecognizers, creationParams: creationParams, creationParamsCodec: C[0] || CT.C0, $creationLocationd_0dea112b090073317d4: C[8] || CT.C8});
      }
      return new text.Text.new(dart.str(platform.defaultTargetPlatform) + " is not yet supported by the maps plugin", {$creationLocationd_0dea112b090073317d4: C[15] || CT.C15});
    }
  };
  (method_channel_google_maps_flutter.MethodChannelGoogleMapsFlutter.new = function() {
    this[_channels] = new (T.IdentityMapOfintL$MethodChannelL()).new();
    this[_tileOverlays] = new (T.IdentityMapOfintL$MapLOfTileOverlayIdL$TileOverlayL()).new();
    this[_mapEventStreamController] = T.StreamControllerOfMapEventL().broadcast();
    method_channel_google_maps_flutter.MethodChannelGoogleMapsFlutter.__proto__.new.call(this);
    ;
  }).prototype = method_channel_google_maps_flutter.MethodChannelGoogleMapsFlutter.prototype;
  dart.addTypeTests(method_channel_google_maps_flutter.MethodChannelGoogleMapsFlutter);
  dart.addTypeCaches(method_channel_google_maps_flutter.MethodChannelGoogleMapsFlutter);
  dart.setMethodSignature(method_channel_google_maps_flutter.MethodChannelGoogleMapsFlutter, () => ({
    __proto__: dart.getMethods(method_channel_google_maps_flutter.MethodChannelGoogleMapsFlutter.__proto__),
    channel: dart.fnType(dart.legacy(platform_channel.MethodChannel), [dart.legacy(core.int)]),
    [_events]: dart.fnType(dart.legacy(async.Stream$(dart.legacy(map_event.MapEvent))), [dart.legacy(core.int)]),
    [_handleMethodCall]: dart.fnType(dart.legacy(async.Future), [dart.legacy(message_codec.MethodCall), dart.legacy(core.int)])
  }));
  dart.setLibraryUri(method_channel_google_maps_flutter.MethodChannelGoogleMapsFlutter, I[3]);
  dart.setFieldSignature(method_channel_google_maps_flutter.MethodChannelGoogleMapsFlutter, () => ({
    __proto__: dart.getFields(method_channel_google_maps_flutter.MethodChannelGoogleMapsFlutter.__proto__),
    [_channels]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(platform_channel.MethodChannel)))),
    [_tileOverlays]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(core.Map$(dart.legacy(tile_overlay.TileOverlayId), dart.legacy(tile_overlay.TileOverlay)))))),
    [_mapEventStreamController]: dart.finalFieldType(dart.legacy(async.StreamController$(dart.legacy(map_event.MapEvent))))
  }));
  dart.trackLibraries("packages/google_maps_flutter_platform_interface/src/events/map_event.dart", {
    "package:google_maps_flutter_platform_interface/src/events/map_event.dart": map_event,
    "package:google_maps_flutter_platform_interface/src/method_channel/method_channel_google_maps_flutter.dart": method_channel_google_maps_flutter,
    "package:google_maps_flutter_platform_interface/src/platform_interface/google_maps_flutter_platform.dart": google_maps_flutter_platform,
    "package:google_maps_flutter_platform_interface/google_maps_flutter_platform_interface.dart": google_maps_flutter_platform_interface
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["map_event.dart","../platform_interface/google_maps_flutter_platform.dart","../method_channel/method_channel_google_maps_flutter.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../D:/packages/google_maps_flutter_platform_interface/src/events/map_event.dart.lib.js"}');
  // Exports:
  return {
    src__events__map_event: map_event,
    src__method_channel__method_channel_google_maps_flutter: method_channel_google_maps_flutter,
    src__platform_interface__google_maps_flutter_platform: google_maps_flutter_platform,
    google_maps_flutter_platform_interface: google_maps_flutter_platform_interface
  };
}));

//# sourceMappingURL=map_event.dart.lib.js.map
